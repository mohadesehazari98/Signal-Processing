(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1458862,      28315]
NotebookOptionsPosition[   1426821,      27819]
NotebookOutlinePosition[   1427164,      27834]
CellTagsIndexPosition[   1427121,      27831]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", " ", "[", " ", 
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612046600274553`*^9, 3.7612047168572946`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"332774ce-3ad3-43c0-ac56-d42b10d0d710"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQA2IQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5XLXr30/mQvD1KjwXP/jDCOeX5dVyVT1E
8Nmin95YswrBVzHZWipki+AnPQtZfzeRAc5ve/guSSsEwV91p0Os3A3B/3Rp
T62ANoIvdi7MMFYWwbc6+eHJSn4EP7k2Yw0/L4IPANpnkVE=
        "]], LineBox[CompressedData["
1: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

        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAmIQnVybsYafl8GBAQqmPJsS2KOM4DsF+6fxGyD4H/Zz
Vk+yQfDn6RzpF/VE8H+yWu6UTkLwlxV9PjsvD8EPub/2kWI1gr9hhxKPxhQE
Py2bJ97kGIJ/5cJ9Fl8tRoT62W0BdZ8Q/NPCbc/5GZjg/GfdrXULeRF8mZqW
NUc0EPyOmCYO7ngEP0G27sD00wi+wPxSg41LmOH8/EUpAk/CWOH8uKxZsu2N
HHB+Z2CZpfEcbjifRWTqs/pffHD+9dOtH1r4BeH80Ooks1mHheD8HO7XSuei
ROB8+dXHprG9EoXzq3c4B/PPFofzC5blbDPTl4TzeZjMk/SeSsH5rrkhU7Um
y8D5Ejtl811V5OD8SUUdEw2uy8P5QW3+unO3KcD5WtEtoUtqFeH8a884F00O
VYLzzyU9dRSSV4bzH7Is/zFVCcH/sixjvaQagi/5+rWMoi6Cn1L86bu+NYL/
q/n/Wt9wBF9tqaRUZz+Cb+l++wLPZATf5+Wc9gnTEPxCXYWv0+ci+Hu2ql1Y
thrBDzpm3HbkOIKfmvHVxuM0gl/Btf3z6XMI/lw/q8TLVxH8F9ccbB49RnJv
BdPn1OcIPq/0kZUvXyH4RvHu4h8/IviujJznSr4i+BGLT7X8+IHgZ7n2WNf8
QfBrn/t++v8fwQcAkTC9vw==
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$6675#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.2172113522111926, 0.9999901273918655}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612047188197803`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"54ac1feb-9315-4ee8-a446-5bc33df900ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"UnitStep", "[", " ", 
     RowBox[{"Sin", "[", "pit", "]"}], "]"}], " ", "*", " ", 
    RowBox[{"Ramp", "[", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", " ", "[", " ", 
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.761204723114233*^9, 3.761204754224101*^9}, {
  3.7612048129730806`*^9, 3.7612048678507977`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"0f24073c-219e-476e-a41a-1cc99399bdbb"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.76120486942297*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"2d0e6ac7-c428-4651-b2b5-62609d8a2de0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"UnitStep", "[", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"pi", "*", "t"}], "]"}], "]"}], " ", "*", " ", 
    RowBox[{"Ramp", "[", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", " ", "[", " ", 
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612049163441353`*^9, 3.7612049308041067`*^9}, {
  3.7612049929023447`*^9, 
  3.76120499312179*^9}},ExpressionUUID->"964931e8-ef01-4aab-9745-\
2d770991a293"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612049316739545`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"b525565e-8d10-4ff4-9013-5157dd7f8ecd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", " ", 
   RowBox[{
    RowBox[{"UnitStep", "[", 
     RowBox[{"sin", "[", 
      RowBox[{"pi", "*", "t"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.76120494641176*^9, 3.7612050116706753`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"8bb68083-bd7e-48cc-816b-304a64226c0d"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761205012596784*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"f4286c73-095d-412c-a45b-c1d3edcebed7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", " ", 
  RowBox[{
   RowBox[{"Ramp", "[", 
    RowBox[{"4", "-", 
     RowBox[{"(", 
      RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761205038482214*^9, 3.761205039780742*^9}, {
  3.7612051622040854`*^9, 3.7612051989570107`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"9f25b49d-9851-4fcf-8e19-e5b8d7b51e4f"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwBWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXzjZ4Y/bpiguAfeSVoYKCB4D/7fn72Mz4EX0vIpzj4Dguc
v8nNRUm3HME/st6k4cEaZjg/dJvwNusFCP6zPZ9eT5uM4HOc2hDuW4Xg+z7R
0d/ljuBfk1C9N/kRE5z/vFHUxl0CweeqXf9+MheCr1fhufjBH0Y4vyyvlqvq
IYLPFv30xppVCL6KydZSIVsE30PfXzNeH8HP0Xp5Z7Uigr9FQdbFlQ3Bd+Zt
Fao4zwDnJz0LWX83EcFve/guSSsEwV91p0Os3A3B/3RpT62ANoIvdi7MMFYW
wbc6+eHJSn4EP7k2Yw0/L4IPADEgxrI=
        "]], LineBox[CompressedData["
1:eJwBwQE+/iFib1JlAgAAABsAAAACAAAAOQUvp+Dl/7+AdXZJrxSaP0p1ff8f
zf+/wJXduMdbqT+Ra7FmubH/v4AGwTq3ebM/IFgZNex6/79AR6eT4n/APz8x
6dFRDf+/APEG4L7izT+GJx056/H+v/j733gQmtA/zh1RoITW/r946w8bSkHS
P14KuW63n/6/qA5qK1eL1T9844gLHTL+vyBmB3zYDdw/upUoRehW/b9gLHPu
O2bkPwhb52MBPP2/2N/X1jMr5T9WIKaCGiH9v3jhvdF27+U/8qojwEzr/L88
zw3/3XXnPynAHjuxf/y/yFS9NzF66j+Y6hQxeqj7v+qDrZB1MPA/dT8BHQz6
+b/8hshqVtP1P8IEwDsl3/m/ZsMPh4Mq9j8Qyn5aPsT5v+KmlyxWgfY/rFT8
l3CO+b8YY2kT7C33P+Rp9xLVIvm/hLAUUNqC+D9SlO0Inkv4v2KfioXAG/s/
MOnZ9C+d9r+M5nnw2QQAQHTwLSkXhPa/+lY86D4oAEC494Fd/mr2v9rgW4J8
SwBAQQYqxsw49r/uQLKdgZEAQFIjepdp1PW/cjK8cLMbAUDFYLno67b1v16+
sOE2QwFAlRnpTQ==
        "]], LineBox[CompressedData["
1:eJwB4QEe/iFib1JlAgAAAB0AAAACAAAAi0k3COez9T9evrDhNkMBQAcMUIFi
7vY/Xl1+Z5Ei/z9YJ1rANgn3Pw4OqUh91f4/qkJk/wok9z8C7jowD4j+P055
eH2zWfc/ujuUEiXs/T+W5qB5BMX3P3YOHSQZsPw/JsHxcaab+D8MkYd6Iif6
P0V2k2LqSPo/vgrA9LnR9D+WkZ2hvmP6PzCk0KJmefQ/6Kyn4JJ++j/kbEhX
uSD0P4zju147tPo/Hoxt01Bu8z/UUORajB/7P9wBjhhIBfI/ZCs1Uy72+z/s
lE+sr0TuP4Pg1kNyo/0/ZKB9Pfgx4j/euUtteLz9P6BAdcQ+eOE/OpPAln7V
/T8wLl2+6L3gP/BFqumKB/4/yOL7Fc6O3j9eq32Po2v+P5AvBg8aptg/uoTy
uKmE/j9wRfpL3ijXPxVeZ+Kvnf4/CPbObmmq1T/MEFE1vM/+PzgnGmbUqdI/
OnYk29Qz/z9wk282+jPJP5ZPmQTbTP8/AGphDvElxj/xKA4u4WX/PxB2FLJ1
FcM/qNv3gO2X/z9AXHy5UNq5PwS1bKrzsP8/QLRpx6yqsz9fjuHT+cn/P4Du
stlI7Ko/umdW/f/i/z8AlC6n3vKcPzkFL6fg5f8/gHV2Sa8Umj8C8vFA
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAmIQnVybsYafl8GBAQqmPJsS2KOM4DsF+6fxGyD4H/Zz
Vk+yQfDn6RzpF/VE8H+yWu6UTkLwlxV9PjsvD8EPub/2kWI1gr9hhxKPxhQE
Py2bJ97kGIJ/5cJ9Fl8tRoT62W0BdZ8Q/NPCbc/5GZjg/GfdrXULeRF8mZqW
NUc0EPyOmCYO7ngEP0G27sD00wi+wPxSg41LmOH8/EUpAk/CWOH8uKxZsu2N
HHB+Z2CZpfEcbjifRWTqs/pffHD+9dOtH1r4BeH80Ooks1mHheD8HO7XSuei
ROB8+dXHprG9EoXzq3c4B/PPFofzC5blbDPTl4TzeZjMk/SeSsH5rrkhU7Um
y8D5Ejtl811V5OD8SUUdEw2uy8P5QW3+unO3KcD5WtEtoUtqFeH8a884F00O
VYLzzyU9dRSSV4bzH7Is/zFVCcH/sixjvaQagi/5+rWMoi6Cn1L86bu+NYL/
q/n/Wt9wBF9tqaRUZz+Cb+l++wLPZATf5+Wc9gnTEPxCXYWv0+ci+Hu2ql1Y
thrBDzpm3HbkOIKfmvHVxuM0gl/Btf3z6XMI/lw/q8TLVxH8F9ccbB49RnJv
BdPn1OcIPq/0kZUvXyH4RvHu4h8/IviujJznSr4i+BGLT7X8+IHgZ7n2WNf8
QfBrn/t++v8fwQcAkTC9vw==
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$8645#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 2.1578195221007226`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761205204221596*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"1b7aadd4-042f-4712-b37d-1e2d4f133edf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"pi", "*", "t"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761205255194807*^9, 3.7612052746333113`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"08ac5004-1437-4bd2-b22d-73cbf61d9e45"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761205276318738*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"d9ed1950-c78f-44ad-a8ed-b322d830c3f0"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612052867464533`*^9, 3.7612053036237555`*^9}, {
  3.761205421558547*^9, 
  3.7612054226346703`*^9}},ExpressionUUID->"1137cfd4-5206-442e-98ff-\
0beb6a3e476b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612054975912385`*^9, 3.7612055113993144`*^9}, 
   3.7612056425516157`*^9},ExpressionUUID->"bb6c8c29-239c-4b23-97ee-\
c5ecbba9bd9a"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "sin(pi*t) t from -10 to 10", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plot", 1, 1, "Input", "Plot[Sin[Pi t], {t, -10, 10}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[Pi t], {t, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "t"}], ")"}], HoldForm], 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"t", "\[LongEqual]", 
                    StyleBox[
                    TagBox[
                    RowBox[{"-", "10"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    StyleBox["\" to \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    TagBox["10", HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Plot", "numsubpods" -> "1", 
     "position" -> "200", "scanner" -> "Plot", "title" -> "Plot"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[Pi t], {t, -10, 10}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1244$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1243$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1146128$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1243$\
1146133$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1244$1146134$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1244$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1243$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1146128$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1243$\
1146133$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1244$\
1146134$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1146111[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[Pi Global`t], {Global`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$], \
-10], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$]], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$ + 
                    Rational[1, 50], 
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$]], 
                    10]}, ImageSize -> {300.}, PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.6, 0.33692049419863584`], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.5939180232054561, 0.6], 
                    AbsoluteThickness[1]]}}, PerformanceGoal -> "Quality"]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1243$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1244$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1146111]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1146111[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1146111[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMFJgQX5BgHYxJA0pSvveWOImFawfb2QZ/\
Hnx2kzRrVymmAzSlH071pXl899xz13tyJMJ0OBgM1FVjPgiWpDfw9NiYsZgXouTJu9NCEqWo4OkVfH\
bbmIjoPcLgB0mc77ox74Wcg3bn1/g+\
sLhkoMlXTRnVlKjZvoQip7FqPBNJj81PZkzEwOhP8jQIdl4GwSsHg7FMQGsiuXrRFbLIJSiSDhDomj\
G7DPg3d3xUHT+VjEXke0l4TNQD451KSAyM4MAwH+\
9bLzdTdzExDTwBmVw4TVae464XKC0pz6ZkXuAb55MVdAUGmSnHzb2Km00KcuHfxAcisjE5j03ani2B\
fmFcMvrOyuqfczfC85uu8FKcrCcO83vLkDfQ9JioVTqfda6TY6TuWhv9gquLmi9bDfL8KdP8Lx1SpV\
fDeN41DDI/MjVer71V+J2u8KLArl+I+74xn52jAlw3HGrBfRRJyRZRtFMeOYl2T1cVxuEw7tR8R+\
j0qWCNE5o4q36x/\
fGwBm82hQhrN9uCdHgzA0JSEONKLLd7NKN6nIOE2AAvrhtWTTYVTSged3avPeUJNQPMEbJpeUJzkC7\
VHXScf/mj4tZyOdNkyPsB1yQjcqPob2F9pCGXJ1PhGUmEF7T16s1hndQEpLfsRxVIVACnCEl/mY/\
95h4uVwKp2peoLulYHNnSnPonMawKfEh4pvP2ju05urzbFrMJxUmjupCm6fK02R7TwzbTrRvaA92XB\
N+S+A/0flPoN4W/uims7MH9mtCvCf2a0K8J/Zrw/64JNmL8V/oNgtG4Tg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Arc length of curve", "scanner" -> "Plot", "id" -> 
     "None", "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "N[Integrate[Sqrt[1 + Pi^2 Cos[Pi t]^2], {t, -10, 10}]]"}], 
       XMLElement["moutput", {}, {"46.0979"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "10"}], "10"], 
                 RowBox[{
                   TagBox[
                    SqrtBox[
                    RowBox[{"1", "+", 
                    RowBox[{
                    SuperscriptBox["\[Pi]", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["cos", "2"], "(", 
                    RowBox[{"\[Pi]", " ", "t"}], ")"}]}]}]], Identity], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"40", " ", 
                  SqrtBox[
                   RowBox[{"1", "+", 
                    SuperscriptBox["\[Pi]", "2"]}]], " ", 
                  TemplateBox[{
                    FractionBox[
                    SuperscriptBox["\[Pi]", "2"], 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[Pi]", "2"]}]]}, "EllipticE"]}], 
                "\[Pi]"], Identity], "\[TildeTilde]", 
              TagBox["46.09785322707382`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "None__More digits"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "E(m) is the complete elliptic integral of the second kind with \
parameter m=k^2"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/EllipticE.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/EllipticIntegrals/EllipticE",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/\
CompleteEllipticIntegraloftheSecondKind.html", "text" -> "Definition", 
           "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"m"}, "EllipticE"], "\" \"", 
                "\"is the complete elliptic integral of the second kind with \
parameter\"", "\" \"", 
                RowBox[{"m", "\[LongEqual]", 
                  SuperscriptBox["k", "2"]}]}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "Plot", "timedout" -> "Plot", "timedoutpods" -> "", "timing" -> "3.222", 
     "parsetiming" -> "1.436", "parsetimedout" -> "false", "recalculate" -> 
     "http://www4f.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1971f9a93ebdadfde6f000018if4gg237b2ca46682927807421097904", "id" -> 
     "MSPa1981f9a93ebdadfde6f00003d50c6a03fh6ib2c", "host" -> 
     "http://www4f.wolframalpha.com", "server" -> "47", "related" -> 
     "http://www4f.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1991f9a93ebdadfde6f0000467a7e4e0f77e8g3682927807421097904", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "1", 
     "datatypes" -> "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "1.688", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4f.wolframalpha.com", "server" -> "38", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3.5, 
    "Date" -> {2019, 3, 10, 14, 51, 45.3776203`9.409416583230565}, "Line" -> 
    16, "SessionID" -> 20608515830038357573}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {
   "Plot", "Plot", 1, 1, "Input", "Plot[Sin[Pi t], {t, -10, 10}]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "sin(pi*t) t from -10 to 10"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{504., {639., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4f.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1971f9a93ebdadfde6f000018if4gg237b2ca46682927807421097904", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[16]:=",ExpressionUUID->"ea33d2db-dade-4eb4-8a76-3ebbc6370843"],

Cell[BoxData[
 TemplateBox[{
  "WolframAlpha","timeout",
   "\"The call to \\!\\(\\*RowBox[{\\\"WolframAlpha\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"sin(pi*t) t from -10 to 10\\\\\\\"\\\", \\\",\\\", \\\"\\\
\\\\\"MathematicaParse\\\\\\\"\\\"}], \\\"]\\\"}]\\) has exceeded \
\\!\\(\\*RowBox[{\\\"30.`\\\"}]\\) seconds. Increasing the value of the \
TimeConstraint option may improve the result.\"",2,16,4,20608515830038357573,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612056996559205`*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"7e1a4b4d-8bd7-47db-b341-6234010cbb3f"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
JsXz12fkk/H/vz8I/v/9QZX/B2igV0s=
       "]]},
     Annotation[#, "Charting`Private`Tag$12683#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999996519478712, 0.9999999691979907}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612057057127247`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"9990070e-90a8-4ef7-849e-cf2138008b63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"pi", "*", "t"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761205811789078*^9, 3.7612058302038383`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"05d83445-5d86-4d8e-a297-424de1492d95"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761205831397646*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"d8f73e76-cd39-4b42-b3c8-dd3aaa8c5732"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
     RowBox[{"g", "[", "x", "]"}], "_"}], "]"}], ":=", " ", 
   RowBox[{"g", "[", "x", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", " ", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"Sin", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612060197868958`*^9, 3.761206084543738*^9}, {
  3.761206128179059*^9, 3.7612061760929375`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"4fbda4d1-5304-4ef7-bd42-b291d3704e37"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761206177352569*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"44c01094-8b75-4294-80e3-1d13e5192101"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", "x"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"Sin", "[", "x", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761206195392331*^9, 3.761206236669956*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"dba135ee-1b3b-445f-8481-642d13a51666"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
7tJvh5VNu5Gt9YlvY/IC8DfXtvatBT2IQyRy4M6iAFQI4Dpt918/ojB9BSjc
grDsd/r6Qr9+JFdpv/sNVRAWtcqmd73tR9reWkGVWwVhzBcFzUCiH93q690k
fFEQ5p8YDz3oN4CYn9RtE0sEYTgjJm9v9CBaeSwdqlEnCE/XJUiI5Q8iPgeu
z+XtgpDTTHIo7+8g2iLzl2N0RhCObaz2PS4zhLKLYb2EiBBkLxlOSHw9hMaU
h65bHROC554IyrQ+H0bTGzoC0wyEyH4pjxnIHUZLHPUvpo2EoJWObNynxmG0
/t+3oqCLQrDlA2PtqeAIUnr2RDjNUwhOm543O3xvBFkt7c6aShWCxFVh/dP/
jSKHIZUyrSwhqKTIW3LUbRS5NNFbA/OEoL3dLefZx6PoTsZ6VvFSIcgMe231
qGgUxVh3Gmp1kPmMOyx4K4yhP9WB4wGCwnCKT7nt+N8xFKEde/ScmDD0vhQ/
kzMxhoyyPr3cJCMM6wg5ahUPA9VE9R4pVxaGti8NDWZ3MVC55cEX3MeEId/8
kfhzIQwU0GjK/GMgDF/1mX7ekED6Fx2XwylnhCFd+mGd/2cGKtz6mqFrKQxr
L6ipnu9goNy55YPB3sKwgjl/cHIzE910FIk28xeGYn9CD6/uYyL1DpUx5WBh
mEJNC8k2YKKPxWZR1dHC8GPV2mbqNSZKDv0ywpcjDD39HipnZDCRDUsd6MgX
ho93DLDOFzKR/I3BiA9YGP4n05ww+IuJ4kzFwMkaYZjqL/bk6wgTRSncfPZk
WBjai91NUKYT6GzUo6GL48JQbfyX5tutBKKsSzqwfU4Yrrt/1axMk0CPmb8H
6zgo0M+emTlzikAGlsNaCbwUyMUflMj5H4HWN7KEX6dQyPOiI/qrLYGC8rdp
UegUaOX9lEK9TaAjW3XCehQp8E98t3muP4HYXlsMZKtSYP71Lo3VEAL5BoQ+
PbOfAk3vayp4xZF+fO5Nv8IhChyfqufKTCbQokPBvmldChwlYikPPxLI/dRo
X4QxBdL883WVvhNIo5htn+0FCnTd81p3rIRAkxqST3bZUOD17V1S534QKPPd
jj5OJwpsU+/NsKwjkLOk3t7m6xTokyk5JdxMoK2hlx4ne5LxljiabNsINLLm
0et+hwKdb249dqGLQCmuTzR1giiw4auS5nwfgez6k0M3hFKgbsOL2N3DBNpo
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
e18N/T9ymX8F
       "]]},
     Annotation[#, "Charting`Private`Tag$14235#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999999784391316, 0.9999999998606331}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761206238814221*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2524ad45-0ad4-4e33-a528-feaddc408390"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612062509936543`*^9, 3.7612063539264145`*^9}, {
  3.7612064831558576`*^9, 3.7612065277406387`*^9}, {3.761206677975334*^9, 
  3.761206712873018*^9}},ExpressionUUID->"4322a384-1e2e-4ae4-8dc8-\
5896f2598051"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"FunctionPeriod", "[", 
          RowBox[{"g", ",", "t"}], "]"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"g", "^", "2"}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          RowBox[{"-", 
           RowBox[{"FunctionPeriod", "[", 
            RowBox[{"g", ",", "t"}], "]"}]}], ",", 
          RowBox[{"FunctionPeriod", "[", 
           RowBox[{"g", ",", "t"}], "]"}]}], "}"}]}], "]"}]}], ",", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"Sin", "[", "t", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612067179743776`*^9, 3.7612067211558704`*^9}, {
  3.7612067722113495`*^9, 3.7612069942825356`*^9}, {3.761207054766803*^9, 
  3.761207148706609*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"cd4f6636-a610-42a8-83cc-0e0c2c385e27"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7612071525942154`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"12a9845d-5ba9-4cf1-b4a5-d85e0d4210ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"DiracDelta", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7612077139711027`*^9, 3.7612077357478714`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"b52368a6-61c0-41f8-82b1-26ebb22fd23b"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcL7Lrtuc
f8M+wPkFK9f/EBR+DOeHpSkvvFRzEs7vOPbrQoR8FZwPABwHglQ=
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQ3XHs14UI+Sp7Biiw0j24KWD6YzifqUz0TorkBzif
nSegMendNzi/+cE156LFf+H8DbPbAuo+MTrA+PmLUgSehLHC+XFZs2TbGzng
/M7AMkvjOdxwPovI1Gf1v/jg/OunWz+08AvC+aHVSWazDgvB+Tncr5XORYnA
+fKrj01jeyUK51fvcA7mny0O5xcsy9lmpi8J5/MwmSfpPZWC811zQ6ZqTZaB
8yV2yua7qsjB+ZOKOiYaXJeH84Pa/HXnblOA87WiW0KX1CrC+deecS6aHKoE
559LeuooJK8M5z9kWf5jqhKC/2VZxnpJNQRf8vVrGUVdBD+l+NN3fWsE/1fz
/7W+4Qi+2lJJqc5+BN/S/fYFnskIvs/LOe0TpiH4hboKX6fPRfD3bFW7sGw1
gh90zLjtyHEEPzXjq43HaQS/gmv759PnEPy5flaJl68i+C+uOdg8eozk3gqm
z6nPEXxe6SMrX75C8I3i3cU/fkTwXRk5z5V8RfAjFp9q+fEDwc9y7bGu+YPg
1z73/fT/P4IPACGMn7U=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$16167#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612077372907467`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"ba9dfd80-fa28-4594-b973-62e97668dbd5"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612069633741846`*^9, 
  3.7612069762367887`*^9}},ExpressionUUID->"297808f4-e77e-4b96-9ed4-\
1f7179065e91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", " ", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"Pi", "*", "t"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7612265381001716`*^9, 3.761226583519574*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"edce7e22-5bc5-4ab0-8db9-98a77397ce6e"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
JsXz12fkk/H/vz8I/v/9QZX/B2igV0s=
       "]]},
     Annotation[#, "Charting`Private`Tag$2489#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999996519478712, 0.9999999691979907}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612265846238775`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"9ecad06a-fe60-4aeb-b895-6f7286b5d9f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"Clear", "\[IndentingNewLine]", "ClearAll", \
"\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.761226598133954*^9, 3.761226618337828*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"11472fa1-8dc4-4331-8ba5-eb291cff1ee9"],

Cell[BoxData["Clear"], "Output",
 CellChangeTimes->{3.7612266202814317`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"1bfc8a78-1e62-4eed-828c-976abb79200a"],

Cell[BoxData["ClearAll"], "Output",
 CellChangeTimes->{3.761226620283427*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"3799d56f-1435-4d7c-b4ef-4cd5e01b0f92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", " ", "[", 
  RowBox[{
   RowBox[{"UnitStep", "[", 
    RowBox[{"Sin", "[", 
     RowBox[{"Pi", "*", "t"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761226625613654*^9, 3.7612266539430523`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"26b6305d-e084-4bce-8057-e94e49d875b1"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], 
       LineBox[{{-9.999999591836735, 1.}, {-9.803713183903064, 
        1.}, {-9.607426775969392, 1.}, {-9.39462981713011, 
        1.}, {-9.181832858290827, 1.}, {-9.132159042079092, 
        1.}, {-9.082485225867359, 1.}, {-9.057648317761492, 
        1.}, {-9.032811409655626, 1.}, {-9.020392955602691, 
        1.}, {-9.007974501549759, 1.}, {-9.006377551020408, 1.}}], 
       LineBox[CompressedData["
1:eJxFx1kowwEAx/E1NmEJk2blmNZkbJS8OIsSCWvl+rNWw56GEbnPbK2GXOUI
uVdeFF5oijYmyTwsPJhGJjYtxCxWjpLfr779+rAktcIqMolEivvp9zUWa5DW
zdol/a1/VmkUvcMlE/LXuFeYPUKEkJ/hHQW/YsUGO2RnTocZFiRzwrr1MP1i
X7YwDO/GzKv6BmFZV/uSVA0fcBIuuQq4tXEud6MZvgls4+rF8Hpe/L2VB4vn
fT0PuTDt7S58NQqWTs8U17Bgpt3H4AyCe1XWZS93xL+FuqmK6COYbbq9MhzA
zls+IdXBk1SdYFELW3LsqaFrcPVpMiNgDE67VoyuDcH+L0a//AF4k15JUSvh
j6L+F88WWGW+PHaJYMLByR4n4NgvuS6xGDZGULbrBXBwJU/zmAHfNzRFqtPh
LcXeTHQKXK4pHJMmwou2jh5LFNzwaXB3suEsWmBzKAu28VZqCCasTXt6cAXD
AwVJVeN0OL7upMxEg8m9jPN6b9g0IhEGUOHScKY90wP+Bpfjtbo=
        "]], 
       LineBox[{{-7.9936224489795915`, 1.}, {-7.985437379548831, 
        1.}, {-7.972230616836778, 1.}, {-7.775024107436275, 
        1.}, {-7.577817598035772, 1.}, {-7.364100537729658, 
        1.}, {-7.150383477423544, 1.}, {-7.097928615436939, 
        1.}, {-7.045473753450334, 1.}, {-7.0323600379536835`, 
        1.}, {-7.0192463224570325`, 1.}, {-7.012689464708707, 
        1.}, {-7.0063775510204085`, 1.}}], LineBox[CompressedData["
1:eJxFx2kogwEAxvG3kZWyD8QYGnuj3g+yhDdhrdZyU8iKRMKXLeR4c2SJD2ZN
uaJNSpRbabVokWNF5ogwR0xrpYWEHNPkKu156t/TL7ysOreCRRBE9G9/n72+
QzV+BK8R/5MPLj+dO+HBeIZHPsMblmiJ4g7mcccHvq5g81AXTZrgN1pSqliG
BWefKoMBbg6suUiZgiltQauiG1bpSJNBBqeMrGSn3vPcfuy+/PS8gXVK18z6
NXxfksBOPIL7BIbVKCNsnZwT+qlgRj/sayXhsHHjmi4U3u4/r5Jx4ZAG7s6B
N7xB93eYnoLc5qyoX6ZW4YmtJktdEayNYSTT+bBmpHbBmgXX1snVaWI4mV8s
4kfAx4x4wvwQ6PaWLcmPcMDGzIS2OBs8KogpHD2C5fskh1mCWZFsJrwdfu3x
sBe0wA7Xd46mHt4/dFLvlbC29fZqNwPWOG7SWVJYmWdfpEVwOXXZOyaEZQNn
X6cUnP59LPchYeHJnrTRHybFZv08Bw6Y3eTb2bBeFGvp9IJ/AO/pulo=
        "]], 
       LineBox[{{-5.9936224489795915`, 1.}, {-5.981173809171851, 
        1.}, {-5.967909540118121, 1.}, {-5.94138100201066, 
        1.}, {-5.9148524639032, 1.}, {-5.716725853035866, 
        1.}, {-5.518599242168532, 1.}, {-5.324370243660893, 
        1.}, {-5.130141245153254, 1.}, {-5.077456357799941, 
        1.}, {-5.024771470446629, 1.}, {-5.018185859527465, 
        1.}, {-5.011600248608301, 1.}, {-5.0063775510204085`, 1.}}], 
       LineBox[CompressedData["
1:eJxFx1kowwEAx/G/ZUKjuQkZLZKiuZ4cWSyKheSBJYyauXkgpD24j7CiXGHL
/ffgaLK0yGRYEebOEWUvpCxrfzlL+/3q26+Pb355eiGNIAjOb3/P39wPrDU5
bRD/Y2U8aSeN8HC0TcnTKyxlpsyJH2B7qiyJvIbbH3r1zzpYojjxr9TApQKB
vGYB1ic0ctem4IKQ8XtqDM6iPfo0SuHEmeKRphqYbajr74uDLzsHW+d1jmYf
b7PI3ANY+z196LILq6oVHpJ1WJZ9PJ8hh8VBdoefFfDHnsQ9lQEbLK2j6Vbw
S0xPnvLbwey7pdE59husHlJGmS7gLrEhVzYNe9mKZg1cOEel7fKLgieqOBWp
EbD/FRVJBsAhZLdayIC5/OXbIx3T7Caa+xZxAO8oGqaCNXCyD6+0Qwlnvp5T
cWNwkfTLZVEEkzyh6SYPfqF2rhnZcJWwTy5KgVfc3lsGeLBxP0usjoUbwtkc
Viis0rc584Ngi9FnYz0bjk9Lv5r1hlvoq6ozV1iz5imjM2HbMklzmA28FBN+
2moF/wBS6MHT
        "]], 
       LineBox[{{-3.993622448979592, 1.}, {-3.942376724413551, 
        1.}, {-3.8890896228319227`, 1.}, {-3.6798388288651043`, 
        1.}, {-3.470588034898286, 1.}, {-3.275438934923815, 
        1.}, {-3.080289834949345, 1.}, {-3.053832378589335, 
        1.}, {-3.0273749222293245`, 1.}, {-3.014146194049319, 
        1.}, {-3.006377551020408, 1.}}], LineBox[CompressedData["
1:eJxFx2kogwEAxvHX9WI1x0RLuYZijqHV5CqZq0iZK0cyOUJ8kDMrhCQf1Bpy
FPm0WW00REtkCEWWHBmN5pUj9CYiCaX3eerf089P2pBdYU0QhOC3v5/sHpG8
0PZrxP+KyYLCHQqma+t648/g/sNO7dwe7C1SnAeuwroJJTmmhc1VxuJuBSz6
9neUlMIUf7vslSYZdwydD1bfwJy35yXTCZywznXa1MOK/JoVRR8s7mG7iTzh
6QuJoS3RjnGUJerzSAgb7l0jIoJg6v1gnHKC+ZyMRonJlvF8ipgX1gIbNMJO
s9qGce6i22LsFEzp6YdhOeywq83PbIczLaGClVT4mBt4Kb+2Znzb5R6XyoVZ
Ms2znAWHt6bPmL+sGDfXy1jtVzBZdHOqVsEBwoUmTjycJsgKLhXAdfw706wf
rPP1EieTcBK7l9N6QDCudPDZMqzDAzbLba462PjxaFaNwlIqR3NRBvddPUn5
ObDK1O/RkgLvn/B2N6Jh2qiXuYTAHvt5kSVecMzOi0XpDJfLqtXObPgHozOy
Rg==
        "]], 
       LineBox[{{-1.9936224489795917`, 1.}, {-1.967510421197865, 
        1.}, {-1.9407518577236968`, 1.}, {-1.8872347307753605`, 
        1.}, {-1.8337176038270244`, 1.}, {-1.6235467083933746`, 
        1.}, {-1.4133758129597247`, 1.}, {-1.2173066115184228`, 
        1.}, {-1.0212374100771209`, 1.}, {-1.0145942928162799`, 
        1.}, {-1.007951175555439, 1.}, {-1.0063775510204083`, 1.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGDQB2IQXcwV53fw9Pv9DFCw6sasj/fnIvh1O/UCS9IRfNXq
MIG5v97B+T+iX+UbHkHwz9jUnT/ai+CX/Fva904BwT/U+JXHwf0tnD8tqTPn
igCCn+kseybj1hs4X4DVtXtiLoIf3zGF8/Hk13D+nz5jtrYHL+H8C/nHU6VW
IfiLA6KPritG8L2EmluusyH4M6deYtLUfQHnm80p/H+68hmcX7By/Q9B4cdw
vgFfXrPTg0dw/sciHb7itQh+kc1K5SvuCH7p+UV+02oewvmfX2l7mp65D+ez
Nf9Y4FZ0E85v9yndtpwHwecQ+3SaY/kNOJ9r5etvp25fh/P5z9/z8Xe9BudL
SB/9ES5xGc4PS1NeeKnmJJzfVVjcMWnrCTh/b83h/KB3x+F8lcnJdpfij8H5
n/Yvvn3R6TCcL2fsobNIcBec3+r54pdi8w44/018x8mFX7bB+bt6TqQtvL4Z
zl97ZqKTo/VqOL/658X7DnIr4HxPNaFaB8alcP7p/yr59X1z4fyMyKUr60Km
w/ksm1Wf1EpNhPMdJH1sfx1ohfM7jv26ECFfBecDAP4Y19U=
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQ3XHs14UI+Sp7BjD4YH9PcuM7bv4eOD/Y+MaeNscp
cD7vgdfKR6IWwPmFadkvj0xZBufPiTS1Sm7ZCOczMGz9n7xvO5yfohZ11Ejy
EJx//MzNLuPgE3B+zoLyqbJrbsL5VroHNwVMfwznv5kj/UVv3zM4fz5PmSnv
05dwfoWLclhNxWs4P6jmQtlr7rdwvp2EOvviqwi+9pba6VHz38H5Skwr481Y
3sP5EgFX1IUyEXzh7y+5G2Yj+MVccX4HTyP4AOa8aVs=
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQffzXhQh5qQ/2DFAQlbDq0g4TBH+Tl/1JngAEP0k+
c9uWNgT/0Ik9E1i+IPjN0imuS859hPNZDm5a97j5M5zPzhPQmPTuG5wfoR51
wIzzO5y/yinlP5cKgu9XWVG7ORLBn/ZsQSXLUQRf7eDHwmWzf8D5rmWTk155
/EKonzh34b5kBP/FmuUPJtUh+D2Pd8dZb0HwrwQ8ieqR/w3np2ibBut9Q/Cb
H1xzLlr8F86/t9M7t2IPgm81+cC0uqsI/gfXVS+72P/B+XGra/sXZyP4u1o+
7VjZguCLxqU/Wj8XwT8jEGi65zyCb1WmcvuK8X+E//xnstz2QfA/avDpPUxF
8Ffc/t7wdjqCz7I1Z9XnDQh+fN/Dyz9PIvi70sP+/n+E4Fuy6i9/8BTBBwBu
O5w1
        "]], 
       LineBox[{{2.006377551020408, 1.}, {2.0173574803892027`, 1.}, {
        2.023466872497381, 1.}, {2.0356856567137376`, 1.}, {
        2.0479044409300937`, 1.}, {2.145654714660944, 1.}, {2.243404988391795,
         1.}, {2.455416086759108, 1.}, {2.6674271851264204`, 1.}, {
        2.7663818873139023`, 1.}, {2.8653365895013847`, 1.}, {
        2.914813940595126, 1.}, {2.964291291688867, 1.}, {2.9766606294623026`,
         1.}, {2.9890299672357377`, 1.}, {2.993622448979592, 1.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQnVybsYafl8OBAQoSNn7ebSSD4Dd0aHjc1UDwF8TH
Xmk3RfDv8x5/c8cPwY/LmiXb3ojg/77Jee5jL4I/w7OyLmYWgn9RI+K+4WYE
3+W56MI7TxB8zZSJKkYenHD+l9gO7bt8XHB+Z2CZpfEcbjh/0hmtnDUrEfw5
7vfnqW5H8DfYerBIXELwb2hKnf/DzgPnazDtSzlWjOAf28Q6IdKbF86/oLvr
0KUIBP/Wiryv3mkI/rt516PsGhF8se6VqsrbEfzUZN/db5T44HwWkanP6n8h
+ELv6viE2PnhfMUTGWZLhBF8uxqbthM6CH7lk8eqgvEIfse+s76LsxH8aTO2
l5pWIPhbfLqPRk5E8N9tMUpddBjB/9sn02tyAcHnyWTbeuwOgi/l/OFOxEsE
f27T9OAPnxB8AAMPedc=
        "]], 
       LineBox[{{4.0063775510204085`, 1.}, {4.013491605166033, 1.}, {
        4.01962975044505, 1.}, {4.0441823315611165`, 1.}, {4.068734912677183, 
        1.}, {4.16694523714145, 1.}, {4.265155561605716, 1.}, {
        4.47808676143986, 1.}, {4.691017961274004, 1.}, {4.7904327141949015`, 
        1.}, {4.8898474671158, 1.}, {4.939554843576249, 1.}, {
        4.989262220036698, 1.}, {4.9936224489795915`, 1.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBWIQvcnO5Fo7m4gDAxRkFExMK+FD8FdMcja7KILgv9jy
lVVPGsHP/Bm59Lk6gr9KmqfURQ/Bf2W7z2WhCYKf1aT0JMoRwc/hfq10LgrB
f125i4U7EUn9i85n7ukIfvpRjVUHixH8pPo0w609CH7k54f2c/Yh+G63b8Rk
KYnC+fKrj01je4Xgh8zfsfPUBwS/a/KqO33fEfwv1X1K4qxicP4pn7B16goI
ftm7p0c9whD8s4asX7sOIfhMat/F/U8i+BZSL62ELyD4i5jONsy+i+BXXJ7C
s+YHgq9SqqJyVk8czo/KFHOfaIrg98dyZIXaIPi/XN+sv+uJ4F8Q22L9LgXB
r97hHMw/G8E3irnwIX4hgv/qf0zfhuVI9rmXnQzcguALvWZKX7QLwT/V18/y
+QCCb3Vthf2Uswj+p0rTu08uI/irZA9Vmd5C8JMO+km0PUDwJVNvb732DMn9
HBnB6m8R/I41Xz6Uf0bw/Q6e1qz4ieADAJ12mak=
        "]], 
       LineBox[{{6.0063775510204085`, 1.}, {6.049431211493746, 1.}, {
        6.098766399092588, 1.}, {6.19743677429027, 1.}, {6.296107149487952, 
        1.}, {6.509958450788927, 1.}, {6.7238097520899025`, 1.}, {
        6.828786596560542, 1.}, {6.933763441031182, 1.}, {6.9600076521488425`,
         1.}, {6.986251863266502, 1.}, {6.992812916045917, 1.}, {
        6.9936224489795915`, 1.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAmIQvcnO5Fo7m4wDAxQcso4+epoHwc/fqL6tWRjBl1H/
ssxaCsEvE+rtWK2O4Ct3RFYm6yH4F/6qZkmbIvhaL/d5dzsh+Pf2f+DLjkXw
XXNDpmpNRvBLJu1myJ+J4C/ZrpSzeT6Cz8T00clmDYJ/YFrvB9+jCL7VgWPe
hd8RfD1hS6Yd0bJwvsRO2XxXFTk4/1/ycmlBbQT/CZ/hiTuGCP6GFBfFEnsE
310g+/KiKAS/LH2HOcNEBP+qaDDD7r8I/q4Dd9a0scjD+Quy0yKDuBH8nIOV
m15KIPgsuQtSJEwQfJMjb0+UZiH4UvnlpY6FCD6DFKMSbwWCfyZfpHpJK4Kf
LG2te3kBgu9x7MjNecsRfL1Cv7asdQj+r2OJ9xn3IPiTijomGlxHkj+zZkfH
XQQ/Sf3i/QePEfxTjV/ZLF8h+MZ3JPUmfkDw55jZhb78huD7HTytWfETwQcA
lS6G6A==
        "]], 
       LineBox[{{8.006377551020408, 1.}, {8.034494031027739, 1.}, {
        8.059276637510514, 1.}, {8.108841850476063, 1.}, {8.158407063441611, 
        1.}, {8.257537489372709, 1.}, {8.356667915303806, 1.}, {
        8.551031154806306, 1.}, {8.745394394308807, 1.}, {8.850831289512863, 
        1.}, {8.956268184716919, 1.}, {8.969447796617427, 1.}, {
        8.982627408517933, 1.}, {8.989217214468187, 1.}, {8.993622448979592, 
        1.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQHSkv9dqZWcmBAQrKLoU/ncmC4C950bnoJzuCf/nf
7vhIbgTfQFvhloQQgv+6+cW56fIIvtQsqZ7vSgi+xwYfz3A1BH/ZnQ2HxXQR
/ATTyh1TrRD8a884F00ORfCPhXTO2RmB4G87xDH9fjSCP20ee492EoIfGsZa
djgPwb9ylMHrczuCf2nJ949BuxD8c0lPHYXkleH8hyzLf0xVQvC/LMtYL6mG
4Eu+fi2jqIvgpxR/+q5vjeD/av6/1jccwVdbKinV2Y/gW7rfvsAzGcH3eTmn
fcI0BL9QV+Hr9LkI/p6taheWrUbwg44Ztx05juCnZny18TiN4Fdwbf98+hyC
P9fPKvHyVQT/xTUHm0ePkdxbwfQ59TmCzyt9ZOXLVwi+Uby7+MePCL4rI+e5
kq8IfsTiUy0/fiD4Wa491jV/EPza576f/v9H8AHuvo3E
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$2541#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612266552081013`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"54965546-c2a8-46fb-bdba-d6e40b102e0e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761226665986528*^9, 3.7612267568886013`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"0e5aeb9d-1b10-401a-97fe-44addfa4d977"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], 
       LineBox[{{-9.999999591836735, 0.}, {-9.993865641588808, 
        0.}, {-9.98773169134088, 0.}, {-9.975463790845026, 
        0.}, {-9.950927989853316, 0.}, {-9.901856387869898, 
        0.}, {-9.803713183903064, 0.}, {-9.607426775969392, 
        0.}, {-9.181832858290827, 0.}, {-9.00637755102041, 0.}}], 
       LineBox[{{-8.993622448979593, 0.}, {-8.394847023622479, 
        0.}, {-8.006377551020408, 0.}}], 
       LineBox[{{-7.9936224489795915`, 0.}, {-7.577817598035772, 
        0.}, {-7.150383477423544, 0.}, {-7.0063775510204085`, 0.}}], 
       LineBox[{{-6.9936224489795915`, 0.}, {-6.339309073622564, 
        0.}, {-6.006377551020416, 0.}}], 
       LineBox[{{-5.993622448979599, 0.}, {-5.518599242168532, 
        0.}, {-5.130141245153254, 0.}, {-5.0063775510204085`, 0.}}], 
       LineBox[{{-4.9936224489795915`, 0.}, {-4.31538643548495, 
        0.}, {-4.006377551020409, 0.}}], 
       LineBox[{{-3.993622448979593, 0.}, {-3.470588034898286, 
        0.}, {-3.080289834949345, 0.}, {-3.006377551020415, 0.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQvbZpevCHT+wHGKDgyCtBAwMNVjj/2ffzs5/xIfha
Qj7FwXdY4PxNbi5KuuUI/pH1Jg0P1jDD+aHbhLdZL0Dwn+359HraZASf49SG
cN8qBN/3iY7+LncE/5qE6r3Jj5jg/OeNojbuEgg+V+3695O5EHy9Cs/FD/4w
wvllebVcVQ8RfLbopzfWrELwVUy2lgrZIvge+v6a8foIfo7WyzurFRH8LQqy
Lq5sCL4zb6tQxXkGOD/pWcj6u4kIftvDd0laIQj+qjsdYuVuCP6nS3tqBbQR
fLFzYYaxsgi+1ckPT1byI/jJtRlr+HkRfACr62ZF
        "]], LineBox[CompressedData["
1:eJwB8QIO/SFib1JlAgAAAC4AAAACAAAAOQUvp+Dl/7+AdXZJrxSaP0p1ff8f
zf+/wJXduMdbqT+Ra7FmubH/v4AGwTq3ebM/IFgZNex6/79AR6eT4n/APz8x
6dFRDf+/APEG4L7izT+GJx056/H+v/j733gQmtA/zh1RoITW/r946w8bSkHS
P14KuW63n/6/qA5qK1eL1T9844gLHTL+vyBmB3zYDdw/upUoRehW/b9gLHPu
O2bkPwhb52MBPP2/2N/X1jMr5T9WIKaCGiH9v3jhvdF27+U/8qojwEzr/L88
zw3/3XXnPynAHjuxf/y/yFS9NzF66j+Y6hQxeqj7v+qDrZB1MPA/dT8BHQz6
+b/8hshqVtP1P8IEwDsl3/m/ZsMPh4Mq9j8Qyn5aPsT5v+KmlyxWgfY/rFT8
l3CO+b8YY2kT7C33P+Rp9xLVIvm/hLAUUNqC+D9SlO0Inkv4v2KfioXAG/s/
MOnZ9C+d9r+M5nnw2QQAQHTwLSkXhPa/+lY86D4oAEC494Fd/mr2v9rgW4J8
SwBAQQYqxsw49r/uQLKdgZEAQFIjepdp1PW/cjK8cLMbAUB1XRo6owv1v+Da
RIi1KAJAutFafxZ6879cQSl9MyUEQP7YrrP9YPO/DuCOwKxDBEBC4ALo5Efz
vzSYUab+YQRAy+6qULMV87/SVO5YLJ4EQNwL+yFQsfK/av+EWq8UBUD/RZvE
iejxvwAaJ89T+gVARE3v+HDP8b/UT144VxYGQIhUQy1YtvG/HJ/yQzMyBkAQ
Y+uVJoTxvwCKMkJ1aQZAIoA7Z8Mf8b8ikQ/bINYGQGaHj5uqBvG/iJIvV+nw
BkCqjuPPke3wv2CtrHWKCwdAM52LOGC78L9mL76ZVkAHQHik32xHovC/lJZS
n4FaB0C8qzOhLonwvzUXREeFdAdARLrbCf1W8L/OZD5+FqgHQK6qpTnHO/C/
CG3dGsnDB0AYm29pkSDwv9PAKHFN3wdAx/rQWB8a8L+W/B9Uy+UHQKgxfA8=

        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQB2IQXcwV53fw9Pv9DFCw6sasj/fnIvh1O/UCS9IRfNXq
MIG5v97B+T+iX+UbHkHwz9jUnT/ai+CX/Fva904BwT/U+JXHwf0tnD8tqTPn
igCCn+kseybj1hs4X4DVtXtiLoIf3zGF8/Hk13D+nz5jtrYHL+H8C/nHU6VW
IfiLA6KPritG8L2EmluusyH4M6deYtLUfQHnm80p/H+68hmcX7By/Q9B4cdw
vgFfXrPTg0dw/sciHb7itQh+kc1K5SvuCH7p+UV+02oewvmfX2l7mp65D+ez
Nf9Y4FZ0E85v9yndtpwHwecQ+3SaY/kNOJ9r5etvp25fh/P5z9/z8Xe9BudL
SB/9ES5xGc4PS1NeeKnmJJzfVVjcMWnrCTh/b83h/KB3x+F8lcnJdpfij8H5
n/Yvvn3R6TCcL2fsobNIcBec3+r54pdi8w44/018x8mFX7bB+bt6TqQtvL4Z
zl97ZqKTo/VqOL/658X7DnIr4HxPNaFaB8alcP7p/yr59X1z4fyMyKUr60Km
w/ksm1Wf1EpNhPMdJH1sfx1ohfM7jv26ECFfBecDAP4Y19U=
        "]], LineBox[CompressedData["
1:eJwVjX0wFHgcxrdQ+/7rXWrqClHR1RJpk++30zWukytuhF6R4nTyEtGqTLPe
SqmjDXHZ3HTJy57XYtzKuyIvWYpFaoXdZRfjpRcvt/fHM898Zp5nPhs9Ljh6
LaRQKIc0+b9jar+2uHx3GU5Mj2Yr5gn26uWpGCQOjpreEaRp2Mn8XVnUvkQo
9FrVaabh4s6j16N5KSDQuuAsnCPIeqE0qHZLhzmdFLZ8liAkZEVVX8qA4fP3
F9A1HHDWV16d+BhOW53brj1D8NFuE/uavExw9aYlvf1KUMJU5tY0ZcO7mSt7
+F8ILup7urRWKYKeyWo9+meCqa4WXE9+Hng79Zr5TBG0sL3nK1tWAGErX0UJ
Jwg2mU6megoLgVjHrCwYJ0ihFM17ip9BYzFP5q4imCxfwem3L4EJep7+vJKg
WdtFjzPSUhBWPU8NlhM883hnzZnP/8ItD9inkhGcjU+c6o8qh0Y7se9oH8EG
668J+TdewJ0E0trQo9kbudWY6VXCU+ct9uy3BHespfcG9lUCpXnMPbhN8yel
U/l/V4E0Ky6/qJmg4IveZnPLGjBI2K1dWUewrrHzhrlTPXzW9fehFRP0Du2q
O2byErZtOa3b8g9BqqFUm6/1Co7IfzX0ySJ4kNd9VVLQAL+F2B9blk6wccv7
wOAVzdBVFbR3XzTB8+3vRWnDzXDbPlaWEkEwCv2nPDxagMPPGKoNI2g87G9+
k9sKdpQBIvDV+GwDc6SKN1BskvFmySGCVsnjDWrnNpCb9PrP7tf41YEKrao2
YErX+ZVZE8xMCTI2fSCBjQeyIvNMCCrGLgrDf+6Am7/MbQ5drPGnX7q3LrsT
jm+PxEvFbLSemi7grO6CW+sZzbFZbGTah775kd8ForJ7ZX7pbMyZDiV+x6VQ
oVNSKIplo8rhcqyY2QNGDbv02G5sfH5VLBZZ9oFCf1WB9TgL0zPnXpec74M1
CwY5wf0sjJHY9FQ96gPu7TIS0cFCl63l396yP8DBouAhZikLv7SXW1EGP8AT
yw1srWss5G6ryD98Xwbui5y3ulNYaCHpEIhfyqCp6EZAzygTd/CGL5vOyOCw
k8MM5wMTjV7q2lLd++Guy/VuzwomLvfyayvf+glocWl1imtMHE5dO/G9eABa
BOl2kZMMHLTlvEsdHYBI4+r6SBkDPyoOlNENBsHhcUjcyVYGdloF8geiB2G9
X0xvUjYDayX1K/48MgRFRqdydrgz8CEzxIL1SQ6lezonhyvpmFJwU4+nq4Bn
OcrcgFw6CtyEs0M/KaCedSurKZmOcU8aa6pzFbA5KfzCUn86hu43cA4PVcL7
drZ+6Ro6BimtuIqnSoh4njRN0aGj3x8O6116lGARm7dkg5qGXn1hA+Y/DEP3
RDxrsJKGjuEtIUrGCOhPznOSvGl4yGDAzdVmBM7aLTAUHqGh3atvNnX+I/Ai
9q7rdS4NbVYbL85oHwFRx8n41wwa7i63Vi6hquDAxwfxuyaouPOsY/NVrgrG
pOfawrqpaFJ45b7bQxXwk7M3RWdT0ehYAq++VQW/n9i00zGRivoLM09ZaqvB
h2yLmuRRcV2m2PYvSzXwRFVrAzypuPqwxHiZjxqEe+UT1QepuHxazoh4oAZp
SdrSMQ4Vg+gnHSoa1GA4XqFDX0PF/wDfFkSh
        "]], 
       LineBox[{{1.0063775510204083`, 0.}, {1.012871573364484, 0.}, {
        1.0195434437961635`, 0.}, {1.0328871846595225`, 0.}, {
        1.0595746663862404`, 0.}, {1.1129496298396766`, 0.}, {
        1.2196995567465487`, 0.}, {1.4331994105602932`, 0.}, {
        1.8524038934683922`, 0.}, {1.9936224489795917`, 0.}}], 
       LineBox[{{2.006377551020408, 0.}, {2.6674271851264204`, 0.}, {
        2.993622448979592, 0.}}], 
       LineBox[{{3.006377551020408, 0.}, {3.451269577906889, 0.}, {
        3.8723142637486507`, 0.}, {3.993622448979592, 0.}}], 
       LineBox[{{4.0063775510204085`, 0.}, {4.691017961274004, 0.}, {
        4.993622448979592, 0.}}], 
       LineBox[{{5.006377551020409, 0.}, {5.478540759921798, 0.}, {
        5.901425648697223, 0.}, {5.993622448979595, 0.}}], 
       LineBox[{{6.006377551020412, 0.}, {6.7238097520899025`, 0.}, {
        6.9936224489795915`, 0.}}], 
       LineBox[{{7.0063775510204085`, 0.}, {7.535421119870328, 0.}, {
        7.960146211579415, 0.}, {7.9936224489795915`, 0.}}], 
       LineBox[{{8.006377551020408, 0.}, {8.745394394308807, 0.}, {
        8.993622448979592, 0.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQHSkv9dqZWcmBAQrOJT11FJJXhvMfsiz/MVUJwf+y
LGO9pBqCL/n6tYyiLoKfUvzpu741gv+r+f9a33AEX22ppFRnP4Jv6X77As9k
BN/n5Zz2CdMQ/EJdha/T5yL4e7aqXVi2GsEPOmbcduQ4gp+a8dXG4zSCX8G1
/fPpcwj+XD+rxMtXEfwX1xxsHj1Gcm8F0+fU5wg+r/SRlS9fIfhG8e7iHz8i
+K6MnOdKviL4EYtPtfz4geBnufZY1/xB8Guf+376/x/BBwD9w1do
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$2588#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 3.999959326842982}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.76122675822664*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"927b8f32-78ca-4ec3-b02d-02ed9faf2cf7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], "=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X2t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612267829967933`*^9, 3.7612268105611653`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"f4c488f7-1128-4f7a-9127-f2318e867c02"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], 
       LineBox[{{-9.999999591836735, 0.}, {-9.993865641588808, 
        0.}, {-9.98773169134088, 0.}, {-9.975463790845026, 
        0.}, {-9.950927989853316, 0.}, {-9.901856387869898, 
        0.}, {-9.803713183903064, 0.}, {-9.607426775969392, 
        0.}, {-9.181832858290827, 0.}, {-9.00637755102041, 0.}}], 
       LineBox[{{-8.993622448979593, 0.}, {-8.394847023622479, 
        0.}, {-8.006377551020408, 0.}}], 
       LineBox[{{-7.9936224489795915`, 0.}, {-7.577817598035772, 
        0.}, {-7.150383477423544, 0.}, {-7.0063775510204085`, 0.}}], 
       LineBox[{{-6.9936224489795915`, 0.}, {-6.339309073622564, 
        0.}, {-6.006377551020416, 0.}}], 
       LineBox[{{-5.993622448979599, 0.}, {-5.518599242168532, 
        0.}, {-5.130141245153254, 0.}, {-5.0063775510204085`, 0.}}], 
       LineBox[{{-4.9936224489795915`, 0.}, {-4.31538643548495, 
        0.}, {-4.006377551020409, 0.}}], 
       LineBox[{{-3.993622448979593, 0.}, {-3.470588034898286, 
        0.}, {-3.080289834949345, 0.}, {-3.006377551020415, 0.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQvbZpevCHT+wHGKDgyCtBAwMNVjj/2ffzs5/xIfha
Qj7FwXdY4PxNbi5KuuUI/pH1Jg0P1jDD+aHbhLdZL0Dwn+359HraZASf49SG
cN8qBN/3iY7+LncE/5qE6r3Jj5jg/OeNojbuEgg+V+3695O5EHy9Cs/FD/4w
wvllebVcVQ8RfLbopzfWrELwVUy2lgrZIvge+v6a8foIfo7WyzurFRH8LQqy
Lq5sCL4zb6tQxXkGOD/pWcj6u4kIftvDd0laIQj+qjsdYuVuCP6nS3tqBbQR
fLFzYYaxsgi+1ckPT1byI/jJtRlr+HkRfACr62ZF
        "]], LineBox[CompressedData["
1:eJwB8QIO/SFib1JlAgAAAC4AAAACAAAAOQUvp+Dl/7+AdXZJrxSaP0p1ff8f
zf+/wJXduMdbqT+Ra7FmubH/v4AGwTq3ebM/IFgZNex6/79AR6eT4n/APz8x
6dFRDf+/APEG4L7izT+GJx056/H+v/j733gQmtA/zh1RoITW/r946w8bSkHS
P14KuW63n/6/qA5qK1eL1T9844gLHTL+vyBmB3zYDdw/upUoRehW/b9gLHPu
O2bkPwhb52MBPP2/2N/X1jMr5T9WIKaCGiH9v3jhvdF27+U/8qojwEzr/L88
zw3/3XXnPynAHjuxf/y/yFS9NzF66j+Y6hQxeqj7v+qDrZB1MPA/dT8BHQz6
+b/8hshqVtP1P8IEwDsl3/m/ZsMPh4Mq9j8Qyn5aPsT5v+KmlyxWgfY/rFT8
l3CO+b8YY2kT7C33P+Rp9xLVIvm/hLAUUNqC+D9SlO0Inkv4v2KfioXAG/s/
MOnZ9C+d9r+M5nnw2QQAQHTwLSkXhPa/+lY86D4oAEC494Fd/mr2v9rgW4J8
SwBAQQYqxsw49r/uQLKdgZEAQFIjepdp1PW/cjK8cLMbAUB1XRo6owv1v+Da
RIi1KAJAutFafxZ6879cQSl9MyUEQP7YrrP9YPO/DuCOwKxDBEBC4ALo5Efz
vzSYUab+YQRAy+6qULMV87/SVO5YLJ4EQNwL+yFQsfK/av+EWq8UBUD/RZvE
iejxvwAaJ89T+gVARE3v+HDP8b/UT144VxYGQIhUQy1YtvG/HJ/yQzMyBkAQ
Y+uVJoTxvwCKMkJ1aQZAIoA7Z8Mf8b8ikQ/bINYGQGaHj5uqBvG/iJIvV+nw
BkCqjuPPke3wv2CtrHWKCwdAM52LOGC78L9mL76ZVkAHQHik32xHovC/lJZS
n4FaB0C8qzOhLonwvzUXREeFdAdARLrbCf1W8L/OZD5+FqgHQK6qpTnHO/C/
CG3dGsnDB0AYm29pkSDwv9PAKHFN3wdAx/rQWB8a8L+W/B9Uy+UHQKgxfA8=

        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQB2IQXcwV53fw9Pv9DFCw6sasj/fnIvh1O/UCS9IRfNXq
MIG5v97B+T+iX+UbHkHwz9jUnT/ai+CX/Fva904BwT/U+JXHwf0tnD8tqTPn
igCCn+kseybj1hs4X4DVtXtiLoIf3zGF8/Hk13D+nz5jtrYHL+H8C/nHU6VW
IfiLA6KPritG8L2EmluusyH4M6deYtLUfQHnm80p/H+68hmcX7By/Q9B4cdw
vgFfXrPTg0dw/sciHb7itQh+kc1K5SvuCH7p+UV+02oewvmfX2l7mp65D+ez
Nf9Y4FZ0E85v9yndtpwHwecQ+3SaY/kNOJ9r5etvp25fh/P5z9/z8Xe9BudL
SB/9ES5xGc4PS1NeeKnmJJzfVVjcMWnrCTh/b83h/KB3x+F8lcnJdpfij8H5
n/Yvvn3R6TCcL2fsobNIcBec3+r54pdi8w44/018x8mFX7bB+bt6TqQtvL4Z
zl97ZqKTo/VqOL/658X7DnIr4HxPNaFaB8alcP7p/yr59X1z4fyMyKUr60Km
w/ksm1Wf1EpNhPMdJH1sfx1ohfM7jv26ECFfBecDAP4Y19U=
        "]], LineBox[CompressedData["
1:eJwVjX0wFHgcxrdQ+/7rXWrqClHR1RJpk++30zWukytuhF6R4nTyEtGqTLPe
SqmjDXHZ3HTJy57XYtzKuyIvWYpFaoXdZRfjpRcvt/fHM898Zp5nPhs9Ljh6
LaRQKIc0+b9jar+2uHx3GU5Mj2Yr5gn26uWpGCQOjpreEaRp2Mn8XVnUvkQo
9FrVaabh4s6j16N5KSDQuuAsnCPIeqE0qHZLhzmdFLZ8liAkZEVVX8qA4fP3
F9A1HHDWV16d+BhOW53brj1D8NFuE/uavExw9aYlvf1KUMJU5tY0ZcO7mSt7
+F8ILup7urRWKYKeyWo9+meCqa4WXE9+Hng79Zr5TBG0sL3nK1tWAGErX0UJ
Jwg2mU6megoLgVjHrCwYJ0ihFM17ip9BYzFP5q4imCxfwem3L4EJep7+vJKg
WdtFjzPSUhBWPU8NlhM883hnzZnP/8ItD9inkhGcjU+c6o8qh0Y7se9oH8EG
668J+TdewJ0E0trQo9kbudWY6VXCU+ct9uy3BHespfcG9lUCpXnMPbhN8yel
U/l/V4E0Ky6/qJmg4IveZnPLGjBI2K1dWUewrrHzhrlTPXzW9fehFRP0Du2q
O2byErZtOa3b8g9BqqFUm6/1Co7IfzX0ySJ4kNd9VVLQAL+F2B9blk6wccv7
wOAVzdBVFbR3XzTB8+3vRWnDzXDbPlaWEkEwCv2nPDxagMPPGKoNI2g87G9+
k9sKdpQBIvDV+GwDc6SKN1BskvFmySGCVsnjDWrnNpCb9PrP7tf41YEKrao2
YErX+ZVZE8xMCTI2fSCBjQeyIvNMCCrGLgrDf+6Am7/MbQ5drPGnX7q3LrsT
jm+PxEvFbLSemi7grO6CW+sZzbFZbGTah775kd8ForJ7ZX7pbMyZDiV+x6VQ
oVNSKIplo8rhcqyY2QNGDbv02G5sfH5VLBZZ9oFCf1WB9TgL0zPnXpec74M1
CwY5wf0sjJHY9FQ96gPu7TIS0cFCl63l396yP8DBouAhZikLv7SXW1EGP8AT
yw1srWss5G6ryD98Xwbui5y3ulNYaCHpEIhfyqCp6EZAzygTd/CGL5vOyOCw
k8MM5wMTjV7q2lLd++Guy/VuzwomLvfyayvf+glocWl1imtMHE5dO/G9eABa
BOl2kZMMHLTlvEsdHYBI4+r6SBkDPyoOlNENBsHhcUjcyVYGdloF8geiB2G9
X0xvUjYDayX1K/48MgRFRqdydrgz8CEzxIL1SQ6lezonhyvpmFJwU4+nq4Bn
OcrcgFw6CtyEs0M/KaCedSurKZmOcU8aa6pzFbA5KfzCUn86hu43cA4PVcL7
drZ+6Ro6BimtuIqnSoh4njRN0aGj3x8O6116lGARm7dkg5qGXn1hA+Y/DEP3
RDxrsJKGjuEtIUrGCOhPznOSvGl4yGDAzdVmBM7aLTAUHqGh3atvNnX+I/Ai
9q7rdS4NbVYbL85oHwFRx8n41wwa7i63Vi6hquDAxwfxuyaouPOsY/NVrgrG
pOfawrqpaFJ45b7bQxXwk7M3RWdT0ehYAq++VQW/n9i00zGRivoLM09ZaqvB
h2yLmuRRcV2m2PYvSzXwRFVrAzypuPqwxHiZjxqEe+UT1QepuHxazoh4oAZp
SdrSMQ4Vg+gnHSoa1GA4XqFDX0PF/wDfFkSh
        "]], 
       LineBox[{{1.0063775510204083`, 0.}, {1.012871573364484, 0.}, {
        1.0195434437961635`, 0.}, {1.0328871846595225`, 0.}, {
        1.0595746663862404`, 0.}, {1.1129496298396766`, 0.}, {
        1.2196995567465487`, 0.}, {1.4331994105602932`, 0.}, {
        1.8524038934683922`, 0.}, {1.9936224489795917`, 0.}}], 
       LineBox[{{2.006377551020408, 0.}, {2.6674271851264204`, 0.}, {
        2.993622448979592, 0.}}], 
       LineBox[{{3.006377551020408, 0.}, {3.451269577906889, 0.}, {
        3.8723142637486507`, 0.}, {3.993622448979592, 0.}}], 
       LineBox[{{4.0063775510204085`, 0.}, {4.691017961274004, 0.}, {
        4.993622448979592, 0.}}], 
       LineBox[{{5.006377551020409, 0.}, {5.478540759921798, 0.}, {
        5.901425648697223, 0.}, {5.993622448979595, 0.}}], 
       LineBox[{{6.006377551020412, 0.}, {6.7238097520899025`, 0.}, {
        6.9936224489795915`, 0.}}], 
       LineBox[{{7.0063775510204085`, 0.}, {7.535421119870328, 0.}, {
        7.960146211579415, 0.}, {7.9936224489795915`, 0.}}], 
       LineBox[{{8.006377551020408, 0.}, {8.745394394308807, 0.}, {
        8.993622448979592, 0.}}], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQHSkv9dqZWcmBAQrOJT11FJJXhvMfsiz/MVUJwf+y
LGO9pBqCL/n6tYyiLoKfUvzpu741gv+r+f9a33AEX22ppFRnP4Jv6X77As9k
BN/n5Zz2CdMQ/EJdha/T5yL4e7aqXVi2GsEPOmbcduQ4gp+a8dXG4zSCX8G1
/fPpcwj+XD+rxMtXEfwX1xxsHj1Gcm8F0+fU5wg+r/SRlS9fIfhG8e7iHz8i
+K6MnOdKviL4EYtPtfz4geBnufZY1/xB8Guf+376/x/BBwD9w1do
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3017#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 3.999959326842982}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761226811959113*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"6de6a4cf-430b-437c-841f-30ad4702c52c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", "0"}], " ", ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "t"}], "/", "2"}], ")"}]}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612268844237857`*^9, 3.7612268946523705`*^9}, {
  3.761226938100401*^9, 3.7612270792912683`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"fbe71148-ca0f-4124-845e-b44e68d6216d"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], 
       LineBox[{{-0.9936224489795918, 1.}, {-0.9813787065120747, 
        1.}, {-0.9680924719903926, 1.}, {-0.9415200029470285, 
        1.}, {-0.9149475339036643, 1.}, {-0.8618025958169361, 
        1.}, {-0.8086576577302078, 1.}, {-0.7023677815567513, 
        1.}, {-0.5960779053832947, 1.}, {-0.39759984702872975`, 
        1.}, {-0.1991217886741647, 1.}, {-0.10183156567672966`, 
        1.}, {-0.0045413426792946104`, 1.}, {-0.00028489542315682714`, 1.}}]},
      Annotation[#, 
       "Charting`Private`Tag$3113#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761227081700873*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"418485ae-04e0-4893-a48d-095ecc733456"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", "0"}], " ", ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612272202269764`*^9, 3.7612272350640783`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"486bb602-e364-446e-93d3-27fb64eec4bf"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], LineBox[CompressedData["
1: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
dPRcz96B9wLhf3x37sY=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3329#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.7024751935637983}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761227237026847*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"4144b9a5-fdff-4c35-83ae-881ca3ff6f38"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612272905719576`*^9, 
  3.7612272919732656`*^9}},ExpressionUUID->"891a17bf-2ef5-4e23-a0cd-\
645739707b9b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<=", "0"}], " ", ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612273162719*^9, 3.761227339483739*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"25f1cd41-cf42-4833-8853-b6a4a06e048e"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], LineBox[CompressedData["
1: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
dPRcz96B9wLhf3x37sY=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3379#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.7024751935637983}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612273413068023`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"695731c8-7728-455f-a32d-590cc470bc4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<=", 
        RowBox[{"0", "  ", "and", " ", "t"}], ">", " ", 
        RowBox[{"-", "1"}]}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.761227381000759*^9, 3.761227420706174*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"af46916d-3bc3-40e5-94a4-3a99baa7d27b"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], LineBox[CompressedData["
1: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
dPRcz96B9wLhf3x37sY=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3428#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.7024751935637983}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612274051775236`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"0caea68f-109b-41ee-8702-d655652eb583"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"X3t", "[", 
  RowBox[{"-", "0.5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.761228405532405*^9, 3.7612284273431377`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"cbea2801-3929-4522-8a97-f94037b49529"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7612284295044785`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"a027660c-3488-47b8-90d0-5e60ede657a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"X3t", "[", 
  RowBox[{"-", "0.5"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612284478991466`*^9, 3.7612284847030573`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"0b4a9562-a517-4469-bd10-24f88d8ed099"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], LineBox[CompressedData["
1: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
dPRcz96B9wLhf3x37sY=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$3897#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.7024751935637983}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7612284624745426`*^9, 3.761228485920844*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"39b9207b-2221-4be1-8527-f997d01ca940"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.7612284624745426`*^9, 3.761228485927826*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"c90db7d9-426a-4424-880d-d66295b3ade7"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.761228434623581*^9, 
  3.761228435366267*^9}},ExpressionUUID->"ce44e183-64db-46b0-b3c8-\
6176f37e0ba7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{"Sinc", "^", 
        RowBox[{"2", "[", 
         RowBox[{"t", "/", "T"}], "]"}]}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612285707976303`*^9, 3.7612285830460696`*^9}, {
  3.7612286964547796`*^9, 3.7612287876410694`*^9}, {3.761228841030861*^9, 
  3.761228852222133*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"9fee4858-870a-487a-a71e-171170e39371"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7612288691263547`*^9, 3.7612288733981085`*^9}},
 CellLabel->"Out[34]=",ExpressionUUID->"5743b85c-8182-45f8-9ee9-5fa6cf0a42ff"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612287652317924`*^9, 
  3.761228772107894*^9}},ExpressionUUID->"d3aeb686-f882-4954-9176-\
543d2b150d80"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{"Sinc", "^", 
        RowBox[{"2", "[", 
         RowBox[{"t", "/", "T"}], "]"}]}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "1500"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612288922783203`*^9, 3.761228906165575*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"c2039ba1-605d-4740-bbf1-cf3e9dd87a63"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612289592994556`*^9, 3.7612289966004696`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"ac88a998-a8f1-4962-a907-c680990f5605"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"DiracDelta", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7612289439962626`*^9, 3.7612290325389643`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"a67c3aff-f8ee-455d-9dca-fe211ce18c6f"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcL7Lrtuc
f8M+wPkFK9f/EBR+DOeHpSkvvFRzEs7vOPbrQoR8FZwPABwHglQ=
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQ3XHs14UI+Sp7Biiw0j24KWD6YzifqUz0TorkBzif
nSegMendNzi/+cE156LFf+H8DbPbAuo+MTrA+PmLUgSehLHC+XFZs2TbGzng
/M7AMkvjOdxwPovI1Gf1v/jg/OunWz+08AvC+aHVSWazDgvB+Tncr5XORYnA
+fKrj01jeyUK51fvcA7mny0O5xcsy9lmpi8J5/MwmSfpPZWC811zQ6ZqTZaB
8yV2yua7qsjB+ZOKOiYaXJeH84Pa/HXnblOA87WiW0KX1CrC+deecS6aHKoE
559LeuooJK8M5z9kWf5jqhKC/2VZxnpJNQRf8vVrGUVdBD+l+NN3fWsE/1fz
/7W+4Qi+2lJJqc5+BN/S/fYFnskIvs/LOe0TpiH4hboKX6fPRfD3bFW7sGw1
gh90zLjtyHEEPzXjq43HaQS/gmv759PnEPy5flaJl68i+C+uOdg8eozk3gqm
z6nPEXxe6SMrX75C8I3i3cU/fkTwXRk5z5V8RfAjFp9q+fEDwc9y7bGu+YPg
1z73/fT/P4IPACGMn7U=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$161682#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612290376520195`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"005dc539-9544-4a71-a083-20da74c99712"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
    RowBox[{"Limit", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
       RowBox[{"(", 
        RowBox[{"Sinc", "^", 
         RowBox[{"2", "[", 
          RowBox[{"t", "/", "T"}], "]"}]}], ")"}]}], ",", 
      RowBox[{"T", "\[Rule]", " ", "1500"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7612291808336744`*^9, 
  3.761229184959355*^9}},ExpressionUUID->"26e64b01-6786-430c-a426-\
557079f2a77a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "^", 
    RowBox[{"2", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761229188266884*^9, 3.761229208136218*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"2b921d0c-67d2-471f-a809-416f028e0eca"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761229209530998*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"38d14246-e4a4-4195-b7f3-e7d6da8133e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "sin^2(x)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "SymbolicSolution", "Roots", 1, 1, "Input", 
        "Reduce[Sin[x]^2 == 0, x]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> "Input"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x]^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["sin", "2"], "(", "x", ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x]^2, {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3583$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3582$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1977810$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3582$\
1977815$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3583$1977816$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3583$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3582$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1977810$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3582$\
1977815$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3583$\
1977816$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977788[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, 
                    PlotRange -> {-0.01, 1.01}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3582$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3583$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1977788]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977788[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977788[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNkAafEACOhiTBpSkfO8tdhoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcpNfw9NCaoZzlshDk3UmuqNZMivQSPrtpTUzNLuXwgxLvu2rNe6lm\
YPz5Fb4PPCk4GPrVMM4Mo3qypyDPWKJrz0ixI/uTCZcJcPaTPt5+\
ubPzYmvLw2AsIzCGKqGftYXMMwWapj0EumLNWw7imz8+KI+fCs5j+\
r2gIqH6nvWOFRALIwVwzCf41ovN1G1MzIAgoMi50+\
TkOWx7gTaKiemYznJ842yyttsCg5pqz82dkpt1CvLhX8cHMnYxeY9L2p0dgWFhXDD6Tsvqn3M3wPPr\
tvBKHq8mDvN7w5E3MOyI6mU6n7Suk2ek6loX/Zyr85ovGw3y7ClT/\
y8dMG2Ww3jaNgw6O7Q1Xq29ZfjnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMimlPrIo7bXTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2U8X6g4myb78UXEruZxqMuR9Xxg6pWqt6G9gfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT6gYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DUbauJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sin[x]^2, {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3585$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3584$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1977898$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3584$\
1977899$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3585$1977900$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3585$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3584$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1977898$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3584$\
1977899$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3585$\
1977900$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977878[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Sin[$CellContext`x]^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {-0.01, 1.01}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3584$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3585$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1977878]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977878[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1977878[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkQZIKx+\
QGN0YkwaUpHyvl1wSC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLkEpKnhyDZ/dMSYEvQeM/IDY+W4a817IGdHu/\
AbfJywqGNHwVVNGNQU1PZAkz2ikas9Y0hPzkykTEWH0Jzzbfr2zMxwOHQzGMiZag+\
TqZVvIPJNEQdJDoBvGvGOEf3PHx+\
XxU8FYCN8L4BGoh8Y7kSQ2MIIThvl433q1mbqHiWnCYyLjS6fJynPU9gKlJeXpBGY5vnExWdttgYlM\
lePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+D5bVt4KU5XE4f57TLkjWh6AmqZzuet6+\
QYqbrWRj/n6rLmy0aDvHjK1P9LR1Tp5TBetA0DZsemxqu1twz/qi28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AAHIwrthyu0dTqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UnOsq+/FFxK7mcazLk/\
ZBrSEGuFf1trI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVQdSFSXdCwObGnO/JPolwU+Ap7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgPjs7ke"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "AlternateForm", "numsubpods" -> "2", 
     "position" -> "300", "scanner" -> "Simplification", "title" -> 
     "Alternate forms"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigReduce[Sin[x]^2]"}], 
       XMLElement["moutput", {}, {"(1 - Cos[2 x])/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["1", "2"], " ", 
               RowBox[{"(", 
                 RowBox[{"1", "-", 
                   RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "x"}], ")"}]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[Sin[x]^2]"}], 
       XMLElement["moutput", {}, {"1/2 - 1/(4 E^((2 I) x)) - E^((2 I) x)/4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{
                   FractionBox["1", "4"], " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "x"}]]}]}],
                "-", 
               RowBox[{
                 FractionBox["1", "4"], " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"2", " ", "\[ImaginaryI]", " ", "x"}]]}], "+", 
               FractionBox["1", "2"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "SymbolicSolution", "numsubpods" -> 
     "1", "position" -> "400", "primary" -> "true", "scanner" -> "Reduce", 
     "title" -> "Roots"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[Sin[x]^2 == 0, x]"}], 
       XMLElement[
       "moutput", {}, {"{{x == Pi C[1], Element[C[1], Integers]}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"\[Pi]", " ", "n"}], Identity]}], 
                    RowBox[{"n", "\[Element]", 
                    TagBox["\[DoubleStruckCapitalZ]", 
                    Function[{}, Integers]]}]}, "RowWithSeparators"], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "SymbolicSolution__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "SymbolicSolution__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Z is the set of integers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalZ]", 
                 Function[{}, Integers]], "\" \"", 
                "\"is the set of integers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PropertiesAsARealFunction", 
     "numsubpods" -> "4", "position" -> "500", "scanner" -> 
     "FunctionProperties", "title" -> "Properties as a real function"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[Sin[x]^2, x, y]"}], 
       XMLElement[
       "moutput", {}, {"Inequality[0, LessEqual, y, LessEqual, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "1"}], 
              "\"}\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Periodicity"}, {
       XMLElement["minput", {}, {"FunctionPeriod[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{
                 "\"periodic in \"", "x", "\" with period \"", "\[Pi]"}, 
                 "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
               DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[Sin[x]^2 == Sin[-x]^2]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "SeriesExpansionAt `1`x=0.", 
     "numsubpods" -> "1", "position" -> "600", "scanner" -> "Series", "title" -> 
     "Series expansion at x=0"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[Sin[x]^2, {x, 0, 4}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, 0, {1, 0, -1/3, 0, 2/45, 0, -1/315}, 2, 9, 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    SuperscriptBox["x", "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "3"], "+", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "6"]}], "45"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "8"], "315"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[Global`x, 0, {}, 2, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "3"]}], ",", "0", ",", 
                    FractionBox["2", "45"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "315"]}]}], "}"}], ",", "2", ",", "9", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Derivative", "numsubpods" -> "1", 
     "position" -> "700", "scanner" -> "Derivative", "title" -> 
     "Derivative"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"2 Cos[x] Sin[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 Global`TagBoxWrapper["StringBoxes" -> RowBox[{"d/d", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", 
                 RowBox[{"sin", "(", "x", ")"}], " ", 
                 RowBox[{"cos", "(", "x", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "IndefiniteIntegral", "numsubpods" -> 
     "1", "position" -> "800", "primary" -> "true", "scanner" -> "Integral", 
     "title" -> "Indefinite integral"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"(x - Cos[x] Sin[x])/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "GlobalMaximum", "numsubpods" -> "2", 
     "position" -> "900", "scanner" -> "GlobalExtrema", "title" -> 
     "Global maxima"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"{1, {x -> (Pi (-1 + 4 C[1]))/2}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"max", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], HoldForm], 
                    "}"}]}], "\[LongEqual]", "1"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "-", 
                    FractionBox["\[Pi]", "2"]}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"{1, {x -> (Pi (3 + 4 C[1]))/2}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"max", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], HoldForm], 
                    "}"}]}], "\[LongEqual]", "1"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"]}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "GlobalMaximum__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "GlobalMaximum__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMaximum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "GlobalMinimum", "numsubpods" -> "2", 
     "position" -> "1000", "scanner" -> "GlobalExtrema", "title" -> 
     "Global minima"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"{0, {x -> 2 Pi C[1]}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"min", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], HoldForm], 
                    "}"}]}], "\[LongEqual]", "0"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}]}]}], "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[Sin[x]^2, x]"}], 
       XMLElement["moutput", {}, {"{0, {x -> Pi + 2 Pi C[1]}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"min", "\[NoBreak]", 
                    RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], HoldForm], 
                    "}"}]}], "\[LongEqual]", "0"}], 
                 StyleBox["\" at \"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}, StripOnInput -> False], 
                 RowBox[{
                   TagBox["x", HoldForm], "\[LongEqual]", 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", "\[Pi]"}]}]}],
                "\"  \"", 
               StyleBox[
                TemplateBox[{"\"for integer \"", "n"}, "RowDefault"], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "GlobalMinimum__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "numsubpods" -> "3", "position" -> "1100", "scanner" -> 
     "MathematicalFunctionData", "title" -> "Alternative representations"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x]^2 == (Csc[x]^(-1))^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                SuperscriptBox[
                 RowBox[{"(", 
                   FractionBox["1", 
                    RowBox[{"csc", "(", "x", ")"}]], ")"}], "2"]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x]^2 == Cos[Pi/2 - x]^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{
                  SuperscriptBox["cos", "2"], "(", 
                  RowBox[{
                    FractionBox["\[Pi]", "2"], "-", "x"}], ")"}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sin[x]^2 == (-Cos[Pi/2 + x])^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"-", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "2"], "+", "x"}], ")"}]}], ")"}], 
                 "2"]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "csc(x) is the cosecant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Csc.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csc", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Cosecant.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"csc", "(", "x", ")"}], "\" \"", 
                "\"is the cosecant function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sin/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x]^2 == -Sum[((-1)^k 2^(-1 + 2 k) x^(2 k))/(2 k)!, {k, 1, \
Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"-", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox["2", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"2", " ", "k"}]}]], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"2", " ", "k"}]]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "k"}], ")"}], "!"}]]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x]^2 == Sum[((-1)^k x^(1 + 2 k))/(1 + 2 k)!, {k, 0, \
Infinity}]^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}]]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], "!"}]]}], ")"}], "2"]}],
               HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Sin[x]^2 == 1 + Sum[(E^(I k Pi) (-Pi + 2 x)^(2 k))/(2 k)!, {k, 1, \
Infinity}]/2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox["sin", "2"], "(", "x", ")"}], "\[LongEqual]", 
                RowBox[{"1", "+", 
                  RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "k", " ", "\[Pi]"}]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "\[Pi]"}], "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"2", " ", "k"}]]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "k"}], ")"}], "!"}]]}]}]}]}], HoldForm],
              FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
               DefaultAxesStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsAxes"], DefaultFrameStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
               DefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
            NumberPoint -> ".", 
            AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
            RenderingOptions -> {
             "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Sin/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod13$$ = XMLElement[
   "pod", {"async" -> 
     "http://www4b.wolframalpha.com/api/v2/asyncPod.jsp?id=\
MSPa177410705gb1i4f92ad300001i8222133f85g0d81140681106947506337", "error" -> 
     "false", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "numsubpods" -> 
     "0", "position" -> "1300", "scanner" -> "MathematicalFunctionData", 
     "title" -> "Integral representations", "asyncfailed" -> 
     "data not found"}, {}], Typeset`pod14$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DefiniteIntegralOverAHalfPeriod", 
     "numsubpods" -> "1", "position" -> "1400", "scanner" -> 
     "InterestingDefiniteIntegrals", "title" -> 
     "Definite integral over a half-period"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[Sin[x]^2, {x, 0, Pi/2}]]"}], 
       XMLElement["moutput", {}, {"0.785398"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["\[Pi]", "2"]], 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["\[Pi]", "4"], Identity], "\[TildeTilde]", 
              TagBox["0.7853981633974483`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralOverAHalfPeriod__1_More digits"}, {}]}]}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DefiniteIntegralOverAPeriod", 
     "numsubpods" -> "1", "position" -> "1500", "scanner" -> 
     "InterestingDefiniteIntegrals", "title" -> 
     "Definite integral over a period"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[Sin[x]^2, {x, 0, Pi}]]"}], 
       XMLElement["moutput", {}, {"1.5708"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["\[Pi]", "2"], Identity], "\[TildeTilde]", 
              TagBox["1.5707963267948966`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralOverAPeriod__1_More digits"}, {}]}]}]}], 
   Typeset`pod16$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "DefiniteIntegralMeanSquare", 
     "numsubpods" -> "1", "position" -> "1600", "scanner" -> 
     "InterestingDefiniteIntegrals", "title" -> 
     "Definite integral mean square"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Sin[x]^4/Pi, {x, 0, Pi}]"}], 
       XMLElement["moutput", {}, {"3/8"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Pi]"], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["sin", "4"], "(", "x", ")"}], "\[Pi]"], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["3", "8"], Identity], "\[LongEqual]", 
              TagBox["0.375`", Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod17$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  
                 CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$ = 
                 "curve", 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.08249027613378408, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.08249027613378408, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.08249027613378408, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2077053$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$2077058$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$2077059$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$2077060$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$2077061$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$2077062$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$2077063$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$2077064$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$2077065$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$2077066$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
2077067$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
2077068$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$2077069$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$2077070$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.08249027613378408, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2077053$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$2077058$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$2077059$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$2077060$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$2077061$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$2077062$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$2077063$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$2077064$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$2077065$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$2077066$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
2077067$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
2077068$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
2077069$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$2077070$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    24.19026343264141/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    12.095131716320704`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    12.095131716320704`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/Sin[$CellContext`x]^2 == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange]; CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    12.095131716320704`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    12.095131716320704`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 12.095131716320704`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 1}}, {2, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {16, 1, 2, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {10, 1, 2}, {16, 2, 3, 
                    2}, {13, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 2 Cos[$CellContext`x]^2 - 2 
                    Sin[$CellContext`x]^2], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 1}}, {2, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {16, 1, 2, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {10, 1, 2}, {16, 2, 3, 
                    2}, {13, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 2 Cos[$CellContext`x]^2 - 2 
                    Sin[$CellContext`x]^2], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 1}}, {2, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {16, 1, 2, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {10, 1, 2}, {16, 2, 3, 
                    2}, {13, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 2 Cos[$CellContext`x]^2 - 2 
                    Sin[$CellContext`x]^2], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 1} ((1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 1}}, {2, {2, 0, 0}}}, {0, 2, 4, 0, 
                    0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {16, 1, 2, 1}, {40, 1, 3, 0, 0, 3, 0, 
                    2}, {40, 56, 3, 0, 2, 3, 0, 3}, {10, 1, 2}, {16, 2, 3, 
                    2}, {13, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 2 Cos[$CellContext`x]^2 - 2 
                    Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[1/Sin[$CellContext`x]^2 == 0, $CellContext`x, 
                    Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[Sin[$CellContext`x]^2, $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 12.095131716320704`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 12.095131716320704`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {}, {0, 0, 3, 0, 
                    0}, {{40, 1, 3, 0, 0, 3, 0, 1}, {40, 56, 3, 0, 1, 3, 0, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, Sin[$CellContext`x]^2], 
                    Evaluate], 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 3}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 2, 3, 0, 0, 3, 0, 1}, {40, 1, 3, 0, 
                    0, 3, 0, 2}, {10, 0, 3}, {16, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, (2 Cos[$CellContext`x]) 
                    Sin[$CellContext`x]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "x", ")"}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.08249027613378408, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.08249027613378408, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.08249027613378408, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMxjZpn5CADsakASUp3+\
vFl9TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z07llHa7/V6+\
ro1HySn6S08PbVmKGe5LAR9d5Yr0JpJkV7DZ3eticHsAyc/\
gHrfTWveSzUjxp9f4fuEJwUnBr4axplhoCcHiuRTlujaM1LsxP5kwmVCOPsJz7e39va2dnc8DMYyIs\
aAEnqnLWQ+\
VURD2kOgG9a85UR888cn5fFTwXkM3wsQCehH1jtWhFoYKQjHfIJvvdpM3cfEDBGUKHrpNDl5DtteoI\
1iIhvDLMc3LibrZVtgojLtuXlQcrNOQT782/hAxi4m73FJu7MjMCyMK0bfeVn9c+\
4GeH7dFl7J09XEYX5vOPJGDDsBvUzni9Z18oxUXeuin3N1WfNlo0FePGXq/\
6Ujps1yGNttw4DZsa3xau0tw++2hZc5dv1c3A+t+\
ewdJeCq4VAJ7qOkBZ9H0Ux54CXaPl2dW4fHuFfxHaMzpIIVTmTjLPvF9cfjCrzeFGKs3WQD0hH1DIg\
gB+uijtt9ljEznBJFEgs8v65fNtlY1qEE3Nm+\
9kxQZgeYJ2Td8oTmMF2oOzHJ9MsfFbeSy7kmQ94PhYEM1FrR38H6KEuuoGMZGEmMFzT1GsxhldSIqG\
DZD0qQOCeCIST7ZT/um3+\
4WAmk6kChupRnceBKcxaeRL8s8BGIzEybO3bg6ApuW8wmkqe16iKWpovTZnNM95tMN25oDvRQEkJLE\
j7Qu02h2xT+6qawtAd3a0K3JnRrQrcmdGvC/7smuIjxX+k3/Ry4Vg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod18$$ = XMLElement[
   "pod", {
    "title" -> "Differential equation solution curve families", "scanner" -> 
     "Plotter", "id" -> "DifferentialEquationSolutionCurveFamilies", 
     "position" -> "1800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                 Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                 Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc2max$$ = 
                 ArcTan[2], $CellContext`sc2min$$ = 0, $CellContext`sc3$$ = 
                 ArcTan[
                   Rational[1, 4]], $CellContext`sc3max$$ = ArcTan[
                   Rational[3, 2]], $CellContext`sc3min$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`scColor1$$ = 
                 RGBColor[
                  0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                 RGBColor[
                  0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                 12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                 False, $CellContext`scTF3$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3$$], 
                    ArcTan[
                    Rational[1, 4]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor3$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc3min$$], -ArcTan[
                    Rational[1, 2]], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3max$$], 
                    ArcTan[
                    Rational[3, 2]], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount3$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1161233$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1161238$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1161239$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$1161240$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$1161241$$ = 
                 False, $CellContext`sc1$1161242$$ = 
                 0, $CellContext`sc2$1161243$$ = 
                 0, $CellContext`sc3$1161244$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$1161245$$ = 
                 False, $CellContext`sc1min$1161246$$ = 
                 0, $CellContext`sc1max$1161247$$ = 
                 0, $CellContext`scCount1$1161248$$ = 
                 0, $CellContext`sc2min$1161249$$ = 
                 0, $CellContext`sc2max$1161250$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = 0, $CellContext`sc1max$$ = 
                    Rational[1, 4] Pi, $CellContext`sc1min$$ = 
                    Rational[-1, 4] Pi, $CellContext`sc2$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc2max$$ = 
                    ArcTan[2], $CellContext`sc2min$$ = 0, $CellContext`sc3$$ = 
                    ArcTan[
                    Rational[1, 4]], $CellContext`sc3max$$ = ArcTan[
                    Rational[3, 2]], $CellContext`sc3min$$ = -ArcTan[
                    Rational[1, 2]], $CellContext`scColor1$$ = 
                    RGBColor[
                    0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                    RGBColor[
                    0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                    12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                    False, $CellContext`scTF3$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1161233$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1161238$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1161239$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$1161240$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$1161241$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$1161242$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$1161243$$, 0], 
                    Hold[$CellContext`sc3$$, $CellContext`sc3$1161244$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$1161245$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$1161246$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$1161247$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$1161248$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$1161249$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$1161250$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 1]] + ((
                    CalculateScan`PlotterScanner`Private`i - 1)/(
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 1)) (Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}, CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 
                    1}], {}], {CalculateScan`PlotterScanner`Private`j, 3}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 
                    6}}, {{-0.5, {3, 0, 5}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 8}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 4}, {16, 4, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 
                    6}, {16, 5, 2, 6, 7}, {40, 1, 3, 0, 4, 3, 0, 6}, {16, 8, 
                    1, 6, 9}, {13, 3, 7, 9, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1161219, \
$CellContext`C$1161220, $CellContext`C$1161221}, 
                    
                    Block[{Compile`$381}, 
                    Compile`$381 = 
                    2 $CellContext`x; $CellContext`C$1161221 + (
                    Rational[-1, 2] $CellContext`C$1161220) 
                    Cos[Compile`$381] + (
                    Rational[1, 2] $CellContext`C$1161219) 
                    Sin[Compile`$381]]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1, 
                    Rational[1, 2]}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = 
                    FullOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 
                    6}}, {{-0.5, {3, 0, 5}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 8}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 4}, {16, 4, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 
                    6}, {16, 5, 2, 6, 7}, {40, 1, 3, 0, 4, 3, 0, 6}, {16, 8, 
                    1, 6, 9}, {13, 3, 7, 9, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1161219, \
$CellContext`C$1161220, $CellContext`C$1161221}, 
                    
                    Block[{Compile`$381}, 
                    Compile`$381 = 
                    2 $CellContext`x; $CellContext`C$1161221 + (
                    Rational[-1, 2] $CellContext`C$1161220) 
                    Cos[Compile`$381] + (
                    Rational[1, 2] $CellContext`C$1161219) 
                    Sin[Compile`$381]]], Evaluate][$CellContext`x, 
                    Apply[Sequence, {0, 1, 
                    Rational[1, 2]}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, PlotStyle -> Directive[Black, Thick],
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{10, 11.1, 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 
                    6}}, {{-0.5, {3, 0, 5}}, {2, {2, 0, 0}}, {
                    0.5, {3, 0, 8}}}, {0, 1, 10, 0, 
                    0}, {{10, 0, 4}, {16, 4, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 
                    6}, {16, 5, 2, 6, 7}, {40, 1, 3, 0, 4, 3, 0, 6}, {16, 8, 
                    1, 6, 9}, {13, 3, 7, 9, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$1161219, \
$CellContext`C$1161220, $CellContext`C$1161221}, 
                    
                    Block[{Compile`$381}, 
                    Compile`$381 = 
                    2 $CellContext`x; $CellContext`C$1161221 + (
                    Rational[-1, 2] $CellContext`C$1161220) 
                    Cos[Compile`$381] + (
                    Rational[1, 2] $CellContext`C$1161219) 
                    Sin[Compile`$381]]], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    5.497787143782138], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    5.497787143782138]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] + (Rational[-1, 2] C[2]) 
                    Cos[2 $CellContext`x] + (Rational[1, 2] C[1]) 
                    Sin[2 $CellContext`x], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{4 Derivative[1][$CellContext`y][$CellContext`x] + 
                    Derivative[3][$CellContext`y][$CellContext`x] == 0}], 
                    1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] + (Rational[-1, 2] C[2]) 
                    Cos[2 $CellContext`x] + (Rational[1, 2] C[1]) 
                    Sin[2 $CellContext`x], {
                    C[1] -> 0, C[2] -> 1, C[3] -> Rational[1, 2]}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] + (Rational[-1, 2] C[2]) 
                    Cos[2 $CellContext`x] + (Rational[1, 2] C[1]) 
                    Sin[2 $CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3]}, 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[3] + (Rational[-1, 2] C[2]) 
                    Cos[2 $CellContext`x] + (Rational[1, 2] C[1]) 
                    Sin[2 $CellContext`x], 
                    Apply[Rule, 
                    Transpose[{{
                    C[1], 
                    C[2], 
                    C[3]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}], CalculateScan`PlotterScanner`Private`j]}], {
                    1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 3}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`x -> $CellContext`x1240]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 0, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{$CellContext`sc3$$, 
                    ArcTan[
                    Rational[1, 4]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    8}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 9}, {{$CellContext`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1min$$, Rational[-1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`sc1max$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 14}, {{$CellContext`scColor2$$, 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`sc2max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{$CellContext`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 19}, {{$CellContext`scColor3$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    20}, {{$CellContext`sc3min$$, -ArcTan[
                    Rational[1, 2]], 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{$CellContext`sc3max$$, 
                    ArcTan[
                    Rational[3, 2]], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{$CellContext`scCount3$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 23}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`x1240, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiM1IL4hgR0MCYNKEn53lvspBauHWxnG/\
x58NlN0qxdpZgO0JR+ONWX5vHdc89d78mRjNJ+r9fTV635IDlJb+\
DpsTVjuchlIci701xRrZkU6RV8dtuamJo9yuEHJd533Zr3Ui3A+\
PMrfB94UnAw9KthnBlG9WxfQT5nia49E8WO7U9mXCbA2U/6dDh8ORyNRh4GY5mAMVQJ/\
bwtZD5XoGnaQ6Br1rzlIL7546Py+KngPKbfCyoSqh9Y71QBsTBSAMd8gm+\
93EzdxcQMCAKKXDhNTp7jthdoo5jIpnSR4xvnkzVsCwwq056beyU32xTkw7+\
JD2TsYvIel7Q7OwLDwrhk9J2V1T/\
nboDn123hlTzZTBzm94Yjb2DYMdXrdD5rXSfPSNW1LvolVxc1X3Ya5PlTpv5fOmTarIcxahsGXRzZG\
m/W3jr8i7bwMseuX4r7vjWfvaME3DQcKsF9lKTgyyiaKQ+\
8RNunq3Pr8Bh3Kr5jdIZUsMKJbJxlv7j+\
eFiB15tCjLWb7UA6op4BEc2pdRHH7R7LmBnPQUFigZfX9csmm8o6lIA729eeCcLsAPOEbFue0BykK3\
UHk8y//FFxK7mcaTLk/UAYmlG1VfS3sD7KkivIVAZGEuMFTb0Gc1glNQEVLPtBCRLnIBhCsl/\
24775h6uVQKr2FapLeRYHrjSn4Un0ywIfUpGZeXPHDhxdwW2L2UTypFZdxNJ0ddrsjul+k+\
nGDc2BHkpCaEnCB3q3KXSbwl/dFNb24G5N6NaEbk3o1oRuTfh/1wQXMf4r/QYuL7gW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod19$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`n$$ = 1, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  10.468111541804634`, 9.095033330898843}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 3, 
                    "backward iterations"}, {1, 2, 3, 4}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`n$$], 1, 
                    "multivalued inverses"}, {1, 2, 3}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    10.468111541804634`, 9.095033330898843}}}}, 
                 Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
                 Typeset`initDone$$ = False, Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1138370$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$1138375$$ = 
                 0, CalculateScan`PlotterScanner`Private`n$1138376$$ = 0, 
                 CalculateScan`PlotterScanner`Private`sf$1138377$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 3, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`n$$ = 1, 
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    10.468111541804634`, 9.095033330898843}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1138370$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$1138375$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`n$$, 
                    CalculateScan`PlotterScanner`Private`n$1138376$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$1138377$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Cases[
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`n}, {
                    
                    Table[(2 CalculateScan`PlotterScanner`Private`C1) Pi - 
                    ArcSin[CalculateScan`PlotterScanner`Private`y^
                    Rational[1, 2]], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}], 
                    Table[
                    Pi + (2 CalculateScan`PlotterScanner`Private`C1) Pi - 
                    ArcSin[CalculateScan`PlotterScanner`Private`y^
                    Rational[1, 2]], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}], 
                    
                    Table[(2 CalculateScan`PlotterScanner`Private`C1) Pi + 
                    ArcSin[CalculateScan`PlotterScanner`Private`y^
                    Rational[1, 2]], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}], 
                    Table[
                    Pi + (2 CalculateScan`PlotterScanner`Private`C1) Pi + 
                    ArcSin[CalculateScan`PlotterScanner`Private`y^
                    Rational[1, 2]], {
                    CalculateScan`PlotterScanner`Private`C1, -
                    CalculateScan`PlotterScanner`Private`n, 
                    CalculateScan`PlotterScanner`Private`n}]}][#, 
                    CalculateScan`PlotterScanner`Private`n$$]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]], 
                    Blank[Complex]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-17.212424682670104`, 
                    20.354017336259894`}, {-18.783221009465, 
                    18.783221009465}}, 1, 2]], 
                    
                    Part[{{-17.212424682670104`, 
                    20.354017336259894`}, {-18.783221009465, 
                    18.783221009465}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-17.212424682670104`, 
                    20.354017336259894`}, {-18.783221009465, 
                    18.783221009465}}, 2, 2]], 
                    
                    Part[{{-17.212424682670104`, 
                    20.354017336259894`}, {-18.783221009465, 
                    18.783221009465}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-18.201015262115632`, 
                    21.342607915705422`}, {-19.771811588910527`, 
                    19.771811588910527`}}, ImageMargins -> 20, ImageSize -> 
                    240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 3, 
                    "backward iterations"}, {1, 2, 3, 4}, ControlType -> 
                    SetterBar, ControlPlacement -> 1}, {{
                    CalculateScan`PlotterScanner`Private`n$$, 1, 
                    "multivalued inverses"}, {1, 2, 3}, ControlType -> 
                    SetterBar, ControlPlacement -> 2}, {{
                    CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 3}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2], 
                    Manipulate`Place[3]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    10.468111541804634`, 9.095033330898843}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs+IUoR4QQK6y7LSAiUp7/\
Umk8TCtYPt7IWfB4/dJM22WymmC2iVPozqSXM8c+\
bMdJ4ciiDp93o9ddWYj4LFyQ08PTZmLOa5KHi8e5JLUIoKnlzBZ7eNCUHvACOnEDvfdWM+\
CDkn2p3f4PuERQUjGr5pyqimoGZ7kuQZjVTtmUh6ZH4yYyIijP6Ep8Ph6PXo1XMHg7FMiNYguRq1hc\
wzSRQkPQS6Zsx7Rvh3d3xUHj8XjIXwowAegXpgvFNJYgMjOGGYj/\
etl5upu5iYJjwmMr5wmqw8x20vUFpSnk5hnuMb55M1bAtMZKocN/dKbjYpyIV/Ex+\
I0MbkPDZpe7YE+oVxyeg7K6t/zt0Az2/\
bwktxvJ44zO8dQ96IpkegVul81rpOjpGqa230C64uar5sNcjzp0z9v3RAlV4N40XbMGB+\
aGq8Xnur8C/\
bwoscu34h7vvGfHGOEnDdcKgE90nEBVtE0Ux54CTaPl2VG4fDuFPxHaLTp4IVTmDiLPvF9sfDCrzeF\
EKs3WwL0uH1DAggB+OKLbc7NKV6nBFJIgO8uK5fNtlU1KF43Nm+\
9pTH1AwwR8im5QnNfrJUd6Kj7OsfFbeSy5kmQ973uYYU5EbR38L6SEMuj6fCM5IQL2jq1ZvDKqkJkd\
6yH5QgYU44RUj6y3zsN/dwuRJI1Z5EdUnH4sCW5sQ/\
iX5Z4APgqc6aO7bn6PJuW8wmEMe16gKaJMvTZntM95tMN25oDnRfEnxL4j/Qu02h2xT+\
6qawsgd3a0K3JnRrQrcmdGvC/7sm2IjxX+k3gym4Tg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "19", "datatypes" -> 
    "MathematicalFunctionIdentity", "timedout" -> "", "timedoutpods" -> "", 
    "timing" -> "4.822", "parsetiming" -> "0.227", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSPa177010705gb1i4f92ad3000069ci51d61feic28d", "host" -> 
    "http://www4b.wolframalpha.com", "server" -> "29", "related" -> 
    "http://www4b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa177110705gb1i4f92ad3000046241b33d44dd3581140681106947506337", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3.5, 
    "Date" -> {2019, 3, 10, 21, 25, 28.8633208`9.21292120912898}, "Line" -> 
    41, "SessionID" -> 20608653710653559281}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 
   Typeset`failedpods$$ = {13}, Typeset`chosen$$ = {
   "SymbolicSolution", "Roots", 1, 1, "Input", "Reduce[Sin[x]^2 == 0, x]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "sin^2(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{184., {43., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[41]:=",ExpressionUUID->"05d53f82-b72f-46c3-b433-98d9420c9ee9"],

Cell[BoxData[
 TemplateBox[{
  "WolframAlpha","timeout",
   "\"The call to \\!\\(\\*RowBox[{\\\"WolframAlpha\\\", \\\"[\\\", \
RowBox[{\\\"\\\\\\\"sin^2(x)\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"MathematicaParse\\\\\\\"\\\"}], \\\"]\\\"}]\\) has exceeded \
\\!\\(\\*RowBox[{\\\"30.`\\\"}]\\) seconds. Increasing the value of the \
TimeConstraint option may improve the result.\"",2,41,3,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612293225584965`*^9},
 CellLabel->
  "During evaluation of \
In[41]:=",ExpressionUUID->"1c176d3f-3d34-4048-b465-fcd7cd4b30b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"C", "[", "1", "]"}], "\[Element]", 
   TemplateBox[{},
    "Integers"]}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "\[Equal]", 
     RowBox[{"2", " ", "\[Pi]", " ", 
      RowBox[{"C", "[", "1", "]"}]}]}], "||", 
    RowBox[{"x", "\[Equal]", 
     RowBox[{"\[Pi]", "+", 
      RowBox[{"2", " ", "\[Pi]", " ", 
       RowBox[{"C", "[", "1", "]"}]}]}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.7612293289769783`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"e6f8074b-af64-436c-b748-4fd07eac3abe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761229338971059*^9, 3.7612293578738985`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"2f77a739-e794-482f-9cf7-b3b957bb0fa9"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
bZwc3Ar/771Y/P/vxf4fa9/0Ng==
       "]]},
     Annotation[#, "Charting`Private`Tag$165560#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.9999999997212663}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612293589654875`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"7922f8da-e75f-413a-8636-f5a402c41fee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Sinc", "[", 
         RowBox[{"t", "/", "T"}], "]"}], "^", "2"}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612293859672985`*^9, 3.7612294078423347`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"0c2525c9-1282-4197-a959-71266ac8e691"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxN1GlI03EYB/C5XE1neU7923SHITWYipLiEWk2JpRHs61IMpsuxFYzFVOm
ljg1LchritO98Ggpo4wgNSm0ZlpaSwpntg5rOa8or+kS1yrQ59cDX7583n1f
PXSBmCvE43C4mL/51wXTMUsWi3c/bvMMElejbgM51uHzWvcvZFpIhlm8jPy0
opo4aUAm+o579b9Crs1OPnK1EVllldWGC0YmCDkB2GkG2PndM1FLFR3MVctT
9g3TwJKfB0SVeiq457I8vTPOC+2t5tF+N1DAHMXj2OjvHmDlUJ42KxEDJ0lr
ya/b3cCFydvukpxdwTgWtS+qxAX8/npDmWrMCUyxTetYOeQIPr+fSdBR7MEp
wZ/a1WoSmJkbarnYRgQ3f0wYyIskgKeLyOEcdzy4V7aXPcM3923Zf3ZixU+x
Cj7cq7Mx8xfAGR2dJkdnPZh/zrv5Tf4L8NDLiYrAhOcHtxzKenI/vl4PxueQ
P6RiC+AddvFFgh+r4OJJbVRmqxl8r7E0vnDJKmLL4pZUh298AjgpXe5ZVkQE
lx/LCQlsIoGtXWSGK+u7wOMjJQtSe0cwTyIIkqudwCLSPENzygVMVQ3WbZ8j
gyU9UQn2jW7gDKWoK8gPA9vhgwW+Ux5g9oXjMmYNBez+0FPM3uMFrs68VuU/
TgVzS+NYii4amJko5bUV0MFag01LDY8B1gimIp2o3uAv1rdNMgbyijKtE/NB
xubnKXQWcmrW0ppfGPJ6seVOzAlkn1uYR/lN5BCObtSuBvnobFNZZR3yJRbN
WK9AfvTAZ1SpQuYOBpYODCEL04zh0SPIubbdyyMaZEVs6Nm3Y8gz2ojwr/r/
9ubil4XTyDt3D3TMziEHnOG4LS4is61sNNlG5JOtw1KTCTmdfSMsfwN583+B
/wA+Uhvc
       "]]},
     Annotation[#, "Charting`Private`Tag$166749#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612294098111444`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"a5498161-08ac-4b06-9254-d3cb071065ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Sinc", "[", 
         RowBox[{"t", "/", "T"}], "]"}], "^", "2"}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "1500"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.761229422975813*^9, 3.7612294583203325`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"e61c0316-bd00-45bf-8ed2-c9fc930998e8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw11HswXFccB/D1WI+i3o9VLG5GU1NrFTFReo/HVjq1IrveGl1rSSfZYAiK
hBgiD0YSIglrJ6JqZIQNnaaiTe/ZITaRRqLTeiSRarbeKsjOElPR+zPtH3fO
fObOnXPnnO/35ybOEqTrMhiMCPqB9cQsf217m8CPE3k1gnEeacQZc8GPCOyg
EWyALx0TfX5SRmC3hzGpQtodOrmtjAACI29/bgxtZnrER6yD7ljSKXkZS9t6
/J605aIbtqsyzYinLehvTPtgyBVP6R4bSaBd/CpYekHNxpFFzM+SaPcWNB5W
7HfBVyoNLyfTjqqNdX3b4IQd2eOLX9COkN+N2rfkiGcZrrtTaLepCkdzk1n4
E5/54C9pp1Rcsn3cbo+5A8IEEe0SkV6XibUdRmaCqFTaDC82FXbKBndmLnHE
tJ9WNZzu+N0KmxXZWqTRdnrnqxuaUEucI1M9AR/x92Q+czLHmjhFjYR2WsCL
9v5+E8xXLfqn0/b8OnA7s9UIIx8Kg69PCgcKQ5j46JY8PIP2gMLv5NRNPdw9
UVoMni2zDYpw0MWa73Z1gcUzMYrJVAY+FxI0Be6r382bi9uitJOJZodo55E6
zqabb6iM3x75gbnzExpvuZYKGcmLB/eNJJXaFb2mykQFueDwvmfGW3Er1HhA
ZBX4nxpfg8qpeSox8kgzOPuGYsPSWk312LfcAhuUbzR/mjNBKUvifwTHZRDX
fz3+gPpbeU8JXrnaIFltyKFCG5b6wapfJs75Cu+TZ9TanffS5oJ655sTpDWf
u/N9oJeyJ/qKmgzV1irA10zz/c2m50m/Fyk7++vm2z6XsFbIBIamGqyv7OlS
l78mww947Py/oWl0mXhZS9rkpseAefl14oV9m6SqKc0HXD41GpbzzRb5Q1aT
MfgNc++d98QMtFXhv3N+t2SV0SVrOohv3d4DtriWx+1u1UNrf1w4Ds5qkVj8
FcdEBx2vhoBTDjc6ny4zQnNtmYNwf2cP5O/1bTJB2UWcYLC+Tf1M6ea7aN1F
WQ/3P/bw1EqFuSXiyThzkI/YYvGexn4rpHffjgWWmiy6DyfZoEMWyzzIF7tj
8LLBgi3SioIzIH/FvWFCc5k96jFfFUE+s9ukt/d4s9D6cHUy5NdUN0DMmXZE
P7/iekG+eUdj6j3rnNBGi/4q5N/hjnMWb5cL2n4+0gv9qM05c5E7xka1HYVC
6I+gcr+X/LYrkg95aaBfnskVsa0n3FCmeUAV9G90xrilLtYd5Z03XIV+Doun
Q6zYBFrJfyqC/kpy19a9PybQQmDn++DN8u1OfjyBpJ4fLkPfPb5lOZ49TyD9
ak4R+KfvPZ60dRCI/babBAsGfSsHVAQakv2pD54bRUEv1QTSS7/7AObHf/MF
/T9f/gWWnBEk
       "]]},
     Annotation[#, "Charting`Private`Tag$169551#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.0006666567901827905},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0.0006666567901827905, 0.0006666666666646298}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612294608790646`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"fcbce25b-8e26-4795-ba9f-bceac17633b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Sinc", "[", 
         RowBox[{"t", "/", "T"}], "]"}], "^", "2"}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "50000"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761229503965422*^9, 3.7612295164815207`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"3ec10c2c-15a1-4732-b845-10193a0587e7"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw11HtMU1ccB/ALXXm1jLdaBAot2WYjg9kpwzjvQUBYVEAeXSabj8sjRjsr
ZcUBgjLKSyJOoJstNAIig8BkmvgAQ+7BMmGyuEC2sq7TgQWkTKGrDIGMdevv
bn+cnHySk5PfeXx/IZQsJduRIIjd/w77XPx0n9VmE+IdeVuUN5cXdzZ8cnjP
2UYhjhUcAXc55LURkUJMTdWC2dnxW3gfCXDd83mwz8/fSlsvhmD37thyu1N0
msxND4JxorsKXLTwrvRzEx/v58+C75zSHOtJCsLZQ29V2J1Ylx78tzoAC6hi
cLy2PzHhmT92fV8Hbh8q0Odl8PA7w0Sl3QeVDX4/dKzHDSQJLjnMusbxWYer
OxRgIoxPx5T74n2Sr8C/1Kgru37yxlqhARzgdrRzcZcX/voeq8ru41tFbGOA
B76tCwNnRj7u0Ok4eNNAClj06XbbiTYX/FyRC255lDpYEM3G+uZa8GDP22cn
ulk4d1ADflrqtyN+gyP2XL4KpmbSeh4dIfAJ7nVwn+qNuFnJGs12vgtWkA6B
3NUV+iXWgSPMhsVw7RKddHyEWT964My6whf0Ru0oOLbP6LomsdDKJ3rwX7Vi
p4oJM11QawSf7OxZ9vIx0RdCfwM7lS0375YbaPNnk2BJjrBl7PR3tNvCE/C5
3LyqupvD9KElxv2ndbKU+SG6cI1xaH3mzrFD92mCYwJb6SvG0V06OlXIOEic
sLnVq4/2fI+x5ZI66w+1nJ48ynjoe8M5ceowaV5h9pM2n1IFdhtIspCpZ3vY
wI3kL03kpdnH4Mvc/K3u02ayt4Y5j2O+369ZPAtJonHwKwM3rpnKXpCba5j7
cOYml1LzS+RY/wNwXH49NZewSjbZ7oHLJvQx8itrJCnuA6+wo3o3UgSyuDHv
8U1jRXKJ1QE1vWwHe15WRFxvY6EfiUawrDXLc0rCRp1/ngcfPKYJrCx1QYbb
cnD1/vwocRMHJXyYxtTnq5o5s/oqYqWFg8dHyi1KDy80suACTi+itml03qgs
xAj/Ucr5XfDwgC+ySbvB/K77XzjN+aFn1kJw0Z2YVI/G9Sjj9WjwyXbprW3h
PFQscQZzHSOpN6f90axiEPIS93GaSlQfgHiVJeANvYGyuNAg9EFBFLhOXnUx
YpyPkGyOyWtFUpj2VjBS320CizKU6W3FIahqai9YP+PaWp8uQBKRFfL+kJqO
9uYL0WS7GvzaVZ5/9QUhymnJAf/XT9D//eQf2Shmag==
       "]]},
     Annotation[#, "Charting`Private`Tag$169674#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.00001999999973333336},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0.00001999999973333336, 0.000019999999999999947`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761229517677643*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"92758c8b-2376-47d4-a136-ed1fd9717aa1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "T"}], "]"}], "^", "2"}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761229532355364*^9, 3.7612295757282495`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"e0afc0fb-7e32-4141-9d96-c6c67b7b4de5"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612295769850388`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"bac4258c-2dba-4dea-a98a-b8100e99242f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "1500"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "1500"}], "]"}], "^", "2"}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7612296040407333`*^9, 3.761229612123254*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"f1785326-48ff-4b58-b0d3-18be012a759d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw11HswXFccB/D1WI+i3o9VLG5GU1NrFTFReo/HVjq1IrveGl1rSSfZYAiK
hBgiD0YSIglrJ6JqZIQNnaaiTe/ZITaRRqLTeiSRarbeKsjOElPR+zPtH3fO
fObOnXPnnO/35ybOEqTrMhiMCPqB9cQsf217m8CPE3k1gnEeacQZc8GPCOyg
EWyALx0TfX5SRmC3hzGpQtodOrmtjAACI29/bgxtZnrER6yD7ljSKXkZS9t6
/J605aIbtqsyzYinLehvTPtgyBVP6R4bSaBd/CpYekHNxpFFzM+SaPcWNB5W
7HfBVyoNLyfTjqqNdX3b4IQd2eOLX9COkN+N2rfkiGcZrrtTaLepCkdzk1n4
E5/54C9pp1Rcsn3cbo+5A8IEEe0SkV6XibUdRmaCqFTaDC82FXbKBndmLnHE
tJ9WNZzu+N0KmxXZWqTRdnrnqxuaUEucI1M9AR/x92Q+czLHmjhFjYR2WsCL
9v5+E8xXLfqn0/b8OnA7s9UIIx8Kg69PCgcKQ5j46JY8PIP2gMLv5NRNPdw9
UVoMni2zDYpw0MWa73Z1gcUzMYrJVAY+FxI0Be6r382bi9uitJOJZodo55E6
zqabb6iM3x75gbnzExpvuZYKGcmLB/eNJJXaFb2mykQFueDwvmfGW3Er1HhA
ZBX4nxpfg8qpeSox8kgzOPuGYsPSWk312LfcAhuUbzR/mjNBKUvifwTHZRDX
fz3+gPpbeU8JXrnaIFltyKFCG5b6wapfJs75Cu+TZ9TanffS5oJ655sTpDWf
u/N9oJeyJ/qKmgzV1irA10zz/c2m50m/Fyk7++vm2z6XsFbIBIamGqyv7OlS
l78mww947Py/oWl0mXhZS9rkpseAefl14oV9m6SqKc0HXD41GpbzzRb5Q1aT
MfgNc++d98QMtFXhv3N+t2SV0SVrOohv3d4DtriWx+1u1UNrf1w4Ds5qkVj8
FcdEBx2vhoBTDjc6ny4zQnNtmYNwf2cP5O/1bTJB2UWcYLC+Tf1M6ea7aN1F
WQ/3P/bw1EqFuSXiyThzkI/YYvGexn4rpHffjgWWmiy6DyfZoEMWyzzIF7tj
8LLBgi3SioIzIH/FvWFCc5k96jFfFUE+s9ukt/d4s9D6cHUy5NdUN0DMmXZE
P7/iekG+eUdj6j3rnNBGi/4q5N/hjnMWb5cL2n4+0gv9qM05c5E7xka1HYVC
6I+gcr+X/LYrkg95aaBfnskVsa0n3FCmeUAV9G90xrilLtYd5Z03XIV+Doun
Q6zYBFrJfyqC/kpy19a9PybQQmDn++DN8u1OfjyBpJ4fLkPfPb5lOZ49TyD9
ak4R+KfvPZ60dRCI/babBAsGfSsHVAQakv2pD54bRUEv1QTSS7/7AObHf/MF
/T9f/gWWnBEk
       "]]},
     Annotation[#, "Charting`Private`Tag$169852#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.0006666567901827905},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0.0006666567901827905, 0.0006666666666646298}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612296166371307`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"aa79b327-e24a-40f2-b4c6-3a2d4a64d503"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sinc", "[", "t", "]"}], "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761229654591621*^9, 3.7612296749715548`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"bfdf5014-e7fc-4f82-a1ee-c45eac6a5f47"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
3H3B/YB07T74v3t4+P/38P4HQT71ow==
       "]]},
     Annotation[#, "Charting`Private`Tag$169899#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.9999992101892595}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761229676257287*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"da740495-5596-467a-85b9-f3a5f0175143"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "1500"}], "]"}], "^", "2"}], ")"}], "/", "1500"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7612296983356175`*^9, 3.7612297474270344`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"5af8997e-7ccb-4643-b66c-940fb0c72c42"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJw11HswXFccB/D1WI+i3o9VLG5GU1NrFTFReo/HVjq1IrveGl1rSSfZYAiK
hBgiD0YSIglrJ6JqZIQNnaaiTe/ZITaRRqLTeiSRarbeKsjOElPR+zPtH3fO
fObOnXPnnO/35ybOEqTrMhiMCPqB9cQsf217m8CPE3k1gnEeacQZc8GPCOyg
EWyALx0TfX5SRmC3hzGpQtodOrmtjAACI29/bgxtZnrER6yD7ljSKXkZS9t6
/J605aIbtqsyzYinLehvTPtgyBVP6R4bSaBd/CpYekHNxpFFzM+SaPcWNB5W
7HfBVyoNLyfTjqqNdX3b4IQd2eOLX9COkN+N2rfkiGcZrrtTaLepCkdzk1n4
E5/54C9pp1Rcsn3cbo+5A8IEEe0SkV6XibUdRmaCqFTaDC82FXbKBndmLnHE
tJ9WNZzu+N0KmxXZWqTRdnrnqxuaUEucI1M9AR/x92Q+czLHmjhFjYR2WsCL
9v5+E8xXLfqn0/b8OnA7s9UIIx8Kg69PCgcKQ5j46JY8PIP2gMLv5NRNPdw9
UVoMni2zDYpw0MWa73Z1gcUzMYrJVAY+FxI0Be6r382bi9uitJOJZodo55E6
zqabb6iM3x75gbnzExpvuZYKGcmLB/eNJJXaFb2mykQFueDwvmfGW3Er1HhA
ZBX4nxpfg8qpeSox8kgzOPuGYsPSWk312LfcAhuUbzR/mjNBKUvifwTHZRDX
fz3+gPpbeU8JXrnaIFltyKFCG5b6wapfJs75Cu+TZ9TanffS5oJ655sTpDWf
u/N9oJeyJ/qKmgzV1irA10zz/c2m50m/Fyk7++vm2z6XsFbIBIamGqyv7OlS
l78mww947Py/oWl0mXhZS9rkpseAefl14oV9m6SqKc0HXD41GpbzzRb5Q1aT
MfgNc++d98QMtFXhv3N+t2SV0SVrOohv3d4DtriWx+1u1UNrf1w4Ds5qkVj8
FcdEBx2vhoBTDjc6ny4zQnNtmYNwf2cP5O/1bTJB2UWcYLC+Tf1M6ea7aN1F
WQ/3P/bw1EqFuSXiyThzkI/YYvGexn4rpHffjgWWmiy6DyfZoEMWyzzIF7tj
8LLBgi3SioIzIH/FvWFCc5k96jFfFUE+s9ukt/d4s9D6cHUy5NdUN0DMmXZE
P7/iekG+eUdj6j3rnNBGi/4q5N/hjnMWb5cL2n4+0gv9qM05c5E7xka1HYVC
6I+gcr+X/LYrkg95aaBfnskVsa0n3FCmeUAV9G90xrilLtYd5Z03XIV+Doun
Q6zYBFrJfyqC/kpy19a9PybQQmDn++DN8u1OfjyBpJ4fLkPfPb5lOZ49TyD9
ak4R+KfvPZ60dRCI/babBAsGfSsHVAQakv2pD54bRUEv1QTSS7/7AObHf/MF
/T9f/gWWnBEk
       "]]},
     Annotation[#, "Charting`Private`Tag$169946#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.0006666567901827905},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0.0006666567901827905, 0.0006666666666646298}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761229748342515*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"26401e04-d430-4526-82f6-9ec0b5ae0ffe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Sinc", "[", 
         RowBox[{"t", "/", "T"}], "]"}], "^", "2"}], ")"}]}], ",", 
     RowBox[{"T", "\[Rule]", " ", "0"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761229780585796*^9, 3.7612297824767046`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"126048a9-4c7e-4ec0-87d4-3487aa0d00b8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxN1GlI03EYB/C5XE1neU7923SHITWYipLiEWk2JpRHs61IMpsuxFYzFVOm
ljg1LchritO98Ggpo4wgNSm0ZlpaSwpntg5rOa8or+kS1yrQ59cDX7583n1f
PXSBmCvE43C4mL/51wXTMUsWi3c/bvMMElejbgM51uHzWvcvZFpIhlm8jPy0
opo4aUAm+o579b9Crs1OPnK1EVllldWGC0YmCDkB2GkG2PndM1FLFR3MVctT
9g3TwJKfB0SVeiq457I8vTPOC+2t5tF+N1DAHMXj2OjvHmDlUJ42KxEDJ0lr
ya/b3cCFydvukpxdwTgWtS+qxAX8/npDmWrMCUyxTetYOeQIPr+fSdBR7MEp
wZ/a1WoSmJkbarnYRgQ3f0wYyIskgKeLyOEcdzy4V7aXPcM3923Zf3ZixU+x
Cj7cq7Mx8xfAGR2dJkdnPZh/zrv5Tf4L8NDLiYrAhOcHtxzKenI/vl4PxueQ
P6RiC+AddvFFgh+r4OJJbVRmqxl8r7E0vnDJKmLL4pZUh298AjgpXe5ZVkQE
lx/LCQlsIoGtXWSGK+u7wOMjJQtSe0cwTyIIkqudwCLSPENzygVMVQ3WbZ8j
gyU9UQn2jW7gDKWoK8gPA9vhgwW+Ux5g9oXjMmYNBez+0FPM3uMFrs68VuU/
TgVzS+NYii4amJko5bUV0MFag01LDY8B1gimIp2o3uAv1rdNMgbyijKtE/NB
xubnKXQWcmrW0ppfGPJ6seVOzAlkn1uYR/lN5BCObtSuBvnobFNZZR3yJRbN
WK9AfvTAZ1SpQuYOBpYODCEL04zh0SPIubbdyyMaZEVs6Nm3Y8gz2ojwr/r/
9ubil4XTyDt3D3TMziEHnOG4LS4is61sNNlG5JOtw1KTCTmdfSMsfwN583+B
/wA+Uhvc
       "]]},
     Annotation[#, "Charting`Private`Tag$170076#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761229794057311*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"9903dcdd-4b2c-4455-9530-aecef24f6ee1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612298199980254`*^9, 3.761229839386076*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"f09c6828-f183-4058-b566-7dcea90f85e0"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwUV3c8lu8XlpU9X3u9o6+GUNnSeYoyGkhFSaVCChUJpRJZWQlRQmSkJJJR
KEdkZYVkZ++yt/i9v7+ez/257/s517mu6znPOZQL10ysGRkYGGqZGRj+/7w7
dGR6fZ2GM/KJ0XHaGTDoLjzXvkpD8w+HAqMeIBjy/V7IW6Lh+iPvcM+73yEv
6dVy+DwNBZ/JuUn1NwJZ4/q/azM0ZNTLcozc3Ab+NeoMhydpKBT3iuf3ym+Y
Or+BacsfGp4Kjh6PuNoL5vOVLMyj9P3vW3/ZK/TD14Awtu5BGhZQspnThQZA
TuY0Z2EfDTlKLcVe8A5AxAcaz9NuGsbpMop5SfbDqt44n3MnDbmPDwuEHe0F
645sQeM2GrJr/Tpi++431F6/K7z9Fw1NGu0NuqpaQZVFV4ytiZ6fKpPp+t1G
ePGMR7K/nobH+P/ktqZXAZvCL2msoaGqU2TsNr8icPz6ghJTRcOWg/+MXrW9
hTZT201u5TQsYTPWuvopCLTHdmw+XkrDB0mxa918Q3vSPJa27iim4Vf2ezZy
7KFAIn3dzvWFhveEv+P70HdwJzVAcTifhilHchlUHRAGtI7tKs2j4c3jCT4W
T7+D4Q8JlfhsGm4WnJWOFWqCPOt+tTvvafjHLrvYzacNyMtvNU++o2Gan+Nn
/QPd4B9yc49yGg23vTBzuFTbC1NU2MuXSsPXd/3/xSf1g3keq854Eg03PjSb
UowbgK+H6g5UJNCw2JD64HMSnd/uKP2kOBo6Bbw4Z5vXDxHOlofuP6frOahl
NjjaC//YthpaPKUhcceosfBSN9jEThmrP6Hn9/DMsas1bVC7M/8YKYyGv/67
ntdo1gRqZV6mkyE0ZDtcafudsRrizQ+dqg6k4a53h24sZiOwTQhapPrTsHD/
JwsBagY4Pug46+1DwyeXdghUHwuFNpHk85ZeNJztuCMsWN27R+etg5WWBw3T
o87whn8Ohrd7VS+J3qHhYJFchUZ7OpB+rl2edaPhl585tJoTCHcvl9vX36T7
k2e+k/bhOwz+e3TtrRMNf3ezSPLqN4Fh2Ekn/2s0FBhoPZE70AZ5spSbVvY0
DA5Orn8T0g3kghHXvZdpGBtZmLhzZx88NMq6LWlDw+pXvsfypQdguu/23cUL
NHxXl7brmtwgmLvp3G86R8Mdn73XDhCDUMLF9SDTgobJosyP5U8OwPaEJp+g
UzR0T3FaPRjQBxEqsf62pjT0+FxuTax1w79K68D9x+j+3rA2r97eDjZnFULI
xnQ/1xtZp+/+CbXT86Grh+l+8RC/8Ny2BtT8isJbDGjYnajdEP6hGOIl/COz
dWmoKftx8El5JrBlGj8L1aH7lZW0fPpWGDjuF4ux30vDXAKOM/mKQFtLT5z+
HhqeNKQ+v3AtELQd3iRs0qThgl3PGVVqOqRtuJHEoEZDat72LaZ7ENSPvWF9
pkTD1ajNGh777aEsqcd25w4aGvZLnbqqngHH5kW/V26nxyt59nrv0R/QrWcs
f2ErDc8Xhm3+Xd0NV5/5PVr+j4bG5WrK/LsGYWX0y1QYlYZTzr98hPkHwV9r
/picDA0d9nBxk251g3CIfG6JBA3tzfdonAqvBy/x4XJfBhoq5cUlxpm0AZ+9
zDaZf1S81RAi/GpfKcR+Ng3KW6KiUoSdv92gN2zjDflrNE/FvwlZQ2MeKfDR
8pvx8DQV/zj6lNgI18GBrNWs+xNUrOY4+ENBrhsamJSFxMapuPBfjL2NwSBY
nrBzfT9MxfFy8Ysay4PwJ+Vlq8EAFbUr8ja1d/fA7cXW3b09VIw6cDqYU60R
2A7yx93uomL7C2nn9osf4MlzfQbBdiryfNYwr/Q5BtQ/HhfSflGx6e+P10ox
nyET8kp1muj4bkyttoj/gj2hf2U76qm4tHDVOvlxH1T1/PfQuYaKTC9cdqYn
DMFJpTNjXFVU3NK199/+5AEY9I44klxGxbSybd+pezvhRvP3jD0lVCTWjKyj
P1YAwxYmgeYiKhYaHfC12PcEQm5pOl8tpOIBue1KOBILEt8dm1k/UdE53zSy
zes7pEq+Vn+RQ0XrgzTqodEuUL3aHa2WRcX4XQaPXx2g+7lI5F/dOypmCi4Z
19cPgTG/0TnbNCo2lvju8zfog64LvsUMqVQsUJso0mNpBrvsz7RnSVRUrfAb
qpj/BIsscz47E6g4IKX7fDvBA75m24crY6noP/MprfxbHgi+vnjwQjQVTXpG
9jQc+Qnxy9FvlyOpeJ/JXk1dsg8UDjfwhIdT8dnJBxsuMwxDYSy7o1wonf9t
DEmHawfBYGJvY0kQFRnH5VhOU7qhea+bisVDKr4JuP4u/0UNWIVlRM360PE3
hvyk8b2kf7+DS0FedPxhm9Lf+T0GDxVpi/88qHjtvY8e40w5cPmd+PLZnYqB
cltFLU52QnRLENnUjYoKTRfkVGQHYcu2Uq+/zlSUf+q5KzxsGHLcV/p9Ham4
l2R8/VJmP2jX7NKTuUrFRdZV9k/LLVAvfeV13hUqCoUz3jUrQzhzPYHT+BIV
ox2P8B8lWcNocYvD8EUqcjWq2CSbZ4GbIF/9fUsqhrnYiwRfawQWa71dYmeo
6GM07zgR3AsNZ3eajZ2iYtzHEEux0W6IOylx57MpFUUdKvgMT9L1Ozzx7bwx
FZPyrRSbBH4Bo27rqNIRKtaTWopUnBqhlijhZT1IxX3c9nfrOuogWiNduUWX
imp3PqR+VK0EG6WoU290qJj87IE1i2gJ7JL3vHdnLxXRoCHKUa8A1mTtEg33
UJEtZ/uFy9PvoYp8ooKsSffTQFmnVG0SRIkTf6ZVqZib/6g0SDccrEhbBb4p
UdHzQfP+7+o3YQePoFrUDrpffbcfDEtlhtWN/05flqei8umP1A4uB6jYMHR/
9zYqmkb856RF/39GrNQnc2+mIi3KU8nP6yVYzuVX/aZRUSPUKVQhIBO2TyRN
vCdT8cn99pK7uZ9gaTiE5C1FRY+gT9tvHfwKZb1uGqbiVLzz4oeH6c0KCOu4
cHaLCBWtXMROqWvWwbZ61dRqPipGVKub+P9rhvlKck0cN70ejDPOdDe0wdcS
junrHFS8EHjAvyWpC0I+zwrrbKTH/1egJa3YA6fzunYLMVPxYLvGjW1zvbDl
fYXlEAMV7x3icH8b3Q+zb7J8Pv2j4IfiCOlrwoOASTFvApcpeE3qkjXZcgiC
4nzrzixQMGX0ePn968Nw8un1WcVZCoY8X70ftG8ENoWZizFOUbDSQVM6rnYE
JgP3Q9MfCs71OTg/JI3CZx+FiymjFNTm0rz+jn8UAjxE/d2GKJj87aMeU9kI
mN5iTD/YT8FJibkfQkojQL0x/kOyh4LFot1zTBbD8Ne+ef5vJwUtLpUetzsw
BPk2KFHcRsHMR9Y+xnMD4Gv5Zm/4LwoWWl+2WnPqBxPzCGvrJgrON5jIdZX1
gszxewFqPyi4J+bAFoPlbhg/YpvBXkvBg/FC294odMFHPZOm9ioKsseonlA/
2gbGu2Wl75dScMIvTHIipQEkVfh0TIopGDP3sW2KoxaGFZYvbfpCQf8Hr0ZC
95dD9pb+oPl8Ch7iP+rsQCkGT2rt+4o8Cp4t6r7q9zAPDCU/NkdnU1BUPjfO
QDUdxIVfrti/pyBfeOruoxlxMMgbRCbeUXD5Na+F539+kMXucoA/jYK5IvFN
Nnkn4R6T5ZW+VxRcu781yvf6ITj4z+BRThIF+zJ3tpZSHoDwglK2XwIF3dRb
bFe9n0PvpFTrqTg6vx5Jmu8V0uDd6MY1uecUVFV49+rSxVy43T9FXYuiIHe+
/an9gQi6Xe169RH0ddQKn39BGQi2fLN/+ZiOb8LxZW98DaBcgr93yP/5C+zn
YWkFe487STaBFIx0eqXL8b0HxBrNUN+fgj09KaHJNwehTFapY5sPBd29F7uj
a0bgxm2eRS4ven6NroH/jMeAXDsiOHGPgkZvfh7yKx2FGso3xR/uFNwv93tX
mdYw3L4Zf+iDGwWV+/7bqi7RD5sr3S89uUk/3zeg7breCU2SZg9cnSjYfff+
MtP5RvC8vuvFqWsUXDD79NdvsgQUSrkLdttT0OZx0vPJpNfQLjLSLHWZgifj
Z/2I/nPgb1c6vW5NwQvDZ4FqEQ4qRS94ei9QUK6B7Gmt/Ql6Bdy3lZ6joFDq
jQivMzWQdWTH8IA8BQdWJ1JCRWrgXAInc8U2CuoYCQUOirYC19ygzJvNFHyR
FbEqK9oLn/S/7g7aREGH7wfKfggMgU1MrNlVCgVHJvUDkwtGQXDS7YaxNAUj
tO4cd/ceB9Q5/miXBAX/eTsrPNg8Dg5RimkkUQo2Swqf5c4aAfExjvJ5EgU3
nvzm+dVrAMphsLeFn4KMER0PfXd3g3NY8Vo+DwVdA6Qo2iY/gTIYIx7LScGC
C73dRo/LoFbDTdWDjYK7H38YSOPLAPfgYybnWeh8lCXXix25Dlt6FK7qMFKw
rarHTGcgBH4qcwT8t07Gg/dUk/Ky88DLfyB54yoZDztvfMhUVw2KHVg8skhG
to/9Y/aUVuhQjOn8PkdGJjWjXFaiFx4+cF1KnybjE3fT8eMXh0D1l4lQ6AQZ
zzEqZgWrjkHfNoWdTuNkLKNNXqZs+gOh99iPHB8ho/TMLoX07nHY09BvqzpI
xhSvzsDYm6Mw+h96i/aRMer4zVvr9P416tbz+OXfZNz34i1jUm837K9xKezo
IGNExzF+w9PNMEU2afnSSkZbm95h8dVyiHOWn41vJuMlp/p9Bmzv4VAFG9+D
RjIKy1+K21ByExYl+uWs68kYnvWRMUAxEJKvFenp1ZCxY9VZUX80F0xKoi9u
rSKj08nZjh8PqmFTU39XeRkd/1GPUzd2J8B8v4K5TQkZq89LmB6PfAQVc24/
mZGO/3PDk9LAMnjGWmKcWEjGq5yqnaMrHXBFhLt63ycyspRJeTE/HgKtLWZ6
3TlkNCJFib/d/wd4NBK+3ssiY9eGe9u1T/yBboOxPVIZZLw24xnCnj8EWeYq
nwrSyLjFW7tw6ngnPLDzUDZPJaNYgeW+oytlcPxOZcZiEhkd2M3rrniGgmyw
oFxUAhldg46btyskwGLsmRSVODJ+yJDrzx6qhqp3ryhN0WR8kXrQY4w+X8QU
TcU4RZFxxYPWUHRhBBzqd4vyR5DRxj8x0Uf1L0CPT3hGKBm5vyldmpH+A3zT
dTyGwWSkuHwIeOk/CL2M4gHjD8k4u5EU+0WqDbIFrVgCfckYJBZpf6ahGHw3
vbu/9QEZBwbvcd8KvgFmKosr5R5kLGB4bswr/g626Gq72twh46baA6VTCz9g
2TRomvkWGWXVLrmbpvVC9aVmh8SbZCQcZCR0Jccgzo08ss+JjA1eLAHh83/h
+sMrVt1X6XpUaXZ7vx+HfdHZv+/ZkbGOr/OK+s4BEEhbM5eyJeNjLfO2XR3N
0F+g31xgRcZcD6FvCrr5kFsddtT8PBk33Cl4bntJHPw7O6oXz5DRtLHOtupo
Hpj/ldWPMicjmYPNI6ryJ2xfv16iYkbPb2P7q/DqfljjLYCmY2Tsxzt1kDcO
dWSWfCdjut433ucbe05A/E4jFf4jZPxW0OHznnscnLSfZWYYkLFZQ8bO+2Mf
7D/WJ2eoS0bnc4XMvHGNIGwl/2pcm4z7n4wPxXFnwbCzKzWQIOPGsvkFlXtW
8MmnOHarFhkVpv/qpb9DCIjkFKtQJ2Mq692h7q5WsHh1IsJGhYwvL23sKBwb
BIWPL3hZdpHxnyvLtzD5v8BQORKQqED3l/VZjoHGCWhoVWLVliPjV7XlD2wq
Y5A4etezezMZT1863j5E6wXnlfLVe5vIGOeez+jrWA+6XAJuUhQy/mGtXg8x
TQFRKYuZAikyuj/UvXd9+0MYlU+5ai5OxgXFEyEWoWVQCJMji8J0fxQ8Pv1y
excEG2laRwmSsf4A+82iDSNw1tK7W4WPjLTbsT7etyZgh2Pt6SYuMib7L+1X
GZ8ARi/RX07sZLyRrZkwsXUUmsIumPCz0vU5fcb4LH0+S0l8W5PBSMbuWqMP
ElVV8Nf2z+OYNRns5Xyivb4jCh4HePq3LsigcLxfmKBtHCi/FfIQnpLB1jtK
yxSdGmipeX3z2KgMHqvi+KF7rAfcJ/bYh/bJ4OXXvC+dN45BzHm14b2dMrjp
q4ehYMEQFDbusJpqlsHylA7Dwxv6ofPAtu6Eehk0VvHaZcHfDWt5NAuTKhkk
dYzOPz/UAjLbpFoYS2Ww/fLlf8rT9bA3Rvj4h88yqJjIHSjK/g3O8/DVX8yT
QbeqgZ9uwTngdZ/9MOm9DKrxXC10Ko+FxGnGitI3Msg7+01ilv8ilFqt6txM
kkEPFTnH6DUXGGieK/ovjh4vnjv13EgisBpM7G6OksFHa2ddR95/gs0Fw3m+
j2XQ9I0kc3JfOejL9yqpBcogfunzvvm5AS6/aM8Y8pbBC1mxag/s2yCA/6fc
03syyPn6aclRvR5Ie1D7St9NBlMVrFb2mA5A9Vw5bclRBtdhmcdg8wj8uVT8
4rWdDMIlzRJxr3HgacuXMLeWQZmkozosKhOgeDg7iuOcDCpJZ6rPBU6C8Zd0
wYKTMri5VWr24MYpcNzx6pGdiQxy7z6prMwyBWEv4zklD8vgrwGxnFifSfhA
ivarPiCDKsDAdE1mApp8w5nuEjK4wkSkky+Ow9xikIe8hgz2TJ7pfrI2DMJ2
viudu2Qw+0GN4RRtANQ6PVxDtsugq/G2rce5euCk0a0ZkJVBjRteA9tGWuFW
sdO1CRkZLGBjdPBQaoBoJfuxF2Iy+GfGLZ7WXAYFydaXjAXp/rhdN/btVx50
iJzrY+CWwb4TCZdmVRPg38OT596zyqBW/JgRWd0epFePtp9nkMH9CkZw9JIT
EFcPmQksS6MI0769TV30eaF7f+PXGWm863bhWO6hT+BpAkY3/kjj/qj/RP+M
l8PLUrXvtCFpVE6oPio51wAlqjv1mrqlcS6eS09+pA36U7eVeLdJ4+inoafq
GT3AIrGJUGmSRoEym0C78QF6/ZcqGKiRxlMOR6xq/4yA3rqwWmS5NCZJ7z6o
4/YHbB35PugWS6NN0gpnhtwk+PexKy7kS+MHnVItjR1T8PoEU9qrbGlMfmfD
G5A/BVXlq7In30ljpvS3YsevUzCqMf+SLVUaP8a2bdTVmwLOtxPSnxKkMSKn
UHTaaBK2S49EX34ujbK3Qrq2//wDR0J7hcWfSONXR+2h22ajcJWxI6wqRBp/
HSyZtjQfhMzB2gA5L2l8mPSCVyq5HX6crGDtcJfGgXChv1nBjTBdVewVdFMa
dSr3PciprADBPQVrWtekkeoYG694Kh+UM7Jv/7GVRtMMoetX6hPhBOXdfOwF
aRTX6X0MjTfAJfyVk6GFNLZmaBVlH7WHKJaEv2snpDGtdImxrS4BPrpGX8kw
ksZGkZDp+e6PQLVyTG7Rl8Y/e08fTWX3g2Bj/e4N2nS+iv5jTPerh0UtGQm5
3dL4rNyua5/CIFzYOn/iuLI0Shm5p0VPTEK1UE3oXXlpjL98sKx11zSoMiZ9
T5Gl6+PDpzu0Zxzi/95mrZeRRst7apeu3OoAzvaj+5ZEpdHivJ316YwcOAvs
ojq9UpjcHp96JCULKrZ1m9i3S+E2zwPqH3Kfwi6RvOAnTVJ46v41rYGeRohh
Cqn4UiOFzLG9K4GOw7Bx0oppuEwK75qKTNW0TIFTx27gRymsITiV93hOQ0eF
wC3NT1L4pyhU/VfUGOjmjHy4mCWFlYeCzI5wt0FmAv4NSpPCSRPLDzzhGcDE
4vat2VkKjedPH0zQeANXpwwZGK5KoeeVKbOA9GRo6fxv99ZLUrij+eynsMe/
QLtq9aaJpRSOqPe2dFaMwtvcxkz3U1LYHOPreaNwGoQT34wlmUjh50rGIZ+i
afB85Clbe4iOj73tmnDjKIy7nzy/sF8Kbcnkze5hv8DUVjGGDFIo2kBhWtdL
htTvg05XNkqh48mAyj/f4kHg4+f0cAYpVI9kC5CdyoS7SRHDhUuSmG5yn780
sh2GQ+1og9OSKGruPfp75x8wuat9lndcEjXlye0rT2eg8LLYM/UBScxY32NZ
MT4NsqaTjee7JLFAgZPXenIEQrXLeQJ/SWJ+1XrhDt6fsKIQZ5BdL4mPU+Ub
o1yegY3ETe/OSklsliXTOB9lQ/3Gw0WsJZKY1f7syNFPnaA5S11WLJREk2yF
HHX7v5DUvaR8KkcS2/JFYoWZZ4Gnpv6a1ztJ7LUSdy1ZnYZbn169SXsliUL6
tHaq8wj0J98baIqXRLHvj3+5VDeCYdgJ8tozSeQq/lwraRkGt3fxGuiFS+JO
vacZBWdfQEpDhWNokCR6vjuTyuFSDQ1OXtGtPpLI8eK1zma1HlgT0Cqhekii
uJ3EnuhT47Dtw9yYnZskHkiyDZdNnAbTYxmkHEdJvNtqtRiXOQteM7Z71q5I
ooj7qRdB+TOQHk610bOSxA/1HKeDNk5Ci1JHSOgZSfya7FlgajYAzE1P8lpN
JXGty6//Wk8T7HA26qYaS+JJ3cWIly7ZYEFiZ7c3kMTE/WHjvO764J/9dWeO
tiTmmLPf+9FXCNnH75iv7ZbE6NiQ+sTnLdA9q/JAT0USbYzOifpFDgHXk4m0
UAV6/tT+fGWRKVBXed3UulkSX5POzM3dmwWrnxf+USmS2PDfDDAxzUHoTUlZ
e3FJlFQ85GDvPg2FQs2GOYKSaFp4aEuq/hgM5zxyXeOSxCC7B5ldcb+BZGoQ
r8cqiVH3BCzX48th7zxjZei6BPbr7bQZc3gEdpGFU62LEijV6NtoV/8SIlVd
xGnTEnhflXjxV6EOvjYr6tiPSSCj3sTe20698NdlxC6nXwKzNW4mLrL/BXGR
xIi1TglUybaL/0z3n26exWe9XxJ4rkvR7FfsHDiZCQ+G1ksgaymRsOg+C3EL
dTxtlRIYZbg3zNV3EqqiHqrRSiSw9qb8+ovKAZhX07G0L5TA6hvbuspnmoDa
suqfkyOBDDXqdWEPPoChW+77tXcS+Eu929Lgw2m4LXq9TS9VAoPFQp+gCkLK
x61MjxMkMO2yq13FszZoONkn1xYtgRJJ/xVekhmBtcWY47QICVR8u0v9GMc0
bH1metc+WAIj/JbXO+7MwXENvpQcXwmMrVpICOmfg/utlbVrHhIYN+hmm0qZ
gbe3Hizo3ZLA49ysnPJM49Aitof82EkCuzIuZDhs7Abm/Hn9NjsJNOppgWuG
5bDDPNORZi2Bx7iG9p4wCgCL5cvR9mcl8NuRmDbJ8yngH00ryTGTwJ+y5zco
CP6AbM3OsTVjCXS8mqAuVNYH3W2RJP2DEnj3HtevLy0TwOVuvOexjgT+N/BG
/HrcLKhLcNi0adH181jJT3o2D1YFJSE0VQncEBKnelOf7pfTd/PsFSUw4FN+
7TznFBSuqHbnbJHAA5V6dRV7B2H4+STbOkUCy2+IWoaz/ASS1pud+hISOGY/
ZRkVkAV7Oy6aPyZJIO+q7qovXAb7O1IP2rgl8GwSSc12y1d4KvkrjbZRAsX+
Wzbn+9oBpYWhTfYMEvj3HZVy4tsoTFoc/JezJI6Z6fPO4jwzIPmPSXZ9Whyn
PsbPCwTOg17sZ0P9cXE0T1NredM4D5PBHavMg+L42S/jchZlAaLvrbwp/i2O
XzVn1ie3zIPONfFT91rFUSdLjTCn15vxcxobdzeKo78x9y2FyUmIND6Zs1BN
P3+ecajddxSIfa4Xs8vE8dp7i7wX1b0wvDOS3xHFMfYv5SZF4heEUXOK5PPF
cdBB4zXHxTLQEmxyGP0gjl9c9MreRb2GAaYZiVfp4rhwV/9Vm+VeCJnlr7r4
Shxfi3kVlj2KB/WBHW7kBHHcdx5Yv+3+Cr0/jWQ7o+n5CbMYnLZrgsCyq03P
IsSx8MVfdi3LHlDOC/YyDRHHOtFKM6ruCHS9ertD0F8cO9ydv+R40/uXp9+7
6jzFcci98FT40AzsfDgaFOQujg9qcpWa7Oah7Rb7boOb4khy2Rbwt3IBvK9s
GWG5Rs8/aszlVdsCKJzWi/pqK47iVrFPHj6fh1+HbA54XKDHl70bfURxFu5r
+czsthDHXVqp9v+1TcI2+aSExRPiKHFGrjl2dgSapEqMcozEUV6FO/X2Sg/c
5en952ggjhqFSnp/zX6C7DrDWwUdcWQpXdAcsSiB+gkZ8zEtcTRV/Ki/9fhL
uN0NbKmq4hjutH8hmbYTaD/O5FrtoK9bZWaeSr2G6uI7VpRt4sj7stJjPaMM
XLKeC3TRxNHheOhLAfwF5MR8jJYSx72agYIOnn1QGd561UxEHJsWjtT654+B
k/eiJIlfHO1vjLvxNUyB5E2R7/UcdH8VLWneVJyDMmvVW8HM4jghN84tG7kA
10xPbD64JoYWE58vVBcvgqie80/WRTEMZVbszwpdhK9q4Q9KpsTw4zflyy83
LoD9lqyd98fEUGvwkbfH0VkQEvvxW2tADAV7r9/NyJ+EL+yTwUtdYlhquMPY
9+gI2C7zaOW2iKFhj/6leOkeEBiTH3VqEMMV462SlUGNUNB++KlitRiaaTce
6LRHsKq20x3/JoZxub8Kl0SfAs/ngNnUIjFkmo7uNfh6GT6mv35p/UkMyWzv
kqQH3sP5uApj6gcx3B4dTlSVfAeOR0NrXW/FcKfw/X0Xr7RDtgdr+vMUMaz4
zhk8WT0AZ6//d/pkvBhGXuuxuXbiL2w8v59dKFoMExjlQg4qzkDm0Yt5P8LF
MKCG62Ch1zyYa3tZhwSLodWByeWyskVgVkoQPOQnhjc9akOb85cgnYbFGz3p
+AcDkg7rLIEp6fe10ttiKMK/4+MH+wVgYFmT8nQWQ1m1CpUHV2bhzZxk9Z6r
Ylh2MLkm7PEkHBvcfXv5khim0ewfvI0dhtVm8y1558Vwsc1sT6Uqfd4tv9V8
4zSdjxqq/tXCH/Bsl4vO6+NiKBHzjVUicASCYp0yu46IYcl2JXY5gznwYLsm
RdITww8+j74LMSyD0w27AIO9Ypj4rOnm/IdFsO66tHBPQwx/yGqn6PybgpMG
VlbZu+j7+g5B7/71wMFsyx8jcmLI/HGF99bGItgjcwZk/hPDKvd0Rn6WB7Aj
4FTacWkx7H8jKpDz7wdQ506IBojQ9RUzr29YGgEhSxOfIj4xrJG/d78zbQ7Y
vhtOz7KL4bjfRm/le8uwonLo3DYmMSz/3Z6Yt2MJ/sbrVZ9bFcWjdQb2dhbT
0MO5X+PJnCha/RPxnrzYC00ue1Oq/orizZCa5MGOIijv0RJkGBbFa69a9NZa
vCD/sMZ9lR5RNI9XSMve2wDpeSp/rrSJ4tXAJuUYu1GIp+4yj28URe6jdeIW
/PMQHqxQ/rNaFFfY7jXNri+D7+I2Zc4yUWxG5Xyp90vgdnFzwt4iUez5kN9r
82Ua7GppPC4fRXHIdByO1vTCWQ2ye9p7UXxi/ubrWwsE4yTJ4e43olgVwq6k
89YLdHjFTggniaJ/7vHrd30aQPW20NdDsaKo+bB265PuUdg6wK/oGSmKZfsi
3L/emgdJY56Y3EeiOMkXPnrbZwV4CzjYx/1F8TrvG8MjKsvAKLvRheIliidY
9r0xoc3AXChTn6m7KB7aJYiTGn0wvLJuFOQsihdMTpNCahHabVYLix1E0W9r
nVvHPS+o/bG4dcFGFOtLjXzJ1Q1QrDUXud1SFEukdcQ6T45B9qsppgunRPHM
Ged4+YF5SBH4ez3KRBQjxmILxnlW4dnd0c7qQ/T3444y+8/LEDQ8eJDxgCh+
OrFWdzhwBu4d68tTAzo/OY+SJ1/3geOX35sc1ERRoEPfHvYXg9XWjscvd4gi
U3NCYZmxF5hFtKz92iqKt0dsBzJIjXBwvcmOmyaKljHhCxFNY7Dnyo8WbUlR
DP09MFdwbAF2/Kw54CYkikWs3TJOMatA21uVlc4jiuMHUq4nGayAcFqZTN9G
UbQmbvY5z88Au3BJkOgGUXx7S2Kfs1Q/rN4vWjqyLIIPnTpnBj8Xw8RYgc2D
GRH06vgSukbxgl7Tj40fx0VwX89vazjXCE3F2Xv/Dogg6vOf/n1sHMq3v0+n
/RZBwfO7HIK/LUB+VLr4qRYRHCcnTCgr/IO3jG/8Qn6IoNBF7xTpthV44ZAy
W1IlgvJLjDzjVrMQ1vLy/FKJCLYOfs2Kj+gHH50XtQqfRXD76pOlLPr/0O3d
891WuSL4ap+2y/1pT7ATe5r6LEMEI8P0a36nNcJZ7wihulQRTCxQetLdPA61
xPxGt5d0vOHGe0Mch4BYMVsmx4jgqG/q4DaiFzJzP41XPhHBvNep5+zb2oDs
JPHb6ZEIlmtpSOoeboBQ+bs/JB6KoKwHj2UMUQYbRrpKSr1E8EyQS7HriVxw
Stqb63BHBNPOR4vYLsZC77mXqcIuIjhNUp8xf2UJJhLMz4uuiSCtstBs5x53
KGm2Dra9LII/d6b2L4qlgHJYuQf/RRF0rGrlCzxSCElHtjrlW4ggp95a/gbX
KiCxB1pdNKXzm3IhPo/9J/iUjptyGYuggKO+4Zc9XTDvYWiQYyCCZnLldh4H
+sFmd+buszoiWC3I9jO4ZgSa5/kVNu4RwSdTSco2/hOgl3WDnKkqgutK1459
eTkNHx1+CpzaIYIR18ffrl2egy1b1VgYt4mgVdhRHXXGRXja/3ThDU0EXRP0
9207sQzs8csjx6REUMEnk6PecBVun7boWBWm43NvWePt+gejwl9qk/lEMDu2
u/Po3BqYN8gUG3KIYLHukdSFgHX4Huz5YYGJrr+2WkX2s3XQMuhLjv8njFIV
M9eRvA5vmQ88NVgQxrmUXad7aGsgiSkB05PCOHxs4YhJ2ioEu7PdfT4qjPYm
7ir3S5ZhTfXKtf39wrjdMqUp8c4iXJ3+fv5PpzDGD+48pTk6B13p8scjfwlj
xCOp3eepM2B0+ZEu8UMYr8svfhffMwm4aUp9uEoYOV/LmDC9GoUd3SZyj0uF
kfzqQUHfv36If54tpflFGI+OPw8usPwN/GbCfH15wviv33iPWttP8BJwYwx6
L4xFBv6SZre+w3RN66xymjDeVoyoE9L5DBce7h7qTBJGHaq5n5tfCjTuj231
jaPjn7bV2N1wC/YzrH9XfCqM/HmCrA+FbSC7wPJLy2NhPC6a3nFoWwJscv2a
6RkojO5cSb9shT7Bk12bErf5CONPrrrbXK0VwPrX50njPWH0z8n4YHG5CVxe
D/ndcRNG6zfrMVeWO2HQyuD2f07CWM3GJ6Jg2w9m5DT7WjthTMkcXjqkPwrq
UVePks8J4+PGDyc6jGYg1aRep/KkMLJlWu9WNpsHMZ5dqk4mwthF6pTYu2sJ
AirDt0gcFkYXjVXaw4oVWPaeEy89IIzas78GqpnW4MpeM24Hgh4v67VrUf06
tK98XBfSEMaQTU2ubY8YiMN54tNfdgmjzwEptchpBqLQ6U7/pe3C+Inz5YwE
9wZiu0JXM5+sMC4uhHmd7WIgYkeIyk8ywlg7bGBddomB4ElOKLggJow0s6RF
Y/N1uGfJ9I5TUBhNj35LNbr8DzLr9EKauIRx36HK919OLEAvBF2NZRXGoFIX
R2baJJDe1RvaMAhj4DkhoXTNXtCVElJUXBbC/0QiPAmTanALOsW7OCOE9r+G
rYMePoc3K7ET+EcIndVflLCpREHHld66h0NCeLJ6i+zpuSrgaZPNNOkRwl1u
qvr5HT2w18AuVKJdCIP39Wgb802C08eM6/1NQvjoYK+AtccCJG2eNU6vFcLU
dlnNLUP/oDlSfadLhRB6X/8m6cO3gWBjvctPfBXCRuWXPDXZGwjNm8VTGwuF
kEfKKlPgKwNh38/SUJ8jhPnFigeJslWIO3Yw61kG/fxS7DAD+zzUfw0Ju/Ba
CGl1nM+EWf4A465GJ7lEIdTobOq+pdkFygkix2ZjhNCCnbnPzLMEbPgslD5H
CuHPlyvOooKu8NQjXtA3VAgrj4sf9gt/B1V/+2cMA4SwZGxzVd+zRlg9s7VJ
xFsI10b1MiPdBkGhxiG7+64QSk1dC8bmabDUyop47SqEFZvr71aaL0NY2ryz
k6MQZuvwdAypMRCl4rtP7LYTwk8DSdrdaxuI+YceKszWQnj/ZPutHkVGYstS
iVDNWSF0S2ezUSlmIMxt2eafnBTCd+Fi091DKxD063DzWRO6XlzV+rTHs1Ck
+zh382EhdF/NPPgmfgSmc35GTh4Qws9nr/iv7GiBTf+Ju34ihHD22emEudU8
MI04a+alIYRtpPT1K3ZK4M+UqHZISQhrD3nUC737DPlOQyIkefr5q3dOfJxr
g/EeucUOWSEM9wg284seA+mj11uSyULI4G7t6lw5B8aY/fGquBAO/K2y5T7w
D7wUl56qkYTQ64xi6kHnDUR23J5bDDxCGEuvx/9+MRKD3F6nKjcKoVz7KePB
IEZC9G6ZRtgGIVQc4K8KesFAHBznED+9QsK/Bd+r3tYtw53TRsu0OfoaJ/yE
Z6bhXVV42/hfEmaKXdvBuWUQujVa8nOGSSjlF2u1424DCLyWfH6vl4TJVir1
IbqpsF/0vLteBwnrvliQOFYfgotf8mm+ZhLa5HcEv0+ogNT5kd2tdSRsCtQX
l6jsgTZrBcmXlSQsc00QjY+bBK6fTqtXSkiozaq2423vIsD+vA6lzyS8mC4R
qynBQFz/sFK4mkvCE5rt7HFJjMRL6t7Yb5kkDLh286b+Uyai6bH33ZA3JBTQ
ZfTxrGQkWDdUnjFLIuGLcxalzhYMhPp1biDHkXAyMUiNfH8Jrvw+Kj0SRcKR
sprfVcpTEGMYufb+MQn5W9O3S73thdrPbV23A0m4y4a/MjmgChjkZYp0fEjY
7tHNzigRCneE9531uUdCl6bt4SFKzbCwfuFfmSsJp6jDPp830L/HEe8YNkcS
opbdAdXpFfjbkLL74BUSRuy7d6spjJG4XFjRFniRztcjh+3xcsxEf/LorRoL
Ev73ajjGeQcjYfmIS4zXlIQbfwUYfElZhnY3hY/GRiTsSfEMu6H2B0wvGJuF
6ZMwdCRj95mtDdBwyGm+cR8J5YTeF4R3OMARlYgnQrtJ+HWcKxqvlUGFdK6y
mTIJNd6Gvs/LG4L9bC2NT+VJKLQumXyUexGKppac2mRJyH1X++LdAHo9aJcQ
kCSTsOoBI/9Pb2Yit3TP+zNiJBQcnnr2cICJ2PXunPELARKaRkr8rP+2DulR
nhPdnHR9V+zCdtTPwBbPxBAqCwmLTjrcpJl2Q9KVb/JWa4LYNJAqKL0xE8jH
h6qTFwSRb8DjezJjOjzfw24/NCmIZ+qPOAkM/AbhzXKcW0cFsaDd5yq1aAbC
+I68udIniF3aU9tcOej1efmqwdsOQUxMY5YNMmQmHvaFDv/5KYhVTKUmOptZ
COaaLD/FOkH0ZzjN53CAkbif2yTrWCGI4Y2OznzmS7DyYv5bVrEgMqxV8xhc
GQGXh6LWs/mCyOPCInxwoQKmnTSZVbMF0W6f5pEjvy+Cg4VFomu6IKZH748y
d26A4QP3tD+lCGL9hssuKyF/wUoxvmf5BX0/QEju0qFV+C369b7WM0E8nPTK
YtmPiTBn7Je5FyaIN/TiFo73sBDNYyxFRYGCePV19pYj5szE0Z+bz27wEcTp
0Gzvt/NrUP3F4J/2PUHcj8c/Ga9OgX6qXYy3qyDy84wIs4S1Qunj4N1l1wUx
IFZleTj+CRDuGW0br9D587iRVK+GkG/145bBRUHccmbQ9lnLAKgazogGWgii
PWv80+9jC5ClJvSx+oQg3grJaLuizkjIU9TMeIwE8c7NGM9/LKxEKsepeSN9
Qcx96PMynImV2DR7+8njfYK4w4lf9h69fsZ3xig3agri08Nnl6rLF0Ci/Esj
SVkQVQ8IvNNwGYDIzG4nU3lBfB4l5Te95QsIRDMKPJUVRLftkdEGv59D8INN
71tlBPHRJ51T5i3twOagaywhJohot0F/UXkGvE1tJywEBHHGwJvn8DUGYp0I
CInjFMRnnIqjmx6xELe3vpXvZqbrdbTFtmjzRmJeoLaasiaAztJOHfHJzITj
6oTdxQUB7E4TsM5q+gfjA/ycyZMCWP6dIejY0gTY1im9GRwRwKaCk6N5VQ3Q
9/GEwZY+AVT7s/r0pLcJnH3pOny5QwCbubXjC8/XQFvgM7+0nwJ463Tv+mzH
ODR+I7+1rBOgz3+jjFIfe6B6/VW9UKUATrc1alSE/IBvGopzVV8F8Okh3kej
Mznw5Uau2P1CAVw5fKwu+vJlyEvfAyq5Avi5W/jPJ7kEyBwqvTCaIYDFAxbS
m93L4DXlsN+L1wL4nnd10rqlDV6ebkw7niiAhec8lrJGhuD5E/N69lgBVJxx
4726ZRoi6npmv0QK4IKCyO+bbYsQzH5ZzDlUAA83tM0b0vthX53JPVsDBFBQ
9JTBlXZGwuOu64WuBwKIQ5t4xZ1ZCLe8Nd/wuwK4pZZ9IshiI+E45ZOm7yqA
oSozpXuvsRFX5Ljr/10XQAbK0omKSDbionXEbNYVAUy1e8nwoG4jYfFCQszW
SgDlillrVjazEidaX+6ROiuAd+xzKgaLmAhDwW0XGswEMC38mXvtNwZC78h7
X7+jAqh8wadDY2gZ9vqpp2kdEsDh14ZO3qRZ0CguqpvaL4D1ppkfdiiNwa4V
3dkUEMBHtZ++XGv7DXIqtaIW6gKosJN0Pf13NWy6dmIP/y76eiG2u0f5LUi9
7jhfJieAXy4ebe8plgLhvou+7v8J4LGgX+J7fmUCr9TYmx0yAljrsb9RtbgO
2Myc6gZEBdBz0l1BR6QHGB8vzUQLCOCOtSjP5P5xWKm6L2rMRdfnrY/4Ga05
mGVm28PCKoA8mrtzFi6twl94dD5/nZ/Ox5EXz3M2EENuwr7XlvhR2/xi5b7f
zER3VuybTTP8eHffoJHrjY1E6/imutZxfkw/YOn0g2AnGmTfzoQM8qNecZBq
C5mD+G6pJLq/mx9btG4s1DJzEKXR+VpLrfx43rZ35+Y/bMTnpn3n3zXyY+Gh
2esef1mJXJ5Kn4s1/Cj0Q/jidkVmIkPf+I1oOT+OuQ6F2/QzEKlev2prkB+f
BrB+SYxZhoTCszNe+fy4IzLn23GbGYieHxBRz6bHizxEq7s0AuE7HLT+pPNj
WNaAbciWDgi6Mmv58hU/NmR1Dig1loFPkruPWQI/2oD2t7u34uBeF+Mbruf8
+DHRMvUohzu4igbUFkfwo8ivNmeLyEK4bsI/4xLCj/sE9m9yePkTLgc9Fdnu
z49lTDxuMfYDcKFMRqvHkx+Z419/XzKcgtMMrywj3el485JiT+QswnFNBZ9D
N/lR+vnlT53yDMQR55zXDNf40e9pfLb9LyZC951WbY4tPypm/ZJy5NtIEMMl
01cu8OPp+2FcO6PZCXXqIRGyBT9ajp9QmdbmJHZaNOz+eYIfi4OIc80jnMS2
yFOWAUb8SDraVOzsyUnQ6ru9CQN+ZBVi+77Cx0FIcti+ntXmR3stQ/GSDxuJ
s1+qg6ha/Hi1q5zqo8pFJDjtvG6swo/y6xeF3/KyE/2ykcfuKdD3v5w1Gehd
B9n2ZdW3m+n63NreJ2owBLaPzom3kfnxztlGG+4zcfBGp/TfRnF+PLQnaa3T
pAHGF7b0qAjyo+2iZcvDzjlQfBtcepGLHy8nVPFdf8BCOFlOv3rMwo9814//
eX6Ii8gmmQUWrfFhyndGQc4ITmK+ouDqnwU+vOE7XbizgIlQv0s2kZjiw4df
Jdsc2Kbh9k4fFYNRPqRo3GV5HFMKnwdGRF37+LBh68VY+fZPwBBtuJrUwYf6
M8SZ6pcToG344XfDTz68yd/6R6CKkfBmFC1hqOPD5eu1c48fcRLluXdSFCr4
cEuNfWSXEzfBYdfz0KKYD8fYf4hHXdpIHJbRdQjI58Mu0d3NSZeWIKTxjfHH
D3wY+IxrwPtqK/zw41UefMuHCfMneMQ+3geSlrMIKYUPJ2+zXZd+0A+mky3L
+17wYUzEfu8PZ9bhctia0HtbPtx9OFExp3gR3upeXOo6z4eNwTXTouUbib/L
5R1cp/lQgmKSnVXDQ+zI2I6ax/mQLO80VB/HTThdfJxoe4QPXbgqL21rZSay
ReZ9I3X58LPAH59cz2lY+G5+pZTgw2stPft3ln8FzftFR6bV+ZCb7JReRi6G
O8qbdpJ38aFOp/+32K3T8GXYn2Qox4dHGfNkb44yExti/yy4b+LDDTzTwXvk
eIj9R03aX0vxocMuTb+DNbyEL0vel1/CfNi7uPRyapCNqPgk8ZKFjw9DLSzn
/a8sA8fV+z5K7HyYeK9So7e6BQ5TB2zPM/LhLpbHRQ1Gj0E6Pfyp9AIv2qyZ
J3uwD0Oi0Jlzt0d4cdfEyNTP6A3Elnuyss3tvLhhgFVC7TUX8XZwYnxnLS8+
4Cx2ef+Ej9hp9OlDMPLikTMxEq2vuIjcPK/bI1m8OKrWHBUeTO//yIf3HUjm
RULz99mahCEo8hdiS4jiRb+5ijGXFwGwf6qrdvUhLyqZcxluYW+HylOpT07e
4cUrv4/xbyCtguFXR4vsq7wYeXChxfkkB9G4bTeN7zwvLvPuu9NWx0ecDGce
tTvGi3dYf0esDPASnSs1meUHeDF27eurShIrccEqypWmzotmKbFNc0wzMFht
CR7bePHAvV7uq78R7FS2sbRL8uI0Myn6jVkZOLF8euXCy4tP33g/PbdrDG7/
1DsowEh/P0+Fgts4fV5Kbh5Pn+XBhYdaI59+bCQCblo/MhjiwVEr11IxKV4i
7MDszoFWHow5afIk4w4/ES30oOl+NQ9ubzE+rqDET7wc4HeVLOJBxr7RBSFf
buJNTrzYx/c8KOQWJLbyhIXI8lEsPJbEgyr2u486whLkn/hydiKSB/00lNXt
Kvrg639HNgQ+5MG6mmOjDeXvoWquPVH2Dg8Grgn+W6j9AA3fruh+vcqDm+5c
0uN/0w9tT5aGz5znQcv7VXckZZeh19o/cOkYD3LNHMnwPsVKjKiIKDzR5UFy
cN6P1gQeYpIlpX6HBg9OxwyNRw3yE4s/lW9Uy/Hg19dPDP5qCxAMKSVCttJ0
/N5xP48f5iPYXEw+MvHzoBezxwgzMzvBp9tj/oKJBycySyMvO66DqPD1f5rz
3KjlrLmgcG0cyINrL5qHuVEngqVHLrYMtuQGazu1c2MSe39TYeJj2OErOcBd
y41Zl2//PafTCeqmaX6vkRv3CqgfW9eah72ymtsOfODGP20XmCvo/Zn+fEV1
dzI3WqkfNBJu5CaMy8yu3XnKjeRuL13GzQLEychBftFAbhy1e6H0RUWQsLS5
mf3hLjd+L7n05UItP3FJldnM6Do3bqc1j++J5CKusoYvjV7gxi2D5TX7aUyE
SzMlxvcEN76VjT0mZzUD91IygarPjTuZxlxcXv0EXxei57MmN77/rfF8Z/1e
CNGtfXBKnhtzf8o7rac0QKTwGdk5Gfr9ZENdysFpiBscqwgV4EZfctH0wmdG
IiX3tt12Fm58N8K80+c9F/HOl52nYoEL+/lyWyc0BYhc06eZF0e5kLfMYv9W
VhLxRXbzsfUOLvyh45HfoC1IlM3nzEXXcSFPj6JZDZmPqC3b/1T1Kxd2Ky40
fW5hJZojGzUbsrnwL9tzJSW7JeiyudDp8IoLG69QfbM6emBAdcqDPZoLuZW1
76QpJMA4631qchAXnisK2m8xXQKzzTzf9npw4RGCfay5YRxWU2IvdThyYT5X
xAerNAaC2XU7h5sVF9aMo346wUlw6RW8FTTjQoXgga1cZAGCJHLQKMOAC636
nsqtvSMRkkMtUwe1uPBPyl5D/kQSsSnvUsSgAhe+Ek7xnVrlJ7b7zat6Ubhw
x5WtGcd+cBDKZj6tUiQulL389qHpfwyE1mbSnU+sXHgx5aRKT/so7F94KX1i
iRPZzIUiZCyK4HD5zuLJMU48udD8/L/SdDgehReDujjxpf+eBuEbA2BxyYh1
yw9ODBc0oQ8Uq3BRrSu1pIQT+ZaMFti82AmbVDVT3TxO9NjOm50dtoG4IvaY
qfINJzoUFCtzmMyCQ8Bo5qE4TlTZvkrtlu2B6ys6Z2sfcyJ7C16WKfoIN+xj
OY/6cOLTXc+CPNNDwKVz/mOjGye+2pTOeCW8EW4ZGtuY2nPix9TtF1N7/8Cd
oteCrec4MaNuqiRU6B947GAqPn2ME/Xe/afDks9KeCVYXO3S5UTTttZdhyZ4
CB+BXInzmpw4nPbX/zSbIOH/gLeyT54TtQ8nvOoJFyICZ21dbCicmK0fdtG1
WJgIsf5KGyFxYoj3KaFNl4SJx80SP+zYONGzhI/98yMSEaF3897fFQ60GIl3
rrvFT0R9rJVznODAdWLrF24ZTiJ665bWmV4OXD50IUftPSMRG+3p69LMgYp3
WpRexM9BPGe70lIlB1Z1VF64oNsLiXeUe9w/c2DOq2N8VS75kPInOGQtkwM9
9RO1LvOEwpuzQ7s9kzjwQMN8XPCXJkiv2zvC9JQDr434iBZ8nIDMvdGRvoEc
uPpUv2W8fw2y38/osHtwoJ2LoBr7ZjYij3pkKtCJAzWPONc+deQj8sNT4nhs
OHDUcnDAaw+J+MzMcPjxKQ6038/EwTgrTODNU0uCRzhw/pvE3ZuqokTJYFZK
5F4OlDe1cpr9JUKUmXEdF1PmwETeg25f+4SIygrrDTGbOfDGRYEVpRgBolqj
6J20BAda2r3/oNLPRdS9EbVI4OHAJr3zZ96OMRENEk7smxg5kCjWf7HKuwA/
g77npsyxo5NgacwBrz5o+bfJausIO06KxNd+Ny+Ejqv3+N92sCODkwLnzeZQ
+P371xeFenace/V6y3XWZug13mn/voQdlVp/iOzumoTB4gAx5Tx2PDKZzv7t
OgMxsqu/LPcNO94avj38K4+dGE/c46wRx47zQwdP0bz5iQlSFKXwMTtWnZU8
uv2xEDHtM1kLPuyoK2MXseIiSszNG9wpdmPH3d8Eil3rxYjFS4lb99uzYyRn
brObgxix0rLaXHaOHXMG5TtyT4kQawam3gbH2JFtTvfM63ZBYkNBxs5qXfp+
ZOd4ZzMPwbyd/behJjuK73Q0+nGAhdgYeyHohzw7XumVbgpIWgQOnkKN4xR2
DFValD3X1Q88HkJDzSR2tI/PCFRy/AL8k1cjTrGxo1qp4em1zMdAOl+xr2OF
DY31z58eufoLRBsoE2cn2JAU1/nf+tIUSOi4x/T0sqG39rnwr/4bCOnsJgOr
ZjYs5H8Zd9CRk6D8p7AwWMmGW0yMzsZkCRCbIv2SLn9mQ5F3N6w9NooQmzf2
HB3PpN9fTNsVShEntrlprl9NYkPl/ELWRxESBHYabuuLZEOpmb4scz5RwlTn
4gmzh2x4op7tmtEOPmI81fX+d/f/NVzl8VQmUPTt75F963n2rexLFMJ3NVEy
GQlRiTSkjbShIku2VKJsWSYakyVJssb0XZJGC6WNIkTIEgkpvMaf969zf+f8
7rnncHBQMlWPWLGUB0Qu3IQADvocScr/ebad4B7PfXN3NwdnbavOM8fqidLO
CqqmMwebjzyLtdSbJWygRTfbloN+J2T6ZMqFoDO/203MjIM9X4NuFOovhwDB
qahobQ52ZTrs9tgqD4xAVumcPAeNjKtvPb0iB5mveZ2HRDl4yD998ayVNBha
GDD6qBx82/HkIDnDhubc9Qau02zkBvMvRHeOEx4s9x0tg2xsKeb0Xo6IJKYO
Hoqx6mSjSdxoXL/pABH/IqLszhM25l3IrvgRzABF09T3GvfZeO5i+e2705JQ
kV3EyixjY0HcuRP3s+TAnnbfSORvNvLHUnL3fVOAXr92j6hUNg64VSB7ThaC
ng3GzcaxMWpvet1eZ3EQMp4vP3CKjWGneXIuNXzieobohw+H2Lgvv+rV3J52
wpSvJuDsxcbvWf8WVUk3Ek//NDN55MTGK5TYQ48EfhB7WjZ7Wdiw8d5IX+TL
p6Iwp++dcHsNG3d8TOv9cVwWElNOVKppsXFOpyCCGFQE9Z/netPl2PjOwtnl
z2EFuOf11zIhETZervjn9EiPDGx5WL4mgrLER9Ib0ZpYARjUfuQ9PcXCxQqu
3Ku5L0Ro0vsL+z6xsPJtYc+/rscJidmJ6q63LMy3uphW5D1EFO5k9G95zMKy
5d61T/pYQDRwRR7Ws7DTVXOHjqAMvFqhZ25+m4XH/YovetsowoEL63xu5bHQ
nXHgt0wnZaBMuV5SSWHhQNGyrYJK8pDqduBeaiwLtViiqkOZEqD975lPAidZ
+NRb7MZpSwqg6hWxMwdZ2KH414wD0U5siy+wmNrFwqW63z4c1kyMjdft3buF
hf2rA4zI7QtElPPz5He/sbDLUD1Uu1QcuLUD9X+sZuFcHnC7heWhVPHHUONK
Fsqku24oHFEGm2hhSVMeC2nNmwyrNyjDu88qxE0hFhZufP67dC0XAh3X7Ff6
xcShBZrU9U3LgFVpn3LlKxOd17Y9TpCbJLJ4XiR7gIk+d6xzS0q8CcOIYyOn
3zBxze1AWRHuKNH8KU568j8mVnq75vQUC4DH79nWPnVM3PySNWQawIWpsrKD
HbeYeEzTc8qyQBniZR6mbc5lYqxsH6Z3qoBiaGcDXmbipRPukzrJilDRNz5m
EsPEASJo4qSwFNhvpHGLgpdmzXKOnhkVektk1iscYOK+/bmm8dLtRJCETkCy
BxP9si350++fEEIhcJXpyESJz4cP7+BRIK/buenkOia6rPkvebBOElYNrPr5
yoSJ3oa0I88jRaFpRNzQUJOJadbSFqMkG1y/Tvqel2NiWb2tDSeFAoPf27IG
RZjYYt0hfe3uNBHML32xjsbEq/LGDS3xnwgOM5GdM8PAlAJzZ4HvrcTVZf5W
c8MMNM4Y0r3dn0FoS2w+5tzFQF7k9o/pVnlEHVenqLSNgY4dhgItJ14Qm5UE
ewQeMHBQQktY7+QQ0a3xWcq3ioEhYD/M3z5LBOj+Z49FDNRSqsoa6KHCr1UF
EXI5DPzYDvl+S3wnmcdWBSUx0JkxTx3hikP5BhtVvWAG+maaa3VPyMJ6BzX3
+AMMrJn93G8iqwivnGmJ/bsYOJMUO63yWRl8d/Q9IJwY2JTbEF0RpAqzu/HH
VRsG/pq4slHyuhrE+V0zmDFloEbIQ+tYD3XgBpzx3aLDQNOeFKfsbHUoPr4r
66YiAyPM//Io8VQHi9OWL1gSDDRw4TaK/aMGTyPl2HuYDLxLCpfIhqiCZ/xP
y3/n6CiiYsur+qQME4mdR7ljdNxONSFKqYoQkVpTeKyHjnHJIVaaDbIgnp3+
obWdjp4ZIhPGhDRcvx4kpd1MR5pUrUV/mRgYF7nax9TSkf1aTO5uPgeabptE
9JbQl/ImI1y1ggKuVZJVFrl09M+NKawdW+qH9VOjaVfoWGvHYVLE+ongBy9U
pmLp+NA4nPLYvJngPC5zczhFx9C77dt9UvYRV59fuljoT8ePcvsupZ2vIbTf
Bjyge9Mx501ApO1oF1Hf7fDD04WOu531Gg3GJwmHAV2DexvpGO6eHfzMjE98
GFnmK22xhOc5dr7Khg2BX0cyA/XpuKJXbER0kxhc5heyVkrTsYjrY+ccyAM1
ZrxlFIeOz7bLPHUKUYKKZX5Hu+dpaKbk97hGUhVsJTYUmk3QUPftCzF3VXV4
w9X4cOUjDU1yNCPutWqAnxJDauI1DWNTgkQ4jJUwp9G/yb6FhuEpvvXD5Svh
nG5j+D/1NKydtWl2bF8JPOO8SkoZDT2FoGHeayXcNI8Y3fk3DfNtPavzd68A
S2svleo0GtJS1xm87lGHZxsIN4kEGv5+vkjm8MSSng4KF/3DaKhVfiCp78aS
ns4Ljf8F0lDmbPNPQxt5iNjxfk7Nh4ahrRd4PpTlIO59Tz/cjYbfphW5kk1L
fdnvqs87exq+WRe54+/rAmAcEJK5mqDhxS9Sis9aKdB03O15khENBz2rYkb5
U8S202tYY+o0rJZNm7dz7yWGIqUtN3JpaPkkLLGkro4QDLs9cUWQhjrqdoeL
ktmgH7Lp794FKookBk0+4ijD1mP92/QmqNjWl1h/bZcmBAWECZ7qo+JQ6WSa
b4kWZO5ffr/5JRUVX+QlRciqwX2fO0ckm6n45VLofE6wOHz0+l1jdw0Vn2oF
rU7I6CNYOz91lBRTUWt5ytwR1z5Ce1v4hR/ZVMyZteM53hKHP5xkrTdcomKM
a0SM8tI9Hd1899vlSOqS//nGrGvShtSNDgU9x6gYnezx1LRRC2p+G9qhu5eK
ktcfxRquUoEuq0iRk+5LeDU2zafuCgDFXK7xoT0V19/xL7nZRhLqJpUnJKyo
mKumX/TTYYawM3DU8jKgYu9jp5y6a1w4pP2566YKFQ8+2f5mm+1KSNI4mzQn
ScW3g5Z9t6p1oUJZwcaWRUWr+ajGrWu0oEOu+nvyHAX9Vds6ZloVYEHG6eaH
EQom8uwaHClUUJYY9dTppqDn5vsRg0oBxHrhGImQNgr2SiXVC36lw16OUnNT
AwVXXKJtrVmrDAn02pPiFRTMibrT8/2ZNpTyt+p53qBgu9UZo0Y5fWj/MdZb
nEHBlOjrTH+2JsxOx6Z8T6DgZSUwfVnEBd6ksp1NGAWTpkhxvS9TBDF6bz7p
MAWHDNuWtfzRRuwZdLnd7b20H11tnMoTg9i+L3u0XSgon2bhuHhqyZ+64mWC
N1BwtXG9Rr60PrS+VX38wIyCdPuJqYcd+jDVXh8mpkNB85nqioOWK0CmdZvR
LgUKRlb3LRdaKwlrWyYHikQpqHAfI1t/dhOeTQkZs1QKtiZcszHKHiNo4Zsy
Yod/kVOBu4jxguUARp9fOAn/Is9tyWxItlaG2JUK5qNf+WRy9DHWlkN60Krg
lBv9hk9uHRbbY55vBDJSMWzFOj65V1eeKqqoD56CtQHV1/ikXNGrNVSeCtyg
jL/eEs0nzQoILzKdCuOzylYj+/ikYucM5dOjG4TJuEv+WQc+OZC5LoHhLgSh
/fHLFFbxyUVpnkyauQY0ddYfrZLhky4eYWEVA4Yg9Hyy03F+kcyNe6Y7e2IV
uDSrr/vcs0iWXnT7HpWpC1n17oVRTYtkRuc12vufcvCx/IKofNEiGbq/XNzO
bIrQLsKgyouL5LezPXt1hXqIo9emu/84uki2ueS8++c3GbiXqmk7vG2RLK5t
CXTL0QbOzqE/qZaLZJmQ44DEAyPYpnwjiqeySEo1DjuENhhD/iefPGPWIrn/
e9BVz/xVMFWshptHF8jkryrGypF6YB348YPv8wXytJ3uyLcsVUhcnbd4pnKB
lPglzPZQEoOun17yGZkL5LSjsP/g2gFCCxUt7oQvkLWpC1mMtlYiKKZ7+2Of
BfLl7NEPzT5L/8E+O6R/0wJZWSJuHXxSGSTEdqYv6C+QuwfqiusDdGH3a9kq
aakF0gOD1cKUjMHGKfBwza95suz1cp7COxP4Hy9pFO0=
       "]], 
      LineBox[{{-1.4433570989163345`, 
       0.0003181763696312413}, {-1.4396471748889308`, 
       0.00024719872933026595`}, {-1.4330793344066293`, 
       0.0001173239914208981}, {-1.4265114939243277`, 
       0.000025199137153024693`}, {-1.4199436534420262`, 
       1.5662971302810022`*^-6}, {-1.4133758129597247`, 
       0.00005595042230672098}, {-1.407248650414684, 
       0.000017060196378376457`}, {-1.4011214878696432`, 
       4.2343521125080855`*^-7}, {-1.3949943253246024`, 
       8.267960559511711*^-6}, {-1.388867162779562, 
       0.000040481159370103615`}, {-1.3827400002345214`, 
       0.0000945796165009894}, {-1.3766128376894806`, 
       0.0001659085873355443}, {-1.3704856751444399`, 
       0.0002480560135073647}, {-1.3654541090162453`, 
       0.0003181763696312413}}], 
      LineBox[{{-1.0548400472847006`, 
       0.0003181763696312413}, {-1.0518732228023242`, 
       0.00025527284129456897`}, {-1.0457460602572837`, 
       0.00014149733504669493`}, {-1.0396188977122431`, 
       0.000055867711784776294`}, {-1.0334917351672024`, 
       7.944496353805786*^-6}, {-1.0273645726221616`, 
       3.848234294030228*^-6}, {-1.0212374100771209`, 
       0.000045581400760452984`}, {-1.0145942928162799`, 
       0.00001895218665389359}, {-1.007951175555439, 
       0.00022629171749098526`}, {-1.0061897220891973`, 
       0.0003181763696312413}}], 
      LineBox[{{1.4066011071848976`, 0.0003181763696312413}, {
       1.4131837992652545`, 0.0001292348268853738}, {1.419855669696934, 
       0.000010244435154562087`}, {1.4265275401286135`, 
       0.000028789913902682066`}, {1.4331994105602932`, 
       0.00017044467565447037`}, {1.439749480605732, 
       0.00029603525000788093`}, {1.4410898469833648`, 
       0.0003181763696312413}}], LineBox[CompressedData["
1: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
AsPa0vjVhUJUuf+DPcsMK6y/e7eed3IWNby7kuC/wQpFfTIDdDS0+I+0wK9N
RjZQ50hPIsqx48G0BuqbPGxAELnqp7TKjadF/JXnxNggX5E301yCB6/GHbhq
p8gGW2W/9U9UcGEq4nTsgCYbqCZKRE2qsWKWJ0n1F/TZIKCyyKqpaQsR2E7v
tJxjA5qCa6/C5ijz8ZBZydCWDZz+u3Tx/bEgJEVTalPtzgZNZ6TTzVZakNId
t+fYjw1KIzO07hJXkca6RG1BGBvEH2Lmcq9hwEfduzb3JbDB57UhY5V2Dmw0
G67w+hUbJOf66t6nJ+AL9jrW4p8p9hVx16W6ubHN8Hrki0o2mLc3uiTtxIFd
LN/WEJvZoD45f+xQJT2+1Wm1Ed5H8eePeN/mtYzunSbuZZ5hg5io8yAr0IQe
N9Za3t9gg/vmGpqf2SJRpP7dp/8Yd8GIRz4YRw2hxOr9VTd4KHJJW9zLi1so
S2t8bUZsF/h9PEL3UYwF55YkyFxV3AW5xncm0VtOXHLglHm/5i4Yvhn5yyaO
G1fn0kec198Fx17IiTTv58J0hKjRuxu7Iaae6Bs+yI65Zn13czGyg6n2nT5N
ak4s+t1ONY2bHdRE9z3JtuDEiinGFqpkdjAOgNaTNJwY3dYI/C7HDlz5YakT
4+zY8IzEuwsH2eFWU+47tRg2bKbI0TZ9hB3qrubp0F9gwg4sG1u+xuwwoqOA
hB/RYq/hof84Ldnh7AP6jSXeLRRU+tMw1ZEd6NkdV1RjllB0zGcPFU92aGtY
cuf4NIrS3ZJf1Dxgh1yGfgc36d/oo0Fw1fkn7LDS56vLFJGLKiQ8ZqZesINH
ufLtfZ/0UBOVJY9vNjuURFY2vcgqQv2depocn9lByyrh/ofWdjT7UelKyjd2
GP6o1ZJFO4G2woRClRvZYU6mmWRWuozY7Bk+VXezQ3qwiFbQ6hYS0J7vPjfB
DrJZvTG0H2ixNKmTbmqFHeyFxC3LBJhwwj+raETNAZmRjwTLO1hx6viZ7IeM
HPDej/upUOJunN2qX9q4iwM0L4mzphM5cG4FNPMTOEAvy+q5834OXPheZdRa
gAOOFNqIsOhS9pUEmY3XZA64DktJ3aNs+Psjkd0rEhR91YvgAS9m/OsmQQzt
5QDbzomzJcfocdtlZtWH+zkgIkerrf89Fe412j7WeJADPB3jadiF1tGI5pI5
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
Bv8Hj2MCKg==
       "]], 
      LineBox[{{-1.6674433361970162`, 
       0.0003181763696312413}, {-1.662953751287184, 
       0.0002724692257178723}, {-1.6563859108048824`, 
       0.00017538494490638502`}, {-1.6498180703225809`, 
       0.00007892314033320325}, {-1.6432502298402794`, 
       0.000014225990628486183`}, {-1.6366823893579778`, 
       2.8432890762617837`*^-6}, {-1.6301145488756763`, 
       0.00004972887215995523}, {-1.6235467083933746`, 
       0.00014139816114970102`}, {-1.6169788679110728`, 
       0.00024991551103780075`}, {-1.6120857241503868`, 
       0.0003181763696312413}}], 
      LineBox[{{1.6202706097517985`, 0.0003181763696312413}, {
       1.6231514418780257`, 0.00028623211326933546`}, {1.6297015119234648`, 
       0.00018813661779218307`}, {1.6362515819689039`, 
       0.00009163309793114842}, {1.6428016520143427`, 
       0.00002291252316161992}, {1.6493517220597815`, 8.92099486272378*^-8}, {
       1.6559017921052206`, 0.00002833185313072562}, {1.6624518621506597`, 
       0.00009864198941182223}, {1.6690019321960987`, 
       0.00019055917497979322`}, {1.6755520022415378`, 
       0.00027798517965350476`}, {1.6800530862339578`, 
       0.0003181763696312413}}], 
      LineBox[{{-1.7449560439201104`, 
       0.0003181763696312413}, {-1.7417678370748026`, 
       0.00031018659143656693`}, {-1.7351999965925011`, 
       0.000247261528574051}, {-1.7286321561101996`, 
       0.00015755971284973986`}, {-1.722064315627898, 
       0.00006958415874700671}, {-1.7154964751455966`, 
       0.00001173040964724216}, {-1.708928634663295, 
       3.2626410688459795`*^-6}, {-1.7023607941809933`, 
       0.000048051996759839846`}, {-1.6957929536986915`, 
       0.00013310860647944872`}, {-1.68922511321639, 
       0.00023244765684873208`}, {-1.6826572727340885`, 
       0.00031514420171469004`}, {-1.68215864325848, 0.0003181763696312413}}],
       LineBox[{{-0.30466018941710865`, 
       0.0003181763696312413}, {-0.30456325717502736`, 
       0.00031300926908297996`}, {-0.2983608178514472, 
       0.0000917226794874284}, {-0.292158378527867, 
       1.1109946129428565`*^-6}, {-0.28595593920428686`, 
       0.00006155777953513464}, {-0.27975349988070675`, 
       0.00029200561663851496`}, {-0.2793646617036984, 
       0.0003181763696312413}}], 
      LineBox[{{0.8725251706150895, 0.0003181763696312413}, {
       0.8769254728993421, 0.0002173025976773982}, {0.8830813886152212, 
       0.00010757766351360994`}, {0.8892373043311004, 
       0.00003477018218926269}, {0.8953932200469796, 
       1.9268065401981662`*^-6}, {0.9015491357628588, 
       9.493582153954041*^-6}, {0.9077050514787379, 0.00005535812857745618}, {
       0.9138609671946171, 0.0001350516810667212}, {0.9200168829104962, 
       0.0002420940375370755}, {0.9237233509111514, 0.0003181763696312413}}], 
      LineBox[{{1.3003789124156349`, 0.0003181763696312413}, {
       1.3064338723583826`, 0.00011954409858040745`}, {1.313105742790062, 
       3.7025986279941623`*^-6}, {1.3197776132217416`, 
       0.000052994242511586375`}, {1.326449483653421, 
       0.00023441145474498734`}, {1.3291611802141872`, 
       0.0003181763696312413}}], 
      LineBox[{{-0.9697508213742557, 
       0.0003181763696312413}, {-0.9680924719903926, 
       0.0002292214378847074}, {-0.9614493547295515, 
       0.00001602250568584688}, {-0.9548062374687105, 
       0.000060933254324114287`}, {-0.9489435270944503, 
       0.0003181763696312413}}], 
      LineBox[{{-0.5571761662136993, 
       0.0003181763696312413}, {-0.5526608301182336, 
       0.0002155317937109679}, {-0.5464583907946535, 
       0.00010584146015296569`}, {-0.5402559514710734, 
       0.00003278908213084967}, {-0.5340535121474932, 
       1.0418607823569123`*^-6}, {-0.527851072823913, 
       0.000014455620138933626`}, {-0.5216486335003329, 
       0.00007594148633588852}, {-0.5154461941767527, 
       0.00018734986935013136`}, {-0.5104380700628456, 
       0.0003181763696312413}}], 
      LineBox[{{1.4705888551562631`, 0.0003181763696312413}, {
       1.4724998308329273`, 0.00028618703375368667`}, {1.4790499008783664`, 
       0.00016313457650436728`}, {1.4855999709238055`, 
       0.00006027878857314139}, {1.4921500409692445`, 
       5.072051856918129*^-6}, {1.4987001110146836`, 
       0.000011358824697399615`}, {1.5052501810601226`, 
       0.00007579729433515322}, {1.5118002511055617`, 
       0.00017907875088447506`}, {1.5183503211510008`, 
       0.00029152552261812477`}, {1.5202915676293223`, 
       0.0003181763696312413}}], 
      LineBox[{{-1.5922638003180771`, 
       0.0003181763696312413}, {-1.5907075059818667`, 
       0.0003012971119026513}, {-1.5841396654995652`, 
       0.00019588389084767817`}, {-1.5775718250172637`, 
       0.00008976960640921414}, {-1.5710039845349622`, 
       0.000017222260940867708`}, {-1.5644361440526606`, 
       2.4175663988597323`*^-6}, {-1.557868303570359, 
       0.00005158272901933913}, {-1.5513004630880576`, 
       0.00015071332155644336`}, {-1.5447326226057558`, 
       0.00026968298458259794`}, {-1.5416059727346152`, 
       0.0003181763696312413}}], 
      LineBox[{{-1.1819019107822848`, 
       0.0003181763696312413}, {-1.1805436362481787`, 
       0.000294393814202058}, {-1.174416473703138, 
       0.00019112636882868316`}, {-1.1682893111580972`, 
       0.00010239829208692061`}, {-1.1621621486130564`, 
       0.000037544525019646714`}, {-1.156034986068016, 
       3.7773982974111795`*^-6}, {-1.1499078235229754`, 
       5.43965335797908*^-6}, {-1.1437806609779346`, 
       0.000043520579359544236`}, {-1.1376534984328939`, 
       0.0001154878553037695}, {-1.1315263358878531`, 
       0.0002154581822147693}, {-1.1262481151126844`, 
       0.0003181763696312413}}], 
      LineBox[{{1.2472239357420603`, 0.0003181763696312413}, {
       1.2530589089049462`, 0.00011386160434278492`}, {1.2597307793366257`, 
       1.4431975531868897`*^-6}, {1.2664026497683052`, 
       0.0000696629267122998}, {1.273074520199985, 0.0002740844037627796}, {
       1.2744133009376284`, 0.0003181763696312413}}], 
      LineBox[{{-1.3092454034352572`, 
       0.0003181763696312413}, {-1.3092140496940332`, 
       0.00031774565451450474`}, {-1.3030868871489925`, 
       0.00022943199664150724`}, {-1.2969597246039517`, 
       0.00014577135209094667`}, {-1.290832562058911, 
       0.0000752776021279031}, {-1.2847053995138702`, 
       0.00002534883172482934}, {-1.2785782369688297`, 
       1.5263544945469616`*^-6}, {-1.2724510744237891`, 
       6.920032778070365*^-6}, {-1.2663239118787484`, 
       0.000041858882500502584`}, {-1.2601967493337076`, 
       0.00010380522632325061`}, {-1.2540695867886669`, 
       0.00018754582696807307`}, {-1.2479424242436261`, 
       0.00028564682126884093`}, {-1.2460164375044074`, 
       0.0003181763696312413}}], 
      LineBox[{{0.7251431744406165, 0.0003181763696312413}, {
       0.7291834957182421, 0.00020212015413999867`}, {0.7353394114341213, 
       0.00007791797817095947}, {0.7414953271500004, 
       0.00001145977024203767}, {0.7476512428658797, 4.085870813622434*^-6}, {
       0.7538071585817588, 0.000053395184823017676`}, {0.759963074297638, 
       0.000153516380335615}, {0.7661189900135171, 0.00029558721268024124`}, {
       0.7669236324255658, 0.0003181763696312413}}], 
      LineBox[{{1.545750861270541, 0.0003181763696312413}, {1.551100671378196,
        0.00023298941589260466`}, {1.5576507414236351`, 
       0.00012348578200870782`}, {1.5642008114690742`, 
       0.00003858996812077856}, {1.5707508815145133`, 
       8.364961581442309*^-7}, {1.5773009515599523`, 
       0.000019389680073748066`}, {1.5838510216053914`, 
       0.00008773815733100955}, {1.5904010916508304`, 
       0.00018574904589712754`}, {1.5969511616962695`, 
       0.00028544363891665284`}, {1.5998722501904297`, 
       0.0003181763696312413}}], 
      LineBox[{{0.14073123198524745`, 0.0003181763696312413}, {
       0.14139399181685797`, 0.00002491999390959115}, {0.1426217181842177, 
       0.0003181763696312413}}], 
      LineBox[{{0.5484151736506095, 0.0003181763696312413}, {
       0.5528517542382776, 0.000015351559606292592`}, {0.5594483478914177, 
       0.00018776007280539323`}, {0.5606988007922615, 
       0.0003181763696312413}}], 
      LineBox[{{1.3535060017052172`, 0.0003181763696312413}, {
       1.3598088358118186`, 0.00012466102240504934`}, {1.366480706243498, 
       6.70145913183025*^-6}, {1.3731525766751775`, 0.00003954787629271918}, {
       1.379824447106857, 0.00020012774623967157`}, {1.3839042766189518`, 
       0.0003181763696312413}}], 
      LineBox[{{-0.7933860997010773, 
       0.0003181763696312413}, {-0.7887283059476846, 
       0.00005647354974586294}, {-0.7820851886868436, 
       0.000047551739024310267`}, {-0.7773462737158907, 
       0.0003181763696312413}}], 
      LineBox[{{-1.5175302201194751`, 
       0.0003181763696312413}, {-1.511893420194248, 
       0.00021959527556037384`}, {-1.5053255797119465`, 
       0.00010243736878049045`}, {-1.498757739229645, 
       0.00002083194373576478}, {-1.4921898987473434`, 
       1.989804970241524*^-6}, {-1.485622058265042, 
       0.000053644028450915855`}, {-1.4790542177827404`, 
       0.0001612453149515765}, {-1.4724863773004389`, 
       0.0002921933302086558}, {-1.4709853518502172`, 
       0.0003181763696312413}}], 
      LineBox[{{-0.6763681088624705, 
       0.0003181763696312413}, {-0.6757953125133871, 
       0.00026154706996745175`}, {-0.6691521952525461, 
       1.1068369549133542`*^-7}, {-0.6625090779917051, 
       0.0002932908243948934}, {-0.6622836636530611, 0.0003181763696312413}}],
       LineBox[{{-0.734939688814836, 
       0.0003181763696312413}, {-0.7289402506001155, 
       0.000015458390279958826`}, {-0.7222971333392745, 
       0.0001355593580746112}, {-0.720052582912146, 0.0003181763696312413}}], 
      LineBox[{{-0.8520934412573372, 
       0.0003181763696312413}, {-0.848516361295254, 
       0.00011080411077936061`}, {-0.841873244034413, 
       7.626516876330259*^-6}, {-0.835230126773572, 
       0.0002529441864553587}, {-0.8343404052251969, 0.0003181763696312413}}],
       LineBox[{{-0.9109062325201094, 
       0.0003181763696312413}, {-0.9083044166428234, 
       0.00017023451022290113`}, {-0.9016612993819823, 
       7.206742606827715*^-7}, {-0.8950181821211411, 
       0.00013549496742930735`}, {-0.8918656168746195, 
       0.0003181763696312413}}], 
      LineBox[{{1.0343919608029217`, 0.0003181763696312413}, {
       1.039559055091202, 0.00008510118068921379}, {1.0462309255228814`, 
       5.91795787189928*^-6}, {1.052902795954561, 0.000184471862182863}, {
       1.055645290112688, 0.0003181763696312413}}], 
      LineBox[{{1.140844357036975, 0.0003181763696312413}, {
       1.1463089819980743`, 0.00010071751642466729`}, {1.1529808524297538`, 
       2.0103711847504234`*^-7}, {1.1596527228614333`, 
       0.0001154638797405021}, {1.1648904954521055`, 0.0003181763696312413}}],
       LineBox[{{1.0876258863843455`, 0.0003181763696312413}, {
       1.092934018544638, 0.00009322281609996859}, {1.0996058889763174`, 
       1.940692178031102*^-6}, {1.1062777594079969`, 0.0001464471687882831}, {
       1.1102310602182968`, 0.0003181763696312413}}], 
      LineBox[{{0.48334961016934047`, 0.0003181763696312413}, {
       0.48688581770687733`, 0.000015699525020838104`}, {0.49348241136001736`,
        0.0002560204093591534}, {0.493941508989564, 0.0003181763696312413}}], 
      LineBox[{{-0.6174531535977735, 
       0.0003181763696312413}, {-0.616007257165818, 
       0.00016780242680066186`}, {-0.6093641399049768, 
       0.000029489425600324458`}, {-0.6057009532706799, 
       0.0003181763696312413}}], 
      LineBox[{{-0.04716776185391452, 
       0.0003181763696312413}, {-0.04710581524067244, 
       0.00014721066607942758`}, {-0.047053426131357, 
       0.0003181763696312413}}], 
      LineBox[{{0.35297132187144287`, 0.0003181763696312413}, {
       0.3549539446440765, 0.00001680122289306902}, {0.3587976937826325, 
       0.0003181763696312413}}], 
      LineBox[{{0.22220561678464962`, 0.0003181763696312413}, {
       0.22302207158127568`, 0.00001932322813529614}, {0.224378414421009, 
       0.0003181763696312413}}], 
      LineBox[{{0.41820422407040625`, 0.0003181763696312413}, {
       0.42091988117547685`, 0.00001616040219507357}, {0.4266929132934408, 
       0.0003181763696312413}}], 
      LineBox[{{0.2876419450818651, 0.0003181763696312413}, {
       0.2889880081126761, 0.000017754495761775666`}, {0.291388484428703, 
       0.0003181763696312413}}]},
     Annotation[#, "Charting`Private`Tag$179421#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.0003181763696312413}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.76122984250996*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"d497b022-3014-4e40-bdac-cdd16e93085a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761229862249177*^9, 3.7612298655147667`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"f17b70c5-48d2-4d44-b0bd-397bcf0a4a25"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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

       "]], 
      LineBox[{{-1.4283543689477456`, 
       3.02126641592087*^-6}, {-1.4265114939243277`, 
       2.7822900881094583`*^-6}, {-1.4199436534420262`, 
       1.8672441901958335`*^-6}, {-1.4133758129597247`, 
       1.024336163940598*^-6}, {-1.407248650414684, 
       6.390699816986167*^-7}, {-1.4011214878696432`, 
       3.3168617243569407`*^-7}, {-1.3949943253246024`, 
       1.1834085522155007`*^-7}, {-1.388867162779562, 
       1.1276319470528854`*^-8}, {-1.3827400002345214`, 
       1.8204730412015334`*^-8}, {-1.3766128376894806`, 
       1.4188315717565985`*^-7}, {-1.3704856751444399`, 
       3.799022346606634*^-7}, {-1.364358512599399, 
       7.247016629714662*^-7}, {-1.3582313500543584`, 
       1.1638158925889954`*^-6}, {-1.3521041875093178`, 
       1.68034316608247*^-6}, {-1.3459770249642773`, 
       2.253621033441314*^-6}, {-1.3398498624192365`, 
       2.8600819720428588`*^-6}, {-1.3382418392214817`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-1.0578682321984259`, 
       3.02126641592087*^-6}, {-1.0518732228023242`, 
       2.2084627661664347`*^-6}, {-1.0457460602572837`, 
       1.4620647529942752`*^-6}, {-1.0396188977122431`, 
       8.379395772287922*^-7}, {-1.0334917351672024`, 
       3.694975377623966*^-7}, {-1.0273645726221616`, 
       8.400943167896157*^-8}, {-1.0212374100771209`, 
       1.2422400360282257`*^-9}, {-1.0191399674653732`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.4238282114357588`, 3.02126641592087*^-6}, {
       1.4265275401286135`, 1.967942113885928*^-6}, {1.4331994105602932`, 
       1.0549352137606684`*^-6}, {1.4378270932956014`, 
       3.02126641592087*^-6}}], LineBox[CompressedData["
1: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
bf9e58wCr/0Jf1yPUfgmiCV7atOkbuRvk6IBXwrTSDJNgd5/Nk3QzTuQwvHa
cs6s+M+6uVoNUj9DKPw8xmX4zoIFjzpS3wdEUFjxJz4o0a9Qty7iQPyfSAqz
hdZV1Oqz4NOa1XoRbArJSyPMEcPbuqNPWyYXYim0yW15J6tM+905/Q47nsLe
snPLsj53667msnblSabwVFmc+6AgCxRuSEolpFI4W2jG41I+oatj9KlJ8ALN
N3HeV3OQ/m8NXY07m04hZ1OfwZA+NzgkOYDIZQqluGY/iFUywX+j3GRGJoXS
mp+irhevhNjG3kLpbAqToc2+MIkJ6f65LtfzKNR4tuodu1UCCla7S1K3KFx8
lVgmeJAJTx4qNOUX0vc5rb1wxICARqvB0xvuUVjk89bKRowJfTMFundLKCQ2
Z5ka9SoAH2wsfFhGYbXSxjPLdDeCVM+os04lhQderL++PSECVE4WS1RWUWi5
YYdqnJIGmNdqnq55ReG3H1zBKiu0wN1zkrH7DYWNk2+vRPSHQ9jSx+NvGiiM
9r5s37x3G2Tu2+bc3Eqhl/eaXQ++AAy2IaPvPwp5PfZ1FrAMYDaMc9x9gMIn
35p5Ax3DQEi6pmBomMKhyJc/hxlGoOFoJP7rF4WOgsqmKYQJGC4RaAiapPBG
4J/l2tGhYJ37OnZ6mkIKu05+VqT/Q4bJ21nzFE7NqfAYLg2FyAHT33//0vzs
5VSTFffD/x+l+5Q=
       "]], 
      LineBox[{{-1.6525224587211638`, 
       3.02126641592087*^-6}, {-1.6498180703225809`, 
       2.8233722906485575`*^-6}, {-1.6432502298402794`, 
       2.1913530009794243`*^-6}, {-1.6366823893579778`, 
       1.4996212322798037`*^-6}, {-1.6301145488756763`, 
       8.500728893751402*^-7}, {-1.6235467083933746`, 
       3.401410597267269*^-7}, {-1.6169788679110728`, 
       4.855301702912487*^-8}, {-1.6104110274287713`, 
       2.357550733832291*^-8}, {-1.6038431869464698`, 
       2.754969523824824*^-7}, {-1.5972753464641682`, 
       7.745082191556902*^-7}, {-1.5907075059818667`, 
       1.454378400034277*^-6}, {-1.5841396654995652`, 
       2.2214867704055085`*^-6}, {-1.5775718250172637`, 
       2.967986814665688*^-6}, {-1.5770067541966968`, 3.02126641592087*^-6}}],
       LineBox[{{-1.2478483806113891`, 
       3.02126641592087*^-6}, {-1.2418152616985856`, 
       2.385998644510087*^-6}, {-1.235688099153545, 
       1.7663476436921818`*^-6}, {-1.2295609366085043`, 
       1.202001412807065*^-6}, {-1.2234337740634635`, 
       7.208856124958255*^-7}, {-1.2173066115184228`, 
       3.4778061418200145`*^-7}, {-1.211179448973382, 
       1.0315061776194554`*^-7}, {-1.2050522864283413`, 
       2.141730805679757*^-9}, {-1.1989251238833005`, 
       5.379699881679061*^-8}, {-1.19279796133826, 
       2.605277059299734*^-7}, {-1.1866707987932195`, 
       6.178696800544605*^-7}, {-1.1805436362481787`, 
       1.1145412668504184`*^-6}, {-1.174416473703138, 
       1.732806583568023*^-6}, {-1.1682893111580972`, 
       2.4491341901390143`*^-6}, {-1.1638292923758085`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.3979216284477248, 
       3.02126641592087*^-6}, {-0.39759984702872975`, 
       8.988959666729135*^-9}, {-0.39730075142720656`, 
       3.02126641592087*^-6}}], 
      LineBox[{{0.7882736370646523, 3.02126641592087*^-6}, {
       0.7907426528770337, 2.1805182452469704`*^-6}, {0.7968985685929129, 
       7.339711525278228*^-7}, {0.8030544843087921, 5.036059988493917*^-8}, {
       0.8092104000246713, 1.6322277472040706`*^-7}, {0.8153663157405504, 
       1.0254022599914351`*^-6}, {0.8215222314564297, 
       2.5161912810026294`*^-6}, {0.8231253934277795, 3.02126641592087*^-6}}],
       LineBox[{{1.6375018030451232`, 3.02126641592087*^-6}, {
       1.6428016520143427`, 1.7286342048947767`*^-11}, {1.6481860034364422`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-1.767042585501001, 
       3.02126641592087*^-6}, {-1.7614713585217072`, 
       2.74924403412305*^-6}, {-1.7549035180394057`, 
       2.2580997876201994`*^-6}, {-1.7483356775571042`, 
       1.6671435222723075`*^-6}, {-1.7417678370748026`, 
       1.0626261406760015`*^-6}, {-1.7351999965925011`, 
       5.34096935437648*^-7}, {-1.7286321561101996`, 
       1.6143447513101018`*^-7}, {-1.722064315627898, 
       3.08602454048404*^-9}, {-1.7154964751455966`, 
       8.724244588277268*^-8}, {-1.708928634663295, 
       4.072755121617548*^-7}, {-1.7023607941809933`, 
       9.221658263708153*^-7}, {-1.6957929536986915`, 
       1.561935935355606*^-6}, {-1.68922511321639, 
       2.237376549129317*^-6}, {-1.6826572727340885`, 
       2.85271927874863*^-6}, {-1.6802855285723746`, 3.02126641592087*^-6}}], 
      LineBox[{{1.520071988202314, 3.02126641592087*^-6}, {
       1.5249003911964398`, 3.133128451317993*^-7}, {1.538000531287318, 
       2.4511138014308534`*^-7}, {1.5428726310857253`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-1.5399967854375038`, 
       3.02126641592087*^-6}, {-1.538164782123454, 
       2.837576336422661*^-6}, {-1.5315969416411526`, 
       2.0620822252273796`*^-6}, {-1.525029101158851, 
       1.283204422299015*^-6}, {-1.5184612606765495`, 
       6.170053065370678*^-7}, {-1.511893420194248, 
       1.6519543097298216`*^-7}, {-1.5053255797119465`, 
       8.473028776322653*^-11}, {-1.498757739229645, 
       1.5354723224661466`*^-7}, {-1.4921898987473434`, 
       6.116734579666911*^-7}, {-1.485622058265042, 
       1.3159875976372364`*^-6}, {-1.4790542177827404`, 
       2.1711681424683536`*^-6}, {-1.472760303094749, 3.02126641592087*^-6}}],
       LineBox[{{-0.7031640612940385, 
       3.02126641592087*^-6}, {-0.7023677815567513, 
       7.320573094589246*^-7}, {-0.7015136560922639, 3.02126641592087*^-6}}], 
      LineBox[{{0.47930571014690426`, 3.02126641592087*^-6}, {
       0.48028922405373725`, 2.7354272272212906`*^-6}, {0.48688581770687733`, 
       1.33465686951547*^-6}, {0.49348241136001736`, 4.402867960575851*^-7}, {
       0.5000790050131574, 3.279402389739314*^-8}, {0.5066755986662974, 
       8.398617581288828*^-8}, {0.5132721923194374, 5.579825122326487*^-7}, {
       0.5198687859725775, 1.4122991538473919`*^-6}, {0.5264653796257175, 
       2.5990133127893153`*^-6}, {0.5283641483101089, 3.02126641592087*^-6}}],
       LineBox[{{0.9058239103715773, 3.02126641592087*^-6}, {
       0.9077050514787379, 2.475734023110236*^-6}, {0.9138609671946171, 
       1.100568062885577*^-6}, {0.9200168829104962, 
       2.5493838861601054`*^-7}, {0.9261727986263754, 
       2.018181888245811*^-9}, {0.9323287143422545, 
       3.4381020768223074`*^-7}, {0.9384846300581337, 
       1.2225496971818312`*^-6}, {0.9446405457740128, 
       2.528067427388158*^-6}, {0.9465595076888117, 3.02126641592087*^-6}}], 
      LineBox[{{1.31739860635093, 3.02126641592087*^-6}, {1.3197776132217416`,
        1.5483484629979269`*^-6}, {1.326449483653421, 
       1.9367758884547424`*^-6}, {1.32856679118931, 3.02126641592087*^-6}}], 
      LineBox[{{1.7283857261034177`, 3.02126641592087*^-6}, {
       1.7345026326504893`, 1.4272922560586745`*^-7}, {1.7476027727413674`, 
       1.8328433352567622`*^-7}, {1.7540990040219147`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.4677628517419825`, 3.02126641592087*^-6}, {
       1.4724998308329273`, 6.790614936077484*^-7}, {1.4855999709238055`, 
       5.733560532992192*^-7}, {1.4903243823698678`, 3.02126641592087*^-6}}], 
      LineBox[{{1.264100417100624, 3.02126641592087*^-6}, {
       1.2664026497683052`, 1.3116874083338794`*^-6}, {1.273074520199985, 
       2.5176904065193423`*^-6}, {1.2741639960314213`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.6895105144117475`, 3.02126641592087*^-6}, {
       1.695202212377855, 4.851368781061627*^-8}, {1.7010260179610273`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.8632770165231715, 
       3.02126641592087*^-6}, {-0.8618025958169361, 
       1.085461926024827*^-7}, {-0.8603008788283237, 3.02126641592087*^-6}}], 
      LineBox[{{1.5853642493992999`, 3.02126641592087*^-6}, {
       1.5904010916508304`, 5.919460920277315*^-8}, {1.5954844074124175`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.3706538237769068`, 3.02126641592087*^-6}, {
       1.3731525766751775`, 1.7685753754462066`*^-6}, {1.379824447106857, 
       1.45263970039812*^-6}, {1.3827080155145683`, 3.02126641592087*^-6}}], 
      LineBox[{{-0.9951647534276796, 
       3.02126641592087*^-6}, {-0.9946649410337567, 
       2.5751797032562966`*^-6}, {-0.9938801472698208, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.5718517782934311, 
       3.02126641592087*^-6}, {-0.5712681480889741, 
       2.6993519001576753`*^-7}, {-0.5706597635336899, 
       3.02126641592087*^-6}}], 
      LineBox[{{0.21622602927532614`, 3.02126641592087*^-6}, {
       0.21642547792813566`, 2.8600065428326825`*^-6}, {0.22302207158127568`, 
       3.363002596331078*^-7}, {0.22961866523441574`, 
       2.2151463592975372`*^-7}, {0.2362152588875558, 
       2.131499377882546*^-6}, {0.2378599358102865, 3.02126641592087*^-6}}], 
      LineBox[{{1.0325454859152738`, 3.02126641592087*^-6}, {
       1.0328871846595225`, 2.685349646806277*^-6}, {1.039559055091202, 
       2.9899407704060374`*^-6}, {1.0395952535335637`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.441582827662677, 3.02126641592087*^-6}, {1.446299550651171, 
       9.197650815349129*^-7}, {1.4593996907420492`, 7.94498542049281*^-7}, {
       1.4640696570489493`, 3.02126641592087*^-6}}], 
      LineBox[{{1.663526074543896, 3.02126641592087*^-6}, {
       1.6690019321960987`, 1.2102503451849171`*^-8}, {1.6745843226217703`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.8890305856200463, 
       3.02126641592087*^-6}, {-0.8883750648603002, 
       2.402951856716825*^-6}, {-0.8879296362589506, 3.02126641592087*^-6}}], 
      LineBox[{{1.5592610522701664`, 3.02126641592087*^-6}, {
       1.5642008114690742`, 1.3524153798851233`*^-7}, {1.569169309598717, 
       3.02126641592087*^-6}}], 
      LineBox[{{0.6706369176299379, 3.02126641592087*^-6}, {
       0.6737802542753297, 1.7745160615805151`*^-6}, {0.6799361699912089, 
       3.4807855027286575`*^-7}, {0.686092085707088, 
       2.3677378969350602`*^-8}, {0.6922480014229672, 
       7.754154038882862*^-7}, {0.6984039171388463, 2.471208632678076*^-6}, {
       0.6998040332579735, 3.02126641592087*^-6}}], 
      LineBox[{{1.0862045773248805`, 3.02126641592087*^-6}, {
       1.0862621481129584`, 2.9768647874301298`*^-6}, {1.092934018544638, 
       2.176325229287282*^-6}, {1.0938819085783034`, 3.02126641592087*^-6}}], 
      LineBox[{{1.4939254307174337`, 3.02126641592087*^-6}, {
       1.4987001110146836`, 4.772614508153071*^-7}, {1.5118002511055617`, 
       3.906349570980278*^-7}, {1.5165916365192564`, 3.02126641592087*^-6}}], 
      LineBox[{{-0.7293826855075499, 
       3.02126641592087*^-6}, {-0.7289402506001155, 
       2.2041103172869966`*^-6}, {-0.7286030317445186, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.7154435078065666`, 3.02126641592087*^-6}, {
       1.7214024925596112`, 1.0651204167456145`*^-7}, {1.727524429564141, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.6114459027632384`, 3.02126641592087*^-6}, {
       1.6166013718325867`, 1.4886950605403478`*^-8}, {1.6218216360855178`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.22394149099743335`, 
       3.02126641592087*^-6}, {-0.2239315459684853, 
       2.756313545465016*^-6}, {-0.22392356724878112`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-1.009720638833017, 
       3.02126641592087*^-6}, {-1.007951175555439, 
       6.449430251506347*^-7}, {-1.0059425682818373`, 3.02126641592087*^-6}}],
       LineBox[{{1.0166542454223169`, 3.02126641592087*^-6}, {
       1.0195434437961635`, 5.346881854680695*^-7}, {1.021448245433033, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.2295851478638573`, 3.02126641592087*^-6}, {
       1.2330432976099077`, 1.0676109949721348`*^-8}, {1.2368281760900486`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.6505183404199053`, 3.02126641592087*^-6}, {
       1.6559017921052206`, 2.851846996425857*^-9}, {1.6613804034050685`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.48488971295885186`, 
       3.02126641592087*^-6}, {-0.48443399755885197`, 
       7.1721506126513*^-8}, {-0.4839848005940186, 3.02126641592087*^-6}}], 
      LineBox[{{1.1230544349899572`, 3.02126641592087*^-6}, {
       1.1262933707030358`, 7.677224590480611*^-8}, {1.1290909932252504`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.54620233538814, 3.02126641592087*^-6}, {1.551100671378196, 
       1.8582783642752074`*^-7}, {1.5560188590184758`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.3361280317157949`, 3.02126641592087*^-6}, {1.33979322451678,
        1.7747013502224277`*^-7}, {1.344952524908902, 3.02126641592087*^-6}}],
       LineBox[{{1.0698261004265766`, 3.02126641592087*^-6}, {
       1.0729184072495994`, 2.4408523306137694`*^-7}, {1.075270256568548, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.282860092413121, 3.02126641592087*^-6}, {
       1.2864182610633441`, 7.26554435261475*^-8}, {1.2908132560653398`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.702484343708559, 3.02126641592087*^-6}, {1.708302352468733, 
       7.498896171753916*^-8}, {1.714267096273843, 3.02126641592087*^-6}}], 
      LineBox[{{-0.8492805592953758, 
       3.02126641592087*^-6}, {-0.848516361295254, 
       1.7249814190471997`*^-6}, {-0.847580071709552, 3.02126641592087*^-6}}],
       LineBox[{{1.5984079987441058`, 3.02126641592087*^-6}, {
       1.6035012317417086`, 3.321251752585394*^-8}, {1.6086499776352026`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.3893793108309698`, 3.02126641592087*^-6}, {
       1.393168187970216, 3.129410623021311*^-7}, {1.3993581580415215`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.6765239027299164`, 3.02126641592087*^-6}, {
       1.6821020722869768`, 2.7436367733637807`*^-8}, {1.687799026316557, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.8766310810152906, 
       3.02126641592087*^-6}, {-0.8750888303386182, 
       4.200760703001616*^-7}, {-0.8737400893628983, 3.02126641592087*^-6}}], 
      LineBox[{{1.5723151336465884`, 3.02126641592087*^-6}, {
       1.5773009515599523`, 9.311492014313845*^-8}, {1.5823243500043214`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.7167135228129742, 
       3.02126641592087*^-6}, {-0.7156540160784334, 
       1.217287826963836*^-7}, {-0.7146766727246578, 3.02126641592087*^-6}}], 
      LineBox[{{-0.31094156285905444`, 
       3.02126641592087*^-6}, {-0.3107656964986075, 
       4.352499346733895*^-7}, {-0.31061261403357154`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.6244773940495405`, 3.02126641592087*^-6}, {
       1.6297015119234648`, 3.92372394211972*^-9}, {1.6350000515500418`, 
       3.02126641592087*^-6}}], 
      LineBox[{{0.17786424821005595`, 3.02126641592087*^-6}, {
       0.1778778254408961, 2.2747345458193954`*^-6}, {0.17789432948880038`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.8031058265829265, 
       3.02126641592087*^-6}, {-0.8020145404693668, 
       1.0649221940841612`*^-6}, {-0.8011168929319862, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.9630418601686123, 
       3.02126641592087*^-6}, {-0.9614493547295515, 
       1.386279623842378*^-6}, {-0.960243591321134, 3.02126641592087*^-6}}], 
      LineBox[{{-0.44140676963471337`, 
       3.02126641592087*^-6}, {-0.4410169222937908, 
       1.0896305640892074`*^-8}, {-0.4406435608934848, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.643331381594211, 
       3.02126641592087*^-6}, {-0.6425797262091819, 
       6.417860927076115*^-7}, {-0.6419228823533042, 3.02126641592087*^-6}}], 
      LineBox[{{-0.7762453493234086, 
       3.02126641592087*^-6}, {-0.7754420714260026, 
       1.232149640310376*^-6}, {-0.7745270254920318, 3.02126641592087*^-6}}], 
      LineBox[{{1.2476780408400736`, 3.02126641592087*^-6}, {
       1.2530589089049462`, 6.544054347772863*^-7}, {1.2558729497214942`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.1404419006942017`, 3.02126641592087*^-6}, {
       1.1463089819980743`, 1.5330642831610143`*^-6}, {1.1479753569795363`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.2674446874749495, 
       3.02126641592087*^-6}, {-0.2673486212335464, 
       1.164488675525356*^-6}, {-0.26726810423113195`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.3545434281641422`, 3.02126641592087*^-6}, {
       1.3598088358118186`, 1.872441060283414*^-7}, {1.363647199936424, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.9365054730373339, 
       3.02126641592087*^-6}, {-0.9348768856861875, 
       3.44423852424892*^-7}, {-0.9331309153122201, 3.02126641592087*^-6}}], 
      LineBox[{{1.3011328675316556`, 3.02126641592087*^-6}, {
       1.3064338723583826`, 3.777780327532597*^-7}, {1.3097607723481959`, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.4079204194022712`, 3.02126641592087*^-6}, {
       1.4131837992652545`, 6.891940810749471*^-8}, {1.4175586294642553`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.79001943816165, 
       3.02126641592087*^-6}, {-0.7887283059476846, 
       4.746123950930334*^-10}, {-0.7874762557132007, 3.02126641592087*^-6}}],
       LineBox[{{-0.9500474158181518, 
       3.02126641592087*^-6}, {-0.9481631202078695, 
       1.018949887598082*^-7}, {-0.9464255723372851, 3.02126641592087*^-6}}], 
      LineBox[{{-0.5283711606344645, 
       3.02126641592087*^-6}, {-0.527851072823913, 
       1.6335805606504963`*^-7}, {-0.5273237968914286, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.6300374196632303, 
       3.02126641592087*^-6}, {-0.6292934916874999, 
       2.8653245818824464`*^-7}, {-0.6285373958196208, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.0507843759328803`, 3.02126641592087*^-6}, {
       1.052902795954561, 3.4969666569132403`*^-7}, {1.0560183551490812`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.3544335200522325, 
       3.02126641592087*^-6}, {-0.35418277176366864`, 
       1.1748941244768865`*^-7}, {-0.3539569453050467, 
       3.02126641592087*^-6}}], 
      LineBox[{{1.1574477242525318`, 3.02126641592087*^-6}, {
       1.1596527228614333`, 8.145776389735112*^-7}, {1.1642483994186699`, 
       3.02126641592087*^-6}}], 
      LineBox[{{-0.9222612837332929, 
       3.02126641592087*^-6}, {-0.9215906511645053, 
       2.178206025809002*^-6}, {-0.9206847902702353, 3.02126641592087*^-6}}], 
      LineBox[{{1.1041137925895355`, 3.02126641592087*^-6}, {
       1.1062777594079969`, 5.719627260151567*^-7}, {1.1099962259503704`, 
       3.02126641592087*^-6}}]},
     Annotation[#, "Charting`Private`Tag$179470#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 3.02126641592087*^-6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612298676867123`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"a4105cc3-d62a-4dda-b565-14cbd3c431c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"DiracDelta", "[", 
     RowBox[{"t", "-", "3"}], "]"}], "+", " ", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"DiracDelta", "[", 
      RowBox[{"t", "+", "1"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X4t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761229877659643*^9, 3.7612299543739285`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"be703e7f-cb2c-44e0-96e3-f8d6463af2c8"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcL7Lrtuc
f8M+wPnHf12IkJdC8AFAB3l/
        "]], 
       LineBox[{{-0.9936224489795918, 0.}, {-0.1991217886741647, 0.}, {
        0.19003910331557547`, 0.}, {0.612221097116538, 0.}, {
        1.0061997029328045`, 0.}, {1.4331994105602932`, 0.}, {
        1.8524038934683922`, 0.}, {2.243404988391795, 0.}, {
        2.6674271851264204`, 0.}, {2.993622448979592, 0.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQnVybsYafl8OBAQo6A8ssjedww/ksIlOf1f/ig/Ov
n2790MIvCOeHVieZzTosBOfncL9WOhclAufLrz42je2VKJxfvcM5mH+2OJxf
sCxnm5m+JJzPw2SepPdUCs53zQ2ZqjVZBs6X2Cmb76oiB+dPKuqYaHBdHs4P
avPXnbtNAc7Xim4JXVKrCOdfe8a5aHKoEpx/Lumpo5C8Mpz/kGX5j6lKCP6X
ZRnrJdUQfMnXr2UUdRH8lOJP3/WtEfxfzf/X+oYj+GpLJaU6+xF8S/fbF3gm
I/g+L+e0T5iG4BfqKnydPhfB37NV7cKy1Qh+0DHjtiPHEfzUjK82HqcR/Aqu
7Z9Pn0Pw5/pZJV6+iuC/uOZg8+gxknsrmD6nPkfweaWPrHz5CsE3incX//gR
wXdl5DxX8hXBj1h8quXHDwQ/y7XHuuYPgl/73PfT//8IPgCnvoTr
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$179517#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612299556382704`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"ad57fd81-9940-4996-bf03-a3841897fba0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.0001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.0001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"X4t", "[", 
     RowBox[{"t", "-", "3"}], "]"}], "+", 
    RowBox[{"2", "*", 
     RowBox[{"X4t", "[", 
      RowBox[{"t", "+", "1"}], "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612299905842357`*^9, 3.761230034080401*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"367f4d9e-aa18-42ef-a2e2-8ffc77348209"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
G7jGjT8rM/5qti/B7HplH/tlbiSr1t6+f3we5JP2oPJFbmwsPCzVtt4GtuYf
wm6f5UYFrXf5tpYVkC64/NpPkxuV3ludnxSchpVaY8syNW5MUNU6suvhMig7
FZ1dOMSNJW9vJu5dm4PnB7bvI+7nxq4zwXE6+1uhcMKNoCPDjRzc9qzOj6ph
W9CvlWfbufGlhkWDpvQv0Div1xsjzo061ws3V9lX4DVDVmGnADcGPvar/hk+
B1U5oqEM3NwoFUFr9fNZM7DaOLkqsHCjRe1A7ChzPWiTx25fo+XGE9e2d706
+xskEnwCJFa40JA3x2rkywqE8V+5+nSSC2PUu/L7TszBLgcpqY5eLvSs/cwi
k90I8eO/Z/Y1cKGPYiKJ2acJ9p3LSfNELgSlizM7cA4ys149nUzlwr1Mp7MJ
pFVQJmofOxHBhS8z6JOysn9DkRs/c4g/F15MSZmeTawDjfmBhs23XHi65nwE
YbIFqo2iP116zoXucl/yPg/Ng07JfZN0Gy4kLDFSCr+sQqu0CoX7Ghd+D3NM
9mqehUs+9FNWF7hQIwH8Q8aqoX+jPrnyBBfm3fEOfObWDtct/B9TDnEhD/0X
B0OmPzBeZwaO0lyINImiAmxrYKUozdArxoWK2W94pDt/gS1DTtQjLi6MliGm
LK6swtN2rdO8tFy4vUfiwv17S/AqomMmYZETjz854ddCHgb3hzfen/rJiS6+
T0ZbR4rg44nFfWPdnMj76HPi0+QRCOR3bnOq40Tx0y9saauXIXSM57FYESe6
586sje1fg9iM78LZKZyo/3J4SE9tBlJd5fIvhHOiGR2v+/2GSsjVLzT97ceJ
qVEbozNe7VCy4+y2d2858ezHpWnasAWoWeoNk3rOid/nN/QuVa9DS7mlZokN
J2oksTsqLP6Bnk9rE1eucaLa4WV73jfd8OOG27u1C5x4JXVybDGvDCYVBWU/
aXLi08nexaz8KbilRG947h4H6n5f0mwn/wQbRp+1qescyNZoxZaouA6POkhf
X+tz4JELrOKPbmyCQ2QykE9yYOoTF03Hvll4/UhtuECZA7nfKzz1kasCL80G
Z6O9HBjL8zRI3r4b/ASuSC1JciB8d87ZGbkEwePTVd68HPjotLlO7YstiMx8
arWHgQNLNcW103YvQ+JrFs6qFXaMvkR//n1PD2QaBCSbT7HjqLXuxbTUSiiU
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
sVRjGtewTZi9Gv8fZS9Xuw==
       "]], 
      LineBox[{{-1.84542058029919, 
       0.00019517451518513836`}, {-1.8404072446955664`, 
       0.00003096548805126142}, {-1.8337176038270244`, 
       0.00009615306291456493}, {-1.827149763344723, 
       0.00003094426699876521}, {-1.8205819228624214`, 
       3.927679576791789*^-6}, {-1.8140140823801199`, 
       0.000026441969409870306`}, {-1.8074462418978183`, 
       0.00009321561370529105}, {-1.8008784014155168`, 
       0.0001836281432894826}, {-1.7999825063915502`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.2070177032741792, 
       0.00019517451518513836`}, {-0.1991217886741647, 
       0.00018117874861096886`}, {-0.1980849119724574, 
       0.00019517451518513836`}}], LineBox[CompressedData["
1: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
9BE5MPMFL4eaUhihndPildvZ5LF2UYjMZgpja4y6X/xvBVhF+Tx/aDePG52/
9WrNBJniXZuz+PC8/7QvSZOPF+OF+1jVY1cK44RDcV3MEx7san3TvvQyhVF1
s0mWFScDmtXxyeeBFMYdz3iahpgUUrJVRDTDKYyWtbqbg/8IYf+yZuXXcRRG
7ND+Ds8seQiHRhrqvqEweO7ujjimME2yZ222pOZQGF79+4yEhJVx9KTIAYMS
CqPkscL2sOQxsuBnybmsagpjVGySopWxBIUWfjdNWikMnxNrDwo70+CWui72
vwEKQ+Peobfy9xZBUYmVymBTGBPWF5GxQQrlt1NKPtOpjJE6mcYnphLwnDzR
aClJZdjFaOzsC1WAuvMyZpkilbGnsFbCO22O1H5vpW9bQWV83sgzG9+6FNf+
iV703YjKiHxU9iIyepSsTNqla2tOZVx5vuRJyCYVtMiKm9fvmOfv7Lji20tB
kH+ZvcNeKsP23UHNwAtKMGb6n2o6TmW4flVLmbWb/7+9xO/ABSrjPKMpgzks
jfAy9oN2PypDQj4llPeaEtYbpSe53J3nn02pqtzHA+az0/m90VSGx/c+qt+Y
Kh6La9aefEllTC+7aVV6cJRYXWnvHUqnMo68dlojqrsMU72PuGcLqIyUz0Mh
2cdnyQs7e6mJSirDceuZrrCNKthVKKnh+YvK6Pi3q090fh6l6VWum+6iMtij
Leal3+SQEhNg7TNKZTAgdV9ivTIqpAN6xCk0xphubIb6fH13B93weSpKY8T0
652fo/KBSr8hs3oxjXEIVudWC40ThSvXk4s0aYxVC87rLGybIGvG/c13G9EY
wXmNrHoLQew85f+7x5zGWNosHOuVJofTndfOetnQGJNBpwx0lqri5t5rAsIH
aAzfhlt5Mq804Z160KztCI3x//vO/wElCQTZ
       "]], LineBox[CompressedData["
1:eJwVV3c81e8XR6Jhu67r3os7pEJaqMS5J+mbioYyExENNJDVUEoaRImSJGS3
RNlkX3vPUPYmMyv1u7+/Pq/P63mec97nnPdZdKvL+jY8XFxccSu4uP7/nXIp
V9h4WRBVbpccmw/cyOplMjcUOQki721717cOG1jjYc2m4CmIHr+2tvw3zWTN
S/k+TvUTRANJzXBSmTSLJwhzt4QKolbFc68jP8RZAiKzU/Hxgsh1RVLDN4+P
RfSJX8dMFUSXfgbI6c4Cjc/cOLRQEHtq5T6ubO4GBU8xH4k6QYwf7imq8egD
lT/F2X4/BfGalLy02Ol5ANfrE/xjgtjURMu9O8DP0pnazPRcFMRHRW5Zfobi
LP2LvQaL/ELoeFk7kX8jhWU2GPzASUIIE9ZutPq4ns6yOaOXOcoQwtbS4Hc3
B5isSz+4x222COE/az4FdF3HcjNJof3UFMINn67EzUevY91psD1ufEgIdX79
4jruJMfyPSLrXWsshLdte424hBis52X1aQfPCmGWhL1KywtpVvi+ByMFTkLo
orYhU2A3kZWQqyGj6SmE7wQDvo7OCbK+7J48muInhCHP+y1Jj7hZOSnRdzeH
CqG+bIhfn/EklGw1TYmLF0LRUwdWvTvbBXXvhYboqUJ4WsV8NDS+B9rXF1Be
FQqhor+Hq4/0DPRHuh4m1AnhimbFX6Y/eFgT0kqej38K4XWSF/nnkiBrMbgz
mW9MCLNvrih/0UNg8RKC+m8tCuHd++vLDx4is8TGPYTE+IVRzUi6oCx+LYte
cl4tSlwYTR/eSeDSEmNtidQ3V6MJY/aatQXpcwQW3NDwLlESxlDnu1Vu8itZ
eobyH013CSPX+yeln6fJLLMtIk2j+4TxvEzdVf8j02C7ZnHZQ18YH8lp1ZTY
ybDce3vWiVoII1+yTuLaT53wIKdS762dMOalaVrERcuwngenOqu6CSM1S2oH
7UUfRDtGvGZ7CWPaTJ1wdTyF9UXXp8jkqTBqsDMqlNcsQL6889jIa2EsifJi
U3cQWbVcFhIeCcJIIO31jXflZ41/2WYTWSCMcWThSWqaKGvZj/pYpUYYJXUC
sqf1eFgCF/i+FrcL44ngVynabCKLvHei3XhIGHlPlm3fe2wSNkp/5x2ZFcbU
pi8rH+VJsUKXLJ8Dtwi6hPGHea3uhLeDhgn3+UVwnVvU8I6VZFZC46GcGkER
nGuc2Iy/eyApH+ukCCKofNvN5vUzSVb6J9V+K7IIvq9OXec9Mgu5oQqL72gi
+KMzYof/KnFWyUNZoVl5EbzATiqxVeFlVbsQGLBJBAVdC45bdq5hNZ1ZrXZ/
uwhmRvfmuloIsX4c/XugZpcI5nwSf/R7LRerT3P6lBSKYHqn1YDFXXHWqMKg
g9V/Iihz/3VS6plfMCPZce+drgiakbib0iSJrCXeupcz+iIYPLdjTubnD+CZ
Kv6gaSKCVenajxwsiKw1PzPzvC1EMNwiM3R9WDeIViQ2VtuIYG4iyBoaEVik
9Oghkr0IlvnF+By7Mg20mJBlS0cRnCo0u+B3W4S1/pm/6Ds3ERRW699R/pqb
pXzba92MhwhGUc0rfa/zs9Quuu/SvMd5779ttNl4DUvT9JKet48IVi/1aWg5
/AHt/Wcsq5+K4OSmxuvyQyIsXRVjZ1KwCPrGb+e7nzQKx+l6Dy3DRJDP5Nbx
HxvFWaZCWq8Tojjn8t+0lL91gNWS2ufpBM65fFu9hqM468KgYpHGZxH8sMr5
ysT1LrjSSGu9lyqCqnZtwZAlynLLlxiryhZBx7lk1eiLk3Dr0xpuUiHH/0IB
9xIGBVjeof8IlmUiaFxbduG34D/wezizIaFGBOUEuIYfpPGyglyGNKabOPbZ
qh2mkPhZoWd+HNXo4OA3ezfCcFiAqKP11vd6RJAUR/BSeyXIeqdZ4lY1JIIt
V87e8744DEkK2b6SE5z4l+xSHCkRYWVIJoWf/i2CxXn389iJ7ZDHG/sl/o8I
7uNXN54UFmWVTL4qmeIRxd9hbx6+vdMJNT+etO9eLYrr4xodhlWFWc3l9ya8
hEUx8KVGTLTPLwiE1/sMiKI47sr87GfJz9L//CVknbQoWkxmK1hrirBE5Cp+
zTJFcebZOof8lFWsquc92sUKohgkWnHsyqEp8F299PL5VlEsSbP+/uBFOxy8
Ifbr7E5RDCCxP+4dX4JVvzZq72CJIkGGy5q/by2r2HLPS/7/RNFrLIF4doMg
y6vBeLxZVxRv8t4n+p3lYmntv7I37rgoLly0LTtn0wVcGfeD3UxFsTCipqrq
8jDkKL0Z07EUxcHlIxfrpHlZN96kaEmdF8X7rApF638CLHWxqhdDl0QxpvdM
65EV/Kx5r77RdGdRZBMVdp3Sn4KUuT97Ht0QRct9K6N/X/oOV20JL0zviiIt
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
m1zcZDJ20DBaSSZY71kuWL1ds61fnYbGs0JmSS9K4HlN6D4xoGG6wlv19UTO
frisbAJ7aDgfnKp8do4NfxXy7G21OfhlLEYJcbmwzfj47ef7afglcPHQuHY1
nL3X9yz/IA2TXDePFb2ugZAk19hxPRqO8ryuXNeVB1U/V2eSj9Hw47vDpzs4
+HkEQ6v+O0FDrqZ2dceQWlBTV+52NOLYV058asguA9tzubNhpjR86dilCo++
QVig/uryUzS05eUhxU2UQ11eL3XuNA15yPUaA7tqge+XyxamNQ1F/c0IkcMF
oE5drX3kHA3Jfucu2V3Lh8sHXhldt6XhVe6ylK0JNRDlssku9iIN7+72Wadt
UQktb7951F+h4V69UXPLom8gUHss4J8TDaPOfJHNuVkC+LcnWtGVhmdXlRlr
m9fCVUWXdKNrNIzNTXU9Z18MccarKu/epGFoyKsatRu50H4vpPPTbRruWHFO
uzy9CkSSlWba7tLQzEHQne1SDdqdOfyr7tNQf8rrypuRXHATPEZReUTD6zvJ
sUG7i+C9eo/y6cc0rIDmOVX+Wug856zl+4SGXUsqjhNSpUAI4jdMe0bD3Rmr
PzJqc0An/+WF3uc0vKDnYt4TVQ43fineFAmh4YNDLftdbWvgMzXnicZrGn5V
vFUX8CUf+g8cjTofTsPWh+55ko75QHbtTg18S8O6dQmGjpo1cDjqanluDA0N
Tknwn44uhzu1fD9H42m43efbsVPPciDlb/AU6QMNE8rHz5yy4OSXoiLfvkQa
Pn9dujqc418Zk2wph2QO31hb7YW5i0Df+8im1yk0FDN9emnINBdiTCYOpKdz
4n8us7uevwQWlJ6ebcyi4URgHCWLtwZ0ubbdnfxGw1Ki8plfu3MhvL7ujWAB
DR9JCkp2LLJhOsYpa2MxDQseubpvqKyG/64RWveV0tC9ueX7JelcCNH7OmtZ
QcPExrzGLs78O0YzFPOo5vDlR4Gu/tNqwJnfyiF1NDwjkbxU/vcbBLJfHEpp
5NgTPS7d3cmGgZCd5+taaHjiYEHAjEE1qF9q9Rpvo+E51vX56IJv4LfnWsSa
nzR0uLv9V0c9G7oIlBz5bhqyflVvEaJUg8pg5netPhr+Z3qRcv7hN3iQaTZn
PkjDw/ZfDjQWs6Hdb1n8+ggN24lLwmGdVbDZKmzLi3Eapul1dwsd/QZ3VFl6
yZM0vAFk5ZJ0NjSt6rxQPcOpJ6u4pN/GVMHG9tveI3Oc/PvQ1fZc8hvc+ER/
y79EQ68Wn9cp79lQcyf/G/Mvp3693aRDvVgFTMMz7SxuOhZ2VUf8+ZkDLht5
F07y0tGanvAy/A0byv5ESbjx07Huqdm9VSpVIF2zb1vgGjrSjin+0IjPgStv
+w8nCtLxdIu/nHcAGwpd7ttViNBxvVFH+dmlSpA8uOHBoDgdx9cf1znhlAO2
0qVRvJJ0ZKuU47l7bMiZuJBHI9Ox+YYNUY3TT8UK1/zQkKZjU+TGaBbkgM2L
d4vGNDrOCJlN7nVjQ5qtrqQzk45PmHxnnH0qQQDGtj+Vp+O033Dx0uocsBD1
O/phIx1HZt/votqxIalX+WKpEh1ljMjJzBOVwJdW/bBvMx3/xdb73mvKBhOf
KzHc2+n4J/e59MQpNrw3Fy2QVqOjx7TqWpSuBK5tST937aLjf5XL3a1vs+H4
yuN/DDToGFRtEvHtKBtiWqZJjiyOPd+oTqX9nP71LlDVT4uOYZ9W5s86ZIPe
LVX9hH10fKn8svTRXjaE6zddKtaho3L559mcxAqYWefq032Ijgra35WbMBt0
FiTj/h6mY5m92atjamx4VZFWSNan49Uv/eGy1ytg/I1Jl5oBHS+p+6q7iWSD
ltPisr4xHdcYrqQSNrIh6L9X5Msn6dg49vXe8L4KGJTS2OFjTsfAoGXu1s4s
0BhrPx5rScdPHwyP1VHY4J9780qBNR21DwmlyYhWQPczmcc/z9FRdzT5w+zn
LFA79y1+yZaOctL2e3yF2PBQ/XSx5CU65saUHc5sL4d2Qe6e7Q50NA5451B+
Nwu2dEX8O3KVjm+2fZ3aw82Gu1+0qPaudBTxizjzLa4cmu737HxwjY7FR9c+
NjLMAoWTXgZRN+lIjVmwm54uBhOHFDFeTzqeGTw8RM8pggf3B6vPeNExx7M3
4MKDQkh5TX5ccJ+OOmnafa4mBdCXrHuQ6UNH5r6hu+U78oFQ5sF/14+Om58s
m/tvzAOtzsTC7qd0NFd63evK6acOv7s9tYLoODZDWPFfZg6EC0iwIoPpqKg2
rjOnnw1VjP1/uEPpKPRha6HWjixY3umebvmGjrtIrbfiL2aC0pF3LnmRdCTZ
p9NqFzLA1KZjOz2GjkNXDE86dGTAw+vCk7fjOXiDcu7qkjIh7emej53v6TjP
te/E9rhM6I91ssNEOvI0C5eIP8wCiZzoDeHJHL7/GY0R+5oN2g3Nff9S6JhU
Wcn8JPcNHIdXv7XIoKNoOLS5nsuFCC6N09+y6chbGhBQfiIPaoiXpGXz6Cho
lqyVeCIf/iqFf/co5PDN4rctzbIANu2te/GDTcc22leTJqdCeHRZTSysio7C
Z5SXAwOKIf3e+erlWk5+UYv6JDn5O/gqxPdUIx0/30lgUW+VADGp4kB2Cx0P
ZrLl1E6Uwr6Sv3zS7Rx+RTb9eSBQBld/bCm88ZOOu9uuBnW/LYPIGSvP9m46
Ejf/060jlkPtmiDQ6Kdj6Xh0TaZVOXDR2Uuvhjj1w1ByVd+9cti8YyFtaZSO
oZqjvR63ysFcT9Hl5ATHvqLkobgj5eB75tT2zGlOvD1jTS9z5stMd/8J8hwd
+9vSNxS6lcGwf96Ha4t0vDLypsixqRRIMdO235fpqJbwn5IwoRT2Z63boM7N
QLGVu706VUvApc6o7yUvA3NTqD/ZyIaowYeRC/wM5N1VFcVUL4b6v5kWJmsZ
eKL9nkHi+iLYokj7ThJjoPl64mOzuXyw2KP/wk2CgW9a3e686ssDPyOvEy0k
BjoSXg7zcubDrIspojupDLxC0rtl2vINRu4OVr2QZWCGfa3zNZkcIIeQfecY
DCwIbv0c/yoLdBJ1DxjJMzBipzGpxygTXIs9+FI3MtA36vnJRJMMiGlPLCBu
YqBouaAuX0w6NEx133bZwpGnmmKqgOmwYrUENG1noP2Dp60RG9Nhm+z+JdUd
DJyz+3BY0SodTqu6pwWpM1Cex3ombyAd/A+9c57VZGC0m/z+dykZkGPZsc1g
DwOfnl7Y71eaCaOuwhNftBnoGpjT80wqGyh+ez4QdBg4vFCf6R+WAwejnGyv
HmLgD+NR5eD1nPkkI3p9w2EGEm32DoSI5EFsTXPvdn0GOvi8DGzizYem/tWR
zwwYeHNr/58Xf/Oh+MTD0HRjBlbX24eeZhVDSv6qFz9PMvD5Lp+wu5AJMVse
PF1pwcADWusk7n4ohedh/L6KVgyc6LFd6aaSDt4C972P2TDQeinnz+kWNrhc
4/N0Pc9ALTu229vYXDg7eO/6azsG5nXKnsjakg8GhitdCi4x8HzPUqb4zWLQ
LvS6MuTAQMHcjqT0Yxmgso3XTtiZgeutp8QYl0tBLvyujaobAxUE7hlqGqUD
QWjF6ZPXGejPDvi6xGQD7407pp4enPjhte3fV+bBzBC3QawnJz7C71rfXsiD
XiPPI5VeDFRZ9fP+4c/F0FDEdXD6PgMDSq+F83umQ+H229pSPgx8EkR1GZYr
hS8R/4Dlx8D4Pf7mPE/SIUr41i6bpwysDOWP9LYrhsCbf7f7BDJwy9IaipJ1
HniN3FT+/IKBK65tbVROyIWrJssbmkMYmHQ18IJvWzFYs28wl18z8G/70guj
ijQ4rvpHmhnB4XfXGs2T1SWg9fY66UAUA1nh6av72zl8EV0SuxzLwFc39Xil
EouAceuaYFACA1P5Dx+7mZcHYmML/JkfOHw+46pu0P8NeE6683Qlct5fes9j
uVQMUyXzf/i+cPhgk3HdensadKu5zSmlMtDY55Ap3+USqIuam9TPYKDZnIv8
zO4MyBdzHXXLZmCpbTmldKoQkm7/7g/LZaBQ+ifhHGo+RI47dxUWMPC2fJx5
xKMcCDCbbRsuZqDfwcoNbiJsuFN2tUmkjBOPpSPvM7+mguPOmRq1SgaSLbdJ
+POWgFWMU7lZDQOTVxNMNr7LgGOE6aI79Rx+Qeq2BJVCwDuOuXFNDBz9T545
ejUftkxMZlS1MnDpX363j1Y20Mwdvs60M1CfmJoWRGaDSMXEJ3InA8MaycRv
+qnApX4lAXsYqPzrgEncEzZMxP6KOtvPyafc2wKuGzKhU+LyG98hBvrw+38r
cymAmrvjL5NGGbjDRO8/Qmk+5E5eDGz5xcCVL9V3qghnQaLFmN/fKQY6nWzc
EyTFmQ8q7R/K/WZgaF7TtdjVqfBk9+jdgwsc+5xa5sQIbLgdb+dx5Q8Dn33/
ZcL+nAlXJEfcnv9jYPMC6fW2jHw4fc/WKYuHife3SRsfJxXAkemhi90rmdh6
4OBrv8kMAMsL51etZqJP8w+fC4JsUK4etFIWYOLpyyGT3q0pIKN5/tQJYSaS
t+X/eOVfDELvBoyuiTHxjl12J9e+LPhLOqcfLsHEBTvFk13/8mDcu1+3mMTE
VxOOl5o5/ebHjM3+UQoTic9+BZ4ZTocqq749YrJM3KLmOU/5XQxdvLHzQQwm
cm+aGJRRLICZmPOfpOSZ6Bqb3REWnAl8BxTOvt7IxPErJof330sBqZERKn0T
E+vKEq7X7OT038cf6qO2MHF9QEZpU0c+wObLjzaoMFHFQ1mXFlcMx2q37Hm/
g4kffzEz7zQVgbXT1Nzm3UxUqHu29QEhD1wlvnxMBia+n3j5ZiE4DR6lOtvs
0GKiyBEvi791KRBqsoOauY+Jqfmiumk7c+DT0nwdHOD4R0nebJdeIeS/zniY
r8vE33/PKDx5z8lv1g387ygTdZR6ley0CmGgS3Ou9DgTVc+bBo4Sc2Dx7r8P
ekZMdLKln0mKTAFB+TzrWlMmfu/dNn4M0oBWcodiYM5EwnayjW4uZ3+21a5r
sWTi3PirCXOTItgnwPfQzIaJLzeFP0qXKgbjj2xW53km8gx9/pp3Oh9sjz78
fcaeiQFHLkos3cyAm1MHPwxcZmL4fzrrHjR9hSeBAtZ2TkwUPxXzrdI/A96q
VZF/uTBRqcjA5bxRPqS0+Nc6XmPiheOyfz/0FkHJtWMPft9kIqPpWZ/3ciG0
UcVZ1zw59pK+DBywyIXxnIbZZS8mcnVVjXz9wMkHy+fvPR8wcZ88110btRQQ
X2F8ZqUvEy/5tV29eS0b5KOlyA/9OXgupryLSC6AXfvbagSeMTF4W5vdzZ9F
oDsUev/JcyY2ss7ruzsVgLmPORBCmLi6SKwxsi0LHDbRZl+8ZuK6e/Kg9/Mr
eFV3vaNEMDGmuVOLPyYVnju8tXoTxcQVK7bF0fVzIV7cRooZx8RVOnrrdn8s
hKyv8jUx7zjy32yQ/u9AEVQbDXorfGIi9dyUwt2IPOheiNf8mMTEqPPSPm8c
02Hmld3M1hSO/esjaB5bvgI/bHr3NZ2JZ0IF02LG04HcOW65K5uJB2Le80U1
54HSnURSdi7nvHylgIdiEbDkHKuxkIm+XAu//ttSCPrF270L2UzcE/dZo/nc
N7A5P6uhU85EKatLrK6qFHBbkzpdXsXEXGUPtSMRX+HRe7eEI3VM5MtSeKha
lAWvD6tb1jdy+ConTy6iF0DixJKkUSsT92r5lO+ULoL8gOyq7+1MPBm0vf3j
p3xoVLl1z7yTiQM+A+cNOfVhsAk1unuYOLrykt7Euq+w6MYzbTPARHNVhaZW
QioIUgrjh4aZOEibCXev+wa07HunL44z0f5L5LHytYWwzWK/5OQkR/6y3a7a
u4Wwj3t11dVZJp67GqroPZoLxm/LvObnmSjpc7DK1TkNbPf57r7xh4k5n4L3
fA74AjcH9Kb+/WNi0xLXobkT6fA/Q3TJ4A==
       "]], 
      LineBox[{{-1.6250412876193543`, 
       0.00019517451518513836`}, {-1.6235467083933746`, 
       0.00016299179954936722`}, {-1.6169788679110728`, 
       0.00004874755394715474}, {-1.6104110274287713`, 
       4.2124279294337415`*^-6}, {-1.6038431869464698`, 
       0.00004979948981772008}, {-1.5972753464641682`, 
       0.0001758050365248683}, {-1.5965208498600005`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.10694494554712938`, 
       0.00019517451518513836`}, {-0.10183156567672966`, 
       0.000014091911881280126`}, {-0.09575092673938997, 
       0.00017096771847310363`}, {-0.08967028780205027, 
       0.00018518121408874342`}, {-0.08358964886471058, 
       0.00001031134619053849}, {-0.07776220835658848, 
       0.00019517451518513836`}}], 
      LineBox[{{2.3103034255932866`, 0.00019517451518513836`}, {
       2.316283803455559, 0.00016274740387823574`}, {2.3229091502795374`, 
       0.00011074135371364547`}, {2.329534497103516, 
       0.000058752814176147646`}, {2.3361598439274944`, 
       0.000023594651000114836`}, {2.342785190751473, 
       0.000017612395806395963`}, {2.3494105375754515`, 
       0.000044659887032823936`}, {2.35603588439943, 
       0.00009852789204134236}, {2.3626612312234085`, 
       0.00016442099757214916`}, {2.3661298930625727`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.5483570638488215`, 0.00019517451518513836`}, {
       2.554796289118786, 0.0000854325665529377}, {2.5614216359427644`, 
       0.000020287385552832517`}, {2.568046982766743, 
       0.000028824308521819556`}, {2.5746723295907215`, 
       0.00011563942937036161`}, {2.578292335995584, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.1593578041238583, 
       0.00019517451518513836`}, {-0.15655731611278684`, 
       0.00013882744905207865`}, {-0.15047667717544716`, 
       0.000041564837222724034`}, {-0.14641741670708713`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.7164719698326087`, 0.00019517451518513836`}, {
       2.716904536220161, 0.0001797283335973386}, {2.7169938107655462`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.474902343952225, 0.00019517451518513836`}, {
       3.4775848707719987`, 0.00016039592243481326`}, {3.4841636939882763`, 
       0.00008808873279952846}, {3.490742517204554, 0.00003678598398172804}, {
       3.4973213404208314`, 0.000011359151259720882`}, {3.503900163637109, 
       0.000013065438426135773`}, {3.5104789868533866`, 
       0.000039572845269154034`}, {3.517057810069664, 
       0.00008544914348205129}, {3.5236366332859417`, 
       0.00014302787257052443`}, {3.5293078044645427`, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.6971451203402086`, 
       0.00019517451518513836`}, {-1.6957929536986915`, 
       0.0001719281611552701}, {-1.68922511321639, 
       0.00006731926142434228}, {-1.6826572727340885`, 
       8.741531240751565*^-6}, {-1.676089432251787, 
       0.00001959443978427342}, {-1.6695215917694854`, 
       0.00010034247171098133`}, {-1.6646213351119263`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.05814743955369875, 
       0.00019517451518513836`}, {-0.053186454178012134`, 
       0.0000861462399710071}, {-0.04710581524067244, 
       0.000054044030020524017`}, {-0.04188966788755326, 
       0.00019517451518513836`}}], 
      LineBox[{{2.3914501793231655`, 0.00019517451518513836`}, {
       2.395787965343301, 0.00015394078734084704`}, {2.4024133121672797`, 
       0.00008533041029601384}, {2.4090386589912582`, 
       0.00003313393759906911}, {2.4156640058152368`, 
       0.000015385462705291372`}, {2.4222893526392153`, 
       0.00004030944562340429}, {2.428914699463194, 0.0001032850327612334}, {
       2.4355400462871724`, 0.0001876488828585972}, {2.436150862694643, 
       0.00019517451518513836`}}], 
      LineBox[{{3.578803194762679, 0.00019517451518513836`}, {
       3.5828460422324397`, 0.00016077293781950635`}, {3.5894248654487173`, 
       0.00010610783892013893`}, {3.596003688664995, 
       0.00005948739589721601}, {3.6025825118812724`, 
       0.000026294862034567215`}, {3.6091613350975495`, 
       9.920521219784215*^-6}, {3.6157401583138267`, 
       0.000011403587088826456`}, {3.6223189815301042`, 
       0.000029397388852659097`}, {3.628897804746382, 
       0.000060448451904209015`}, {3.6354766279626594`, 
       0.00009953964757180566}, {3.642055451178937, 
       0.00014081531567970078`}, {3.6486342743952145`, 
       0.00017838599343232453`}, {3.652480215699521, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.8921203600730212`, 
       0.00019517451518513836`}, {-1.8872347307753605`, 
       0.000060279466810237685`}, {-1.8805450899068186`, 
       0.00004767290798391347}, {-1.875670439694148, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.4811807433151691`, 
       0.00019517451518513836`}, {-1.4790542177827404`, 
       0.0001267439292395487}, {-1.4724863773004389`, 
       0.000011660226298388862`}, {-1.465918536818137, 
       0.00004255258255253641}, {-1.4603186491746196`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.399308769171787, 0.00019517451518513836`}, {
       3.4027666299030717`, 0.000022757575439465652`}, {3.4050919407367517`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.6921223399770393`, 0.00019517451518513836`}, {
       2.692165860673291, 0.00018954411650745796`}, {2.692429686126546, 
       0.00019517451518513836`}}], 
      LineBox[{{2.470394051814233, 0.00019517451518513836`}, {
       2.4752921272310435`, 0.00012792050998663287`}, {2.481917474055022, 
       0.000051370436355647664`}, {2.4885428208790006`, 
       0.000015415328531446514`}, {2.495168167702979, 
       0.000035049835959034156`}, {2.5017935145269576`, 
       0.00010880234006837531`}, {2.507020684954274, 
       0.00019517451518513836`}}], 
      LineBox[{{3.2800169066272775`, 0.00019517451518513836`}, {
       3.281509259893528, 0.00007392607806928165}, {3.2822823403968058`, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.9186733511454106`, 
       0.00019517451518513836`}, {-1.9139932942495288`, 
       0.00018041733214173652`}, {-1.9073036533809868`, 
       7.277375539117875*^-6}, {-1.9006140125124447`, 
       0.00012911380684743116`}, {-1.8968000790716835`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.6781310922817492, 
       0.00019517451518513836`}, {-0.6757953125133871, 
       0.000018126665961756954`}, {-0.6708694602315715, 
       0.00019517451518513836`}}], 
      LineBox[{{3.3779877102822455`, 0.00019517451518513836`}, {
       3.378515155901163, 0.00014690492412605707`}, {3.38457802440164, 
       0.00014932926593139566`}, {3.3851437482316222`, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.7694713614390123`, 
       0.00019517451518513836`}, {-1.7680391990040087`, 
       0.00017596786354271926`}, {-1.7614713585217072`, 
       0.00008330804092941942}, {-1.7549035180394057`, 
       0.000018785560061108608`}, {-1.7483356775571042`, 
       6.632587248634205*^-6}, {-1.7417678370748026`, 
       0.00005397549134084671}, {-1.7351999965925011`, 
       0.00014777487514961707`}, {-1.732390326535932, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.987398644490697, 
       0.00019517451518513836`}, {-1.980889702934949, 
       0.00011929441927360032`}, {-1.9742000620664069`, 
       4.6952727331402295`*^-6}, {-1.967510421197865, 
       0.0001517420174107715}, {-1.960820780329323, 
       0.0001923180502629646}, {-1.954131139460781, 
       0.000022579812032185246`}, {-1.947441498592239, 
       0.00007836233101375969}, {-1.942158592883474, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.553070544619155, 
       0.00019517451518513836`}, {-1.5513004630880576`, 
       0.00014826107615569268`}, {-1.5447326226057558`, 
       0.000029047397953034503`}, {-1.538164782123454, 
       0.000011434242014566268`}, {-1.5315969416411526`, 
       0.00010946887124315911`}, {-1.5286116405258903`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.04020023176413185, 
       0.00019517451518513836`}, {-0.03494453736599306, 
       0.00004615707279462398}, {-0.028863898428653372`, 
       0.00009054051878867749}, {-0.02307620175075036, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.869930115017151, 
       0.00019517451518513836`}, {-1.8671658081697347`, 
       0.0001564988920775306}, {-1.8604761673011925`, 
       4.6147970507012395`*^-6}, {-1.8537865264326503`, 
       0.00019042017443059216`}, {-1.8532534320463812`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.6259466263791404`, 0.00019517451518513836`}, {
       2.6276751041825497`, 0.0001506569745490162}, {2.634300451006528, 
       0.00003593267504790468}, {2.6409257978305067`, 
       0.000021785099485324488`}, {2.6475511446544853`, 
       0.000124867722809666}, {2.6498618367401763`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.19140814589868063`, 
       0.00019517451518513836`}, {-0.1869605107994853, 
       9.750439216725903*^-6}, {-0.18182894861195964`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.38981915660396577`, 
       0.00019517451518513836`}, {-0.3851949683815694, 
       9.194413884440294*^-6}, {-0.38124602098449645`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.9018462347826309, 
       0.00019517451518513836`}, {-0.9016612993819823, 
       0.00010249380247147158`}, {-0.9015238233698374, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.4858095431703506, 
       0.00019517451518513836`}, {-0.48443399755885197`, 
       0.00007382840370464842}, {-0.4782315582352718, 
       0.0001774844416751739}, {-0.47800958803891075`, 
       0.00019517451518513836`}}], 
      LineBox[{{-1.9392088062681327`, 
       0.00019517451518513836`}, {-1.9340622168551547`, 
       0.0000914296188125609}, {-1.9273725759866127`, 
       0.000017748312348701892`}, {-1.9209136117549512`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.1419498527926432, 
       0.00019517451518513836`}, {-0.13831539930076778`, 
       0.00008152462178207968}, {-0.13223476036342807`, 
       0.00008210502409212782}, {-0.12837315453503922`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.317738940245437, 0.00019517451518513836`}, {
       3.317886470896391, 0.0001754544898488941}, {3.3197814777102446`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.4375769482974315, 
       0.00019517451518513836`}, {-0.43481448297021064`, 
       0.00001733550181489296}, {-0.4300367234239286, 
       0.00019517451518513836`}}], 
      LineBox[{{3.2205099241461017`, 0.00019517451518513836`}, {
       3.2208805748887563`, 0.00015293871675703313`}, {3.2210463963547955`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.7689877814596839, 
       0.00019517451518513836`}, {-0.7687989541651616, 
       0.00015714246977307096`}, {-0.765404941611999, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.4616754286637203, 
       0.00019517451518513836`}, {-0.4596242402645313, 
       0.000038202027285265306`}, {-0.45410397050167084`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.07679490648061776, 
       0.00019517451518513836`}, {-0.0714283709900312, 
       0.0001348121249448297}, {-0.06534773205269151, 
       0.000025160373594295175`}, {-0.06003589518344502, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.5099288485820163, 
       0.00019517451518513836`}, {-0.5092437548531725, 
       0.0001273692980932296}, {-0.5030413155295924, 
       0.00013838593300565002`}, {-0.502414160013813, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.12437302018128979`, 
       0.00019517451518513836`}, {-0.12007348248874872`, 
       0.00003832815970821054}, {-0.11399284355140903`, 
       0.00012813288512178718`}, {-0.10996842624683292`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.75296549870903, 0.00019517451518513836`}, {
       2.754012549540467, 0.000012741637351839115`}, {2.754946768939158, 
       0.00019517451518513836`}}], 
      LineBox[{{3.3396339690044687`, 0.00019517451518513836`}, {
       3.3421379448982997`, 0.00003931178226436674}, {3.3436229586242456`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.852585815335215, 0.00019517451518513836`}, {
       2.852967251727949, 0.000029346773494412475`}, {2.8532405871936137`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.4381101908204563`, 0.00019517451518513836`}, {
       3.4391438409059347`, 0.0001273046752402243}, {3.4452067094064116`, 
       0.00009780891047062802}, {3.446776491494773, 
       0.00019517451518513836`}}], 
      LineBox[{{2.6725190321029912`, 0.00019517451518513836`}, {
       2.6736118540131377`, 0.00006486174713741512}, {2.67566057529, 
       0.00019517451518513836`}}], 
      LineBox[{{2.871392833743973, 0.00019517451518513836`}, {
       2.8715212583881025`, 0.00010543539795552323`}, {2.8716694823191293`, 
       0.00019517451518513836`}}], 
      LineBox[{{2.7720623426878435`, 0.00019517451518513836`}, {
       2.77256655620062, 0.00007478302604632579}, {2.7733169303054117`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.3585821960862985`, 0.00019517451518513836`}, {
       3.3603265503997313`, 0.00002363323869736823}, {3.3631686541981765`, 
       0.00019517451518513836`}}], 
      LineBox[{{3.117593568655512, 0.00019517451518513836`}, {
       3.117811810380644, 0.000013847950860124714`}, {3.1180638010855106`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.8553557152341006, 
       0.00019517451518513836`}, {-0.855159478556095, 
       0.00016807772920053677`}, {-0.855088103441322, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.17455982936545267`, 
       0.00019517451518513836`}, {-0.16871859398746625`, 
       0.00001510405648163978}, {-0.16426884445844012`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.7234311230226864, 
       0.00019517451518513836`}, {-0.7222971333392745, 
       0.00005691754200627971}, {-0.7174691484166608, 
       0.00019517451518513836`}}], 
      LineBox[{{3.2382242762706266`, 0.00019517451518513836`}, {
       3.239069180390188, 0.000015865836820315656`}, {3.240180900415742, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.5799794524882546, 
       0.00019517451518513836`}, {-0.5774705874125543, 
       0.000031918974849073544`}, {-0.576021443666878, 
       0.00019517451518513836`}}], 
      LineBox[{{3.177943356623261, 0.00019517451518513836`}, {
       3.178440495385416, 0.000011337403854177297`}, {3.1790421740761134`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.9482296241007241, 
       0.00019517451518513836`}, {-0.9481631202078695, 
       8.412367586936272*^-6}, {-0.9480570350266146, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.5336145544146916, 
       0.00019517451518513836`}, {-0.527851072823913, 
       0.00009922935132750658}, {-0.5268926441531869, 
       0.00019517451518513836`}}], 
      LineBox[{{2.7341845308954422`, 0.00019517451518513836`}, {
       2.7354585428803144`, 0.00006363826643747835}, {2.7361276313008247`, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.6332946961826488, 
       0.00019517451518513836`}, {-0.6292934916874999, 
       7.1622096036836666`*^-6}, {-0.6244022060635749, 
       0.00019517451518513836`}}], 
      LineBox[{{3.4186519346631687`, 0.00019517451518513836`}, {
       3.420955235404503, 0.00002623927400374904}, {3.425211508163338, 
       0.00019517451518513836`}}], 
      LineBox[{{-0.5560745423189849, 
       0.00019517451518513836`}, {-0.5526608301182336, 
       0.00006260386516599852}, {-0.55143025665619, 
       0.00019517451518513836`}}], 
      LineBox[{{3.298437959112017, 0.00019517451518513836`}, {
       3.2996978653949594`, 0.000020204940372273253`}, {3.3015310777572937`, 
       0.00019517451518513836`}}]},
     Annotation[#, "Charting`Private`Tag$179566#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.00019517451518513836`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761230035262781*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"2c913952-dab3-4ef6-a1e5-f4edd603e2be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"NormalDistribution", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.761230178990595*^9, {3.761230318405471*^9, 3.7612303692302933`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"47665348-75aa-4af4-9143-ae118f36f44d"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612303721253605`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"2a865169-566e-4f65-893b-ef7851451c03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["NormalDistribution"], "Input",
 CellChangeTimes->{{3.7612303828851924`*^9, 3.7612303866685824`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"ea0a851d-40c9-4a1a-b017-e6d1ab65e6aa"],

Cell[BoxData["NormalDistribution"], "Output",
 CellChangeTimes->{3.761230390363988*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"31954d80-a92b-4299-b1a0-d1d8efbe088b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "plot normaldistribution", Typeset`newq$$ = 
   "plot normaldistribution"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{12., {4., 8.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "plot normaldistribution"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[71]:=",ExpressionUUID->"129b11ec-945f-497f-a801-2b24d636283c"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not resolve host: \
api.wolframalpha.com\\\\\\\"\\\"}]\\).\"",2,71,4,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761230425653537*^9},
 CellLabel->
  "During evaluation of \
In[71]:=",ExpressionUUID->"613adfa7-de0b-4ffd-9a70-829ff7da680f"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not resolve host: \
api.wolframalpha.com\\\\\\\"\\\"}]\\).\"",2,71,5,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612304258221354`*^9},
 CellLabel->
  "During evaluation of \
In[71]:=",ExpressionUUID->"c22db30a-785b-4c51-acee-c663199d9f8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "normal distribution", Typeset`newq$$ = 
   "normal distribution"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{12., {4., 8.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "normal distribution"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[72]:=",ExpressionUUID->"c13df4c4-6e7b-4f31-a113-cd25f3b97027"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not resolve host: \
api.wolframalpha.com\\\\\\\"\\\"}]\\).\"",2,72,6,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761230450405337*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"435d592f-2d25-496e-8aa9-fbdd9de33a59"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not resolve host: \
api.wolframalpha.com\\\\\\\"\\\"}]\\).\"",2,72,7,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761230450556918*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"a38d9665-23fd-42bc-97fe-2af1e76a7365"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.761230500551263*^9, 
  3.7612305048581753`*^9}},ExpressionUUID->"dfae5aa2-ef5d-4ed9-9f48-\
b54341bf23bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{"Table", "[", 
    RowBox[{"PDF", "[", 
     RowBox[{"NormalDistribution", "[", "]"}], "]"}], "]"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.761230736682311*^9, 3.761230776893162*^9}, {
   3.7612308487257576`*^9, 3.761230852264269*^9}, 
   3.761230943616805*^9},ExpressionUUID->"3cf797a4-f909-435f-b7ba-\
11d9fe08c506"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X5t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"2", "*", "Pi"}], "]"}]}], ")"}], " ", "*", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", " ", 
       RowBox[{"t", "^", "2"}]}], " ", "/", "2"}], "]"}]}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X5t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761230950533577*^9, 3.761231047799881*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"c91da107-bc2f-4a77-ab29-4c984634f8d4"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
Fmn9X7rLzX+sghjssl7h/wPg5S6c
       "]], LineBox[CompressedData["
1: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
D6sd/XY=
       "]]},
     Annotation[#, "Charting`Private`Tag$182114#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.20789718883380437`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761231048915865*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"5be4c897-a80e-4d0b-8f8e-2b80bc8f6856"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%74", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[75]:=",ExpressionUUID->"c485cf93-d89b-4832-b4a3-aab86be7f834"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
Fmn9X7rLzX+sghjssl7h/wPg5S6c
       "]], LineBox[CompressedData["
1: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
D6sd/XY=
       "]]},
     Annotation[#, "Charting`Private`Tag$182114#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->Medium,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.20789718883380437`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761231056052613*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"42271bfb-d864-48a3-bf4a-412dfc1f2fc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X5t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"2", "*", "Pi"}], "]"}]}], ")"}], " ", "*", " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", " ", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], " ", "/", "2"}], "]"}]}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"X5t", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612311078113127`*^9, 3.761231123617568*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"cb29b1cc-19c3-4edd-8048-b62800929cfb"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
Fmn9X7rLzX+sghjssl7h/wPg5S6c
       "]], LineBox[CompressedData["
1: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
D6sd/XY=
       "]]},
     Annotation[#, "Charting`Private`Tag$183065#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.20789718883380437`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612311251482425`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"4f63f484-0f38-4da7-801e-9091d5478237"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"NormalDistribution", "[", 
    RowBox[{"0", ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612311377826147`*^9, 3.7612312396775084`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"c28050c5-fb24-4f2d-a78c-8354de4d1b72"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.76123124350531*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"4ce16376-95db-4eb0-98d2-884fe377d1fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PDF", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "s"}], "]"}], ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", 
        RowBox[{"{", 
         RowBox[{"0.75", ",", "1", ",", "2"}], "}"}]}], "}"}]}], "]"}], " ", "//",
     " ", "Evaluate"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], " ", ",", " ", 
   RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761231360983229*^9, 3.7612314406880617`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"3709cff3-0056-42a9-933d-36b2b0d4f16d"],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
nzy9NhD1hEdHBkfP7nOGqCfce4jVf+a7B0Q9Iav46vq6pT9EPSF1lYKTbHwo
RD2hianbu0O7YiDqCYWLjxdZJCdC1BOSjN6ZPJu8g3vC133uisrHsqCRWKGe
RtpKY+YTHs8p/Tbc77FPmS2V5bTjfs/mi2ZV7t0O3O/16tCNcxDJuN8j+BxJ
Vowg435vUKTFMNeVjPu9wb11VJY/OnC/N9jt1fRZtAPmVr2MTo36CgM/LGqf
/t6GezlBW1uvdyL3cS9nbXzFUIo1HfdyQnOPDnzVSMG9HKN/Kht/WDxEvZyy
rOHPqxsREPVyRukXV/hsgiHq5Xpoykx42X0g6uV2TmxOaIlfh6iXi/0qGtej
7QBRL3e7M002Pskeol7OyyU9vXfgGkS9XMCd7xFybjcg6uVcmdn8uftvQtTL
Dbt1pi49iYAmAnuu3zr4tbHH3zaKh64d92ePdh2g/bO/A/dnO4iKYS0bHbg/
q91VUiyy/fVE/dlfrp679dtfb9Sflb3R/yFHIOP+jEPMQ+FyRgdEvRbN9xZT
RY8YiHot2xtxc57/QiHqtR59CP0vUjEAol4rt8tUWV/bE6Jeyyxrt6MilwtE
vRZNgQ2UZLCFqNdSl7Y1v75hDVGv5cRw4rD8uBPEvZak7R92CQ+Ieq3X6sGm
dpf8IOq1+K01n/IOhEDUa9n9uKXwWTkaol6LXYbspLlxG6JeazmC42aTxB3c
ax068E0iwzYTTux8csFp17fG1HfarSXCbbiP+n2tj8Dm3477qFyyJTD268B9
VFvTMYcdcmTcR6W7FfNmh5BxHyU1tVW15k3GfZSSk2TKACMZ91GJN15ZE9U6
IImnyZw+chGqVHxl0RNqxz0S76Xp0OiH93GPJDvHbJ4xlo57pHQPncSgLym4
R3q5N+ooa2YCRD2SDz+NbUlrJEQ9kkqjkUsuVQhEPVLg4MV1Vz5fiHokWXtY
Vjt+HaIeSbTem8E3wBGiHmn1165zLSlXIOqRHr6qVh3YdQ2iHinCQIv9R7g3
RD3STZ97N6JLgiDqkXxOzn04PBIOnWfEA99KLDW+9+HVO0Jpw31PUWFy6zRN
B+57LEufRodPdeC+h8dISYJkS8Z9D622S0NFFBn3PYtfyO5rWmTc94Q52IRx
VHZA1MM0J3r8DLl6C6IeZpdS3OzFqjCIepgsumw+Od1AiHqYcFXXxUVZL4h6
mGS/osK2c64Q9TBRyQtlagx2MFXoYu5S7ETjTa5eV5fyDtyLRHZOd1fpkHEv
4mjyVOHa9ueLepFOR6HgJ9v/HtQjsBw9Piiw/XpBPUI5+5UQ21Ay7hH62C8F
jEiTIdrvv21W2POF0wai/f5fhp5XmhOsIdrvZ1GmMnFVdYJovz+GcaS1u9Ud
ov3+gjGho1offCHa75euhcG6/iEQ7fe3iR998fB9FET7/de0k1V07G5DtN9P
vcFinvI+Fe/3P7ToO0j1LwOKUpVSNi9+a3R+HGLyhLkN79Nn2/k96ndox/v0
FX6exYVXO/A+fWtCbdhvcTLepxfmUOPWvEnG+/QnNO//DPEj4336sIzheHYu
Mt6nVznBxDNt1AG7W5rJBPpF2JjwdnTmSDveX4/q0Dm5OXMf769nn2trAhoZ
eH+d5Odh1XEiFe+vPybMDIhI3oZof91AnOFt6qEoiPbXL/d+v0/QD4Fof917
FVSVZvtCtL9urR6s9YXgDtH++nnZVCC8ywmi/XVNg+WT7gJXINpf1zn9k1cw
0A2i/fVHNSHCvVzeEO2vP+RNrGjlD4Jof90h631xj2c4XO88FPb10VJjToPk
0fPNbXgffP3vlsPcajveB2/IrX3XPdiB98Ff5b6LirAg433w/TFS9Qe3z5/Q
PvjPhRTXlwZkvA9eppFWtdTQAdH+dNtpqZyI+VsQ7U/fNYKxDpzhEO1Pf5/r
LLH9GAjR/nSa6aXFhYdeEO1P8wa/6lxbdYVof/rbDOlcVKwd/EfTHHmLbbLR
itZQReFhB94vltQa7WJXJ+P9YuvdWbPBkWS8X6y0GJdJcSTj/dXE4IZ92u5k
vL9qoHAtlBBOxvurL85LiCsdI0O0D9rSHd0nH2uD9zFfXv+odi+MjPcx96ge
cP27/XxoH/HgV5HM3O3/H9pHFI4fePZp+/NB+35F17N9dmx/PdF+3/6JttwY
XzLe7yu3Yyg6EkzG+30M5oLDKpnWEL8fpdzO+PJL1hDt9+1SvVRZve4I0X6f
dtdVSEl1h2i/71xx5Nsdmb4Q7fexW6ee2tQNgWi/L3bJ4OCujCiI9vsiJ3rr
Mnffhmi/r+ols+PX/FS83xdb5yW6rzMDv7+jCYtK951/rXifbuJx6v4ci/+9
32Oq6s5UKdsOvE/3RCX5bf8BMt6nu7tbQGtr+/oP7dOVZQUyCW9fH6J9utFg
Jek4PjLep4ss7O5OutyB3//RhzHDjIfQjvfXvsMg340deXh/rSRTmor1Zgbe
X/OcuGvRZZOK99f2fC4APu63Idpfm7Nw8c61iYJof62s3a+Hzi8Eov216zck
yIpTvhDtrwX4VC3kubhDtL92e7b3ZoWDE0T7azrMqXklI3YQ7a/11bVUi4m4
QbS/5pNBGxrwwQui/bXjhsZjTe8DIdpfK9xTMghPhUOVRrkdQQtLjQ8L6PQ0
X7ThfTC7KFb3d/PteB9MsfcL6O3uwPtgR61G+NrMyHgf7MbGnX7i9usP7YN5
sWbx/TIi430w0+jhFw0tHRDtTzVluVo0ScZCtD9V0+ZS5EMMh2h/quneBPPF
A0EQ7U85LzUfU57wgmh/6s8XUXLxGTeI9qdKa6zmarvsoPyPG37D5yYbt38k
h72zO/B+0fsdDImZqmS8X6TlIPdxbvv8FO0XMbEP2Ws4k/H+itJ7rUuq18h4
f4Xxndpjxu2PR/sr8z6th08pkSHaB5GQ9fCkdNjgfYysXx0aBdu/T9E+htuU
1G16LzLeRwgRDNdStifjfQRKkdbwhe3f12jeT1s66du2/RjN91V45us+3iDj
+X5ZNcOzC9vnf2i+nxutZkIctIZovj/bJfM0aPvnHc33Gbc0LDe2nw/N90Ul
pkpptx+j+b5am6WQ2fbxB833f8w4MntsH7/QfP/I82OqZtvHGzTfrxdXOnJ4
+/uN5vupcbc7Ry2tIZrvd+WwXKMQrSGa73/rHvn1sNsRovn+CPARjwpwh2i+
f4amwe6uvy9E830eua6aNcUQiOb7Bylz5T43oyCa7zvbP/nptZEA0Xz/1ZTy
3eq4VDzff+Ouea6zPAO/f4L3S4nC8I1WPE/fOmtz48+l/72fQqWSqZWdZQee
p4tu5B6oFSbjebrF24q7+tvHEzRPd4810P68fTxB83T3QDfz1wJkPE8PylgJ
tLTqwO+v8Ni61fPAqXY8v/7v9uT3aP48PL8+ulmtwp2RgefX9lm19Y4+qXh+
7b+htNV/9zZE8+sllaRTmkFREM2vrWS78yMTQiCaX/vJy/+qofODaH792Xas
tTDCHaL5dZAzk9GbRCeI5te39NlnA+rtIJpfN2WmeoSsu0I0v/bjP342uMEL
ovl1RtHR7+uPAyGaX980Y/hPSCIcjilWqrexLDc6nf9Q3VDRhufBUcJX4mtn
2/E8uDxFso/8rgPPg31vxlIum5LxPFim7uCOM9uvLzQPtjjSopdgTMbz4H5j
qeWc9g6I5qf6WiE0bFqxEM1Pp3Yf3ydiEg7R/DR7gPP0rbNBEM1P7z59QuD/
5wXR/FTi+qEQLTc3iOanVh+0A9NW7KCuq4HnzWuTjV8bjAhs29eraL7Y7HaU
nnKSjOeL4lJMW8nbxwc0X3w7qpNxw4WM51exORHmCm5kPL+Czv2f7bY/Hs2v
lCnnVAjKZIjmQWrv4pQX52zwPEYp7Nq6yPbxBM1j3ERHJ7e2jydoHlHeo5FK
dYWM5xHLLkMpUds/3+h+P8sweV/O9mN0fz+On1j8d/v8H93f/5BmYj6xfTxB
9/c3rc0IVN+tIbq/fyhYQWxu+/wY3d//fcZmiGv7+4Pu79v4+HG3bh8f0P39
3t1P7r3fPp6g+/tvFX4tM2wfT9D9/YXZYycfbH88ur9vfZNfSGj7+dD9ffrg
3JGNQGuI7u97777DeXz7z9H9/ZqnHhLHt/8+ur9/YORL7L7tfx+6v//1xoeT
X7Yfo/v7r+m+GQ9vP0b397OUHr1U2X6M7u93pa9XqWw/P7q/vzWed2NB1Rrd
zyRR/X//ofub/9fj/+c//z9qMpBT
    "], {{{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1: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
E11U1gP/hsfT7fT05f8PwLmMkQ==
         "]]]}, {}, 
      {RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV1WUUVUUUQOFHlx1gg0E3Iind3SVdEtLd3YigdIeBUrY0AkqDYgA2KqiE
pCgNfufHXnf2PsNCeTP3Ptmme91uSROJRBLMTZZIZEqRSBROm0gUQR3rT1In
EidTJRJrPJ/x/A1vWXdImUhcxSd8MD9k7xPWP2IJz2W2BYN5aT7M/EnrX/A6
r2F2FAt4a77SPJ31bkzhSc1moA5Pz2ubv8iv4GNtkPat9rj1D1jMc5ptxiBe
ig81r85/wXytlbZCS2u9Cy/zJGbTUZs/yGuZt+eX8ZE2UPtGe8z6eyziOcw2
YSAvyYeYV+M/Y57WUntHS2O9E5N5wuw11OIP8Jrm7fh/+FAboH2tPWr9HRby
7GYbMYCX4IPNq/KfMFdrob2tpbbegUn8Nn/VvCa/P/6deVv+Lz7Q+mtfaY9Y
H8ECns1sA/rz5/kg8yr8R8zRmmvLtVTWn2Miv8Wnmdfg9/HqvA2/hPe1ftpB
7WHrw5jPs5qtRz9enA80r8x/wGytmfaWltL6M0zgN/lU8+r8Xl6Nt+b/4D2t
r/al9pD1IczjWczWoS8vxgeYV+LfY5bWVHtTS2G9HeP5Df6KeTV+D6/KW/GL
eFfro32hZbD+FnN5ZrO16MOL8v7mFfl3mKm9oL2hJbfehnH8Op9iXpXfzavw
lvwC1mi9tQNaeutvMCfuXdwz9OZFeD/zCvxI3BGtifa6dg0va1W0u7TKvAU/
j9VaL22/9nTcIfTSCmt9tfL8cNwFrbG2TLuKyVpl7U6tEm/Oz2GV1lPbpz0V
dwU9tUJaH60cPxRnXmukLdWuYJJWSbtDq8ib8bNYqfXQ9sZ7Iu4EemjPab21
svxbvKo11JZolzFRq6il0yrwPcgUZx3d9YJ6L60M/wbTtAbaYu0/TNAqaGm1
8nw3MsYZRjf9Wb2nVpp/jalafW2R9i/Ga+W1NFo5viveg3E20VUvoPfQSvGv
8IpWT1uoXcI4rZyWWivLd8Y7Lc4cuuj59e7aAvyDsXpZPZVehu+Id1OcHbyk
59O7afNxEWP0MnpKvTT/PN4xcR7QWc+rd9Xm4QJG66X1FHop/lm8K+L3Ric9
j95Fm4vzGKWX0pPrJXkJPI+XMAfnMNKekvYks6c43x7vhfjN0VHPrXfWZuMs
Rugl9KR6Md6Un8EKrbu2Le57ODpoubROWkl+EFO0utosLZn1VozlZ/hw8+d5
El407oL1r3iTv2D2h/UK67+t37HuZr3Vvr+sV1k/6Pl+vKs9Z3tmiLPqeYy/
He/9+O08X+Q5PTv6sx97nuCrPTN5fuD5s+cyzxJxdzyP83fiXRZnx/NlXsdz
pj//p/XK+CZ6foox8d+n/269PL6t/kxx64R1kbiP1kfxBm9idhpv8678U/MH
rL/CLJ4+ZmjPc8R3PX4//gUma7W1GdppDNWKabfjvcG34EFtOdpp2eP/W5uO
UxiiF9VvxXuBb46/W3sLbbVs9rfXXsNJDNaL6Dfj3vOCeDa+k/FNwwkMsqew
+Y24W/Fti+9Q/D4YaFZIvx73hm/C/dqbaKNl9fe1ie9J/JtigP6cfi3uDd+I
+7Q30FrLYn/r+C7gD/TXC+pX497wDbhXex2ttMz2t9KK8wOYpNXSpmjH0U97
VrsS94ivxz3aMrTUnrG3pVaM78dErWacBe0Y+moFtMtxZ/g63K0tRQvtaXtb
aEX5PkzQamiT46ygj5Zf+y/uDF+Lu7QlaK49ZW9zrQjfi/FadW2S9ht6a/m0
f+Ns88b8VPz+vIt9n2h38sVopj2pNdMK8z0Yp1XTJmq/opeWV7sUZ4834ifj
fPCX7PtYu4MvQlMtk9ZUK8R3Y6xWVZugHUVPLY/2T5xF3pCfiN+fd7bvIy0d
X4gXtIxx57Xn+C6M0apo47Vf0EPLrV2Ms8ob8L/ifPBO9n0Y58v6IGbytGYL
0IQ/EXcvzjDfidFaZW2clsR6C0bHe4B3N8/FL8QZ5fX5n3GueEd7Pohzaf0l
ZvA0ZvPRmD/OG8c94TswSqukjdUS1psxiv/Eu5nn5OfjbPN68b6L88c72PN+
nGfrLzCdpzabh0b8Md7IvAD/HCO1itoY7TbfxEfyH3lXnoOfizvB6/LjcU75
i/a8F+fe+gBe46nM5qIhf5Q3NM/PP8MIrYI2WrvFN/IR/AfehWfnZ+Pu8Dr8
WJxn3t6ed+N+WO/Hqzyl2Rw04I/wBub5+HYM18pro7SbfAMfzr+PbxnPxs/E
HeO1+e9xznk7e9bEPbLeh2k8hdls1OcP8/rmefk2DNPKaSO1G3w9H8a/4515
Vv533EVei/8W55+3tWd13C/rvZjKk5vNQj3+EK9nntH6Jyzlecy2Yigvy0eY
X+fr+FB+hHfiWfjpuK+8Jv817ghvY8+quIPWe/AKT2Y2E3V5Bl7XPDf/FEO0
Mtpw7Rpfy4fww7wjz8xP4X9Ry9eZ
         "]]]}, {}, 
      {RGBColor[0.560181, 0.691569, 0.194885], Opacity[0.2], EdgeForm[None], 
       GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwV0mWYFQUUBuDZpXaX7lBi6Q5pQVDBBKVDSkWQTkVpMEAUQUFBQpDuBunu
7u6W7k7f+fHe78x3z9x5Zu7ENm5XvW1kEAQR9PaxKCoIiscEQQkumYvJ/6KD
IL8cJ0+R3dxUjuAQrzouLBsymF2k0sWRmahEb1YQGf6e3y1kbsAgdpJSHykz
8iG9WE6E/qL9gub6/M4OUugjwmvzAT1ZRqC/YL+AuR6/sZ3k+kC+wvv0YCkv
OW8/v/yEgWwjmf2X+gzm9+jOEl5wTp9P1mUAW0lq/4U+vfldurGY55zVPyed
+R26sohnnNE/I625Il1YyFNO65+SxlyBzvzLk/B/0J/kBMc5xlGOcJhDHOQA
+3lCaue9zbcs4DH79I9JZX6Lb5jPI/bq88o6/MoWkrjPR/qU5jfpxDweskff
RA7nYPis7eaRtenPZhLrHtr73Dw0vD7pdCnk3xwJ3xnH5eXXzOUBu50zVp4k
m++/CP8HcpuHyQNkMOeWF8hrHi0LyWMyi6wli8gzMqf8RRaQm2Qi+cA1iobv
m+N88h9ZWB6XsfIz+Zo8K3PJIbKg3CvTyuThu0Qe80h5OHyfzeXC/5Ic5q/k
HO6zy/XGyBNk9V1j+Rf7Se84lxzFUTI7ril/ZiMJHd93/qfmP8NnTxpdMvkG
HZnNPXbayylr0I8NxNi9p29k/iN8vqTWJZVl6cAs7rLDXg5ZnZ9YT7Tdu/ok
5jK0ZyZ32K7PLqvRl3VE2b+jT2x+nXbM4Dbb9FvZwmY2sZENrGcda1nDam6T
yHmlact0brFKf4uE5lK0YRo3Wam/SYy5JK2Zyg1W6G8QbS5BK6ZwneX6bLIq
fVhLAvdyXR9lLk5LJnONZfqssgo/sob49q/pE5iL0YJJXGWpPlZ+zA+sJp79
q/r45qI0ZyJXWKLPIj/i+/CeiWv/ij5e+H7SjAlcZrE+s6zMd+FzII79y/q4
5iJ8yXgu8T96Y9Nl
         "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwl2Af4luMbxvFfe2pPIUVp7z210KSoaKFBStoqbWVLWtpbZUSUBu2prNJQ
aO+9d+H/uY7/cbi85/c8r+c53t77fq77qTxtuzZ5LVFCQkLuZAkJ8flG4oSE
l4iPkiQkrMLdkyYk5KXT8dvifPgPep2em/QXsnvpb+gX6Yay0vpu0p/T42Sn
ZVPwOf7HdA26qGwUboj/pU/rS+47LJPVpDfx+9DtZP5L+InuT7ws2ycbiVfz
e9AP0ell7XB+vJter+8W/aUsF/0t3ZZuJCuj7xb9Bf2J7IxsKj7PH0XXpIvJ
RuNG+D/6jL4Uvt/3slr0j/y+dHuZj4Sf/W8A3VG2X/YxXsPvST9MZ5C1x4/g
PfQGfbfp+bL76IV0O/pJWVl9t+kv6fGys7Jp+AJ/NF2LLi4bg5/E8QXO6kvp
+/1A16Y38/vRHfRFyy/0QPoV2QHGKLyW34vOR2eUdcAF8J/0Rn136K9k99OL
6Pb0U7Jy+u7Q8+kJsnOy6fgifwxdmy4hG4ufwoli7fWl8v2W03XoLfw36Jf0
sRN+pQfRnWQHZaPxOn5vOj+dKfYlLoj/ojfpu0t/LXuA/o7uQDeWldd3l/6K
nig7L5uBL/HH0nXokrE3cWOcONZeX2pfZAX9GP0Tvz/9sr7k+n6jB9OdZYdk
Y/B6/uv0I3Tm2Ju4EP6b/lHfP/QCWW56Mf0S3URWQd8/9Nf0JNkF2Ux8mT+O
fowuFXsTN8FJYu31pfH9VtKP0z/zB9Ad9aXQt5UeQr8qOywbizfw+9AF6Cyx
N3FhvJferO9f+hvZg/QS+mX6aVlFff/SC+jJsouyWfgK/xP6cbp07E38NE4a
a68vre+3in6C/oU/kH5FX0p92+ihdBfZRtxXXpCXNfYkLoL30VvkedRS3FH+
DK+S/D/6G3qK7CoeL3+CVyb2IH4GJ4s1ltdVv+JBuJM8lfx3+k06ht0m3E9e
iJct9hwuivfTP8nzqmX4FXlTXmV5PETf0lNl1+AEXFdeNvYYboqTxxrK66nf
8GDcWZ5avp0eRneN2RFzVl6Ylz32FC6GD9A/yx9S3+NO8ma8KvJEeCE9TXYd
T8T15OViD+FmOEWskby+2oqH4FflaeQ76OF0t5gNuL+8CC9H7BlcHB+kf5E/
rKryEvMW8abjG3gSru+a8rEvcHOcEl+VN4j15+3Eb8m7xzOOB+gpyssZa49L
4EP0r/J8qlqML953vBlxpuDJuIFrKsR642dxKnxN3lDdw9uF35b3iGcVD9RT
LM6iWGNcEh+mf5PnV9VjCXmLeTPjbMBTcEPXVIx1xc/h1Pi6vJFKx/sDvyPv
Gc8cHqSneJwpsZa4FD5Cb5U/oh7lJeMt4c2KGY+n4kauqRTrh1vgNPiG/EmV
nrcbvyvvFc8OHqynRJwNsWa4ND5Kb5MXUDV4yXlLebNjVuNp+EnXVI41wy1x
WnxT/pTKwNuD35P3jmckzndVRt8x3u+8gqomLwVvGe/TmLN4hmrFu8f1t3iN
VUben/h9fa/Hno/zWJXVd5y3nVdI1eKl5H3PmxNzEc9UmdRfrv+A3yf2bJyX
qpzeE7wdvMKqNi8V7wfe3JhbeJbKrP52/Yf8vvxtcZ6pOiq1/uX8efz/8GyV
Re3VP4Lfj/97nC/qMZVG/wr+Z/ESpD71kVXt0/8R/w3e9pj36nGVTWVX++Uj
5f3lO2LeqidUWvdbyf+cn0jN4eVQB/R/zB/A2xlzUJXXe5K3k1ck5hfvHt4q
3hc4sZqOn3JtlfgN5K1xOnxb1iT+7Hgo7iLPKT9Ij6IHyo7IxuFd/CF0yTjT
ZVnM6010P34F/qm4lrcrfrOYd9GHi+IfcOfY97i5vmw+N8fZ67Oe69PJV/Nz
4C/1X8KzY//iJHgGbhzPJ66qL6vPH/E817aRpafvxLPNXx3nUKwP/036Nf33
6jtEj6YHyf7AQ+Wl4jvE+uCK+DT9h7xYzEFeet4a3nycVH3Ge56XwXV38TMq
F+8wHqNvMN4d81E1UPep+9UR+Vj5EPmemGuqocrgXmv5X/GTqc95D6ij+sfx
h/L+jPmkGqmM+tfxv+YnV1/wcqtj+j/hv8n7K+aMqqT3DG83r3jMinhmeOt5
C3AK9SXvQXXc9eP5w3h/x/xQlfWe5e3hlYgZEM8MbwPvG5xSzeflUSdcP4E/
nLc39omqovcc709eyXjm4xnibeR9i1Opr3gv8DK6/h/cNM5P3kk8Ud9beF+s
laqq7zzvL16p2LfxjPE28Rbi1Opr3ou8TK7/FzeL85B3Ck/S9zbej99U1fRd
4P3NK62ejueS9yNvEU6jZuImrq0Wv5m8Lc6M/5M1j7OOdxpPlr+DD8S99ZSO
97b4PXF1fJHeKy8Teyaefd5m3ndx7qlZ+GnXVI/fVt4OZ8Hxl5dn46wjz+Ap
+F18EA/TUybev+J3x4/iS/Q+edn4LWNm8LbwFsezoWbjZ1zzaKyBvD3OihPh
5+Ks453FU/F7+BAerqcsL0+sB66BL9P75eXiN+bl5P3EWxLnXsw/3NQ1NWJt
5B1wNpwYt4izjncOT8Pv48P4LT3leHljnXBNfIU+IC+vluNX5c/ymsvvxT/T
S+MMjBmJm8lrxvrJX8LZcRLcMuYvHoa74gLy8/R0+oOYcfhteXneQ7GWuBa+
Sh+UV1ArcBf5c7Em8lz4F3pZnI1qLm4urxXrKn8Z58BJcauY73g47oYLyi/Q
M+gPZUfxO/IKvIdjjXFtfI0+JK+oVuLX5C1irWK24F/p7+MsVfPws/Lasd7y
jjgnToZbx3mB38LdcSH5RXomPUJ2DL8rr8jLF2sf5yC+Th+WV1KrcFd5y1jD
mGv4N/oHWaaYjfg5eZ3YB/JX8L04OW4j34Xfxj1wYfklehb9kew4fk9eiZc/
9kScq/gGfUReWa3G3eStYj1jTuKt9HJZ5piduIX8sdgT8k44F06Bn4+Zj9/B
PXER+WV6Nj0yfn/ZJ/gE/326Mv1I7I04r/FN+mic7c6XhXGO0mv43enWsb4x
h/E2eoXsMv2pLEvMaLol/XjsFX2d8X04JU7nfmvoF+Lc4L9L9+IX1XeF/pT+
ONZHNh6f5H9AV6ELxN6J9wV8iz4W7wrut0hWlV7L70G3ifWPOY9/p1fKrtBz
ZFnjDKBb0U/EXtL3Kr4fp8Lp3W8t/WKcW/z36N78Yvqu0nPoUbF+sgn4FP9D
uipdMPYWrotv08fjXcT9vot5Sq/j96Sfj/0R5wjeTq+SXaXnyrLFGUO3puvG
XtPXBT+AU+MM7reObhvnJP99+nV+cX3X6Ln0aNkJ2UR8mj+CrkYXir2H6+E7
9Al9Sdxvccxhej2/V6xN7B99efEOerXsGj1Plj3OMLoNXS/2or7XcG6cBmd0
v/V0uziX+R/Qffgl9F2P9xd6jOykbBI+w/+Irk4Xjr2J6+O79Ml4B3G/JTG/
6Q383rE2shf0PYR30mtk1+nPZDniTKSfp+vH3tTXFT+I0+JM7reBbh/nPv9D
ui+/pL4b9Gf0WNkp2WR8lj+SfpQuEnsz3nPwP/SpeIdxv6Ux9+mN/NdjbWQv
6nsY76LXym7Qn8ty0gvoF+gGsTf1dcN58D04s/ttpDvEewV/BN2Pn52/Jcn/
/92xlGv+B1SOjAY=
         "]]},
       Annotation[#, "Charting`Private`Tag$184029#1"]& ], 
      TagBox[
       {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwV1XfYjmUYgPHXJlSi7L0JlcyULXuLJEJZ2XtmZu+9ZxRpZ0SUjBTtQVYo
O6NCi+p3/XEez3We9/0dPs/73febt0Ovpj2TJBKJBckSiTwpEomLqRKJguiS
MpH4ng9PnUhs4X/zkbwqH84/4CXQVMusNdXm8WSYzj/h6bDRege+zHzSWkPk
1S7xQujKD/ER9mzl//BRvBofwT/kJbGKH+O50cx6Ft7MPN9acszgn/L0eM16
R77cfMpaI+TTfuGF0Y0f5i/Y8x6/xUfz6vwFvouXQnMtq9ZcW8BTYCY/wO/E
69af5SvMp601Rn7tMi+C5/kPfKQ92/htPobX4CP5R/wBtNCyaS20hTwlZvGD
/C68Yf05vtL8k7UmKKBd4UXRnR/ho+zZzv/lY3lNPorv5g/iCS279oS2iKfC
bP4ZvxtvWu/EV5l/js8WBbWrvBh68KN8tD3v8//4OF6Lj+Z7+ENoqeXQWmqL
eWrM4Z/zDHjLeme+2nzGWjMU0q7x4ujJj/Ex9uzgCbzIH+djzHutl0YrLafW
SlvC02Au/4Lfg7etd+FrzGfj80Rh7Vd+P3rx43ysPTt5EozntflY8z7rD+NJ
LZf2pLaU34F5/EueEe9Y78pfMp+LzxNFtN94CfTmJ/gE1LFvnPaxVgattdxa
a20ZT4t3tW7aWu18fG4oqv3OS6IP/5FPRF37XtT2a2XxlJZHe0pbztNhk/a8
tk67EJ8PimnXeSn05Sf5JNSzb7z2iVYObbS8WhttBU+PzVp37WXtYnwOKK7d
4A+gHz/FJ6O+fRO0T7XyeFrLpz2treR3Yot2P25qD6K/dppPQQN7J2oHtApo
q+XX2mqr+F3YqpXAH9pDGKD9xKeiob2TtINaRbTTCmjttNX8brynlcSfWmkM
1H7m09DI3snaZ9ojeEYrqD2jreEZsE0rhb+0hzFIO8Onoz0K2d9ef0m/B9u1
B/C3VgaDtbN8RtyVKGx/B32tnhHvaw/iH60shmjn+My45/AQbunlMNTaeT4r
7iaUxsMog9vWy2OYPRf47LhXUMS/11Ffp2fCDq0s/tUqYLh2kc+J+wFF7X9W
f1m/Fzu1cvhPq4gR2iU+F43tnaJ9rlVCZ62Y9pz2Cr8P8/lXPFN8r1jvwV8x
X4qzh5f4jzxf/P7WE/wR8wvWXjafNv+ijzN/YE6KV81n4ztJb2KeGvdb3A1+
Zr3nz/xdz0f5as/jcV945onvD8/znps8u/j54p6d4h72XG//K54/xbn3zMwX
eH4d95rnvZ4bPc/Fd5ef7Rk/E7+ffRvMZ8ytzWvNJ8354x3bl4RXMo+0dpm/
yD/kyTCfN+XTzF9afwxd48xonbUNPAt2ab20DdrluAvib15LGv9PbRS/whfE
/RJnJv5/8a70rPhIewTJ9Mf00dpVvjDuD1TCo3gMye2pbM8Ye67xRXEnxDnS
u8Y70LNht1YZKfQq+ljtV744Puc4N3q3eOd6duzRqiClXlUfp/3Gl8S7jHOj
P6+/rufAXq0qUunV4ntC+50vjXcR50bvHp+dnhP7tGpIrVeP+167zpehmTZd
+0qrjN5xtrQe8bfDc+FjrTrS6DX0CdoNvhzNtRna11oV9Inzp/WMvw2eG/u1
GrhDr6lP1G7yFWihzdS+0aqib5xdrVf8bfI8+ESribR6LX2S9gdfiSe0Wdq3
WjX0i3Ov9Y6/VZ4Xn2q9tVe1K3G/o5aWTntcm8z/5KvQUputfadVR/+4F7Q+
cXZ4PhzQ+mgbtatxv+NxLb1WW5vC/+Kr0Uqbo32v1cCAuDe0vnHWeH4c1Ppq
r2nX4r5Hbe1OrY42lf/N1+BJba52SKuJgVp5rZ+2mRfAQv4Nvy/ucOv9+Ovm
X+O7AHW0u7S62jT+Dx/Pd/HkcWfz1nye+XC8KwzSKmj9tS28IBbxb3nmuOus
9+dvmH+L7wzU1e7W6mnT+S0+gX/EU8Rdz5/i880/xDvEYK2iNkDbygthMf+O
Z8EX1gfwN82/W2uPeloGrb42g9/mE/lunjLueN6GLzAfiXeLIXHutYHae7ww
lvDveda4c6wP5G+Zr1vrgPraPVoDbSb/l0/ie3iq+G7gT/OF5qPxnjE07hBt
kLaNF8FSfohni3NnfRB/23zDWkc00DJqDbVZ/D8+me/lqeM7hLfli8zH4j1j
WNxT2mBtOy+KZfwwzx7n0/pg/o75prVn0VDLpDXSZvMEpvB9PA3WW2/HF5uP
x3vG8LgLtSHa+7wYlvMfeI44x9aH8HfNf1h7Do20e7XG2hyeBFP5x/yOuMut
P8OXmE/Ee8aIuEO1odoOXhwr+BGeM8679aF8k/lPa53QWLtPa6LN5Ukxje/n
aePOt96eLzX/GO8Za/gJnje+W+Me5sPMO63dj5X8KM8Vd4L1YXyz+S9rnbGO
n+IF4n42X4hzGL+Dvf8DgIrXEg==
         "]]},
       Annotation[#, "Charting`Private`Tag$184029#2"]& ], 
      TagBox[
       {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwV0neAznUcB/DfWTfMlPagpEFDaYgKlbaKhqKlvWgoI10lRZH2oNIe2jTO
WYfD4XDWOXufcc6eZxyvzx+ve39+7+fz3PP8nt+3XqcubTunJEmS6U9WWpKs
T0+S73mUxlRig75iRpKMNb/OTZzCCP0G+QOPcQGVKdFXsp9j7s3N1CVbXyJ/
5HEupAob9ZXtjzO/QRvqMVK/Uf7EEzQhlVJ9FfvjzX24hVMZpS+VP/MkF5HG
Jn2q/QnmN7mV0xit3yR/4SkuJp3N+jFsNg/laS4hgy36sWwx/8ozXEpVtupz
2Gr+jc40pRrb9OMYzwRymcgkJpPHFKYyjXy2ed/vdOEyqrNdn+Zecs1vcRv1
ma7fLv/gWZpRgx36dPsTzX1py+nM0O+Qf/IczalJHbuz5Efcx057GbpJ5n60
owEz9TvlXzzP5dTiaLuz5cfczy57VXWTzW9ze5wd14vkV5zBca7nyc/oFM/S
9VL5DQXev0v+zQvx3b22Ql7BSeYF8gvOMq+RR3CMeY48V34SnyFXxfmUD8TZ
kkvk+fJr2VCujfMod/u8ajLP9TnynbhfuVI2lnfEWZaL5XlyiDxbFsszOd5c
KD+Pa/Nq+VCcN/My+S2zfMZuOYyuXMnJXl8ov6Q2x7qeKz/lQfZ4T3XdFHN/
7ox75gTdfDmIh5ltb48czou04Ej26mvYnWoewF3xvZmj3yv/4SVachRl+rmU
mf+lG63ifLBPP49C5lPEAhayiMUsYSnLWM4+7/uP7lwV54T9+hXsN/9PD66O
58cB/UoOmLPoyTXxu3BQv4qD5hG8TOs4R5Tra7rPaeZ3aR/Pl9X6cplNL66N
Z8UhfS37+eaB3E0j1ugPyZG8wnXxW5PEGbM/Xb7HPXFOKLaf6EeZM7meE0mJ
56mfId+nQ5xL1tpP0Y82v8oNcZ6pEM9LP1N+QMc4Z6yzX0E/xvwaN8aZoWI8
L32B/JB741zHZ+uK5GAeob7r5fK7uD/zOtlErvd/DwNU/tLi
         "]]},
       Annotation[#, "Charting`Private`Tag$184029#3"]& ]}}], {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}, "AxesInFront" -> True},
  PlotRange->{{-6, 6}, {0., 0.5319226372214798}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761231442136412*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"c48f1011-0200-42f2-8157-3e71e0f73fc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", "t"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", " ", "t"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612322253146467`*^9, 3.76123223882553*^9}, {
  3.7612323252943935`*^9, 3.761232377340251*^9}, {3.761232921535716*^9, 
  3.761232981492427*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"25b3dc2c-2135-4567-affd-473955147167"],

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{"exp", "[", 
      RowBox[{"-", "t"}], "]"}], "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.761233000522561*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"dfc3a0ab-d644-4081-b3d8-9e3494d1d16d"]
}, Open  ]],

Cell[BoxData["Integrate"], "Input",
 CellChangeTimes->{{3.7612330113536243`*^9, 
  3.761233017224918*^9}},ExpressionUUID->"1e87618f-c45c-41c7-bdad-\
614c75161c4a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", " ", "t"}], "]"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612330316793175`*^9, 3.7612330579500656`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"95d2f81a-8930-4867-ad00-bbd7a51209ed"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{"exp", "[", 
      RowBox[{"-", "t"}], "]"}], "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.7612330648207006`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"7d2336b1-f525-48d8-8cb3-c92b523da73f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"E", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"E", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", " ", "t"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612330877763767`*^9, 3.761233094064536*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"d0c7cd75-df06-4177-b598-3c96c8bc30cc"],

Cell[BoxData[
 TemplateBox[{
  "SetDelayed","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"\[ExponentialE]\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"\[ExponentialE]\\\", \\\"[\\\", \\\"g_\\\", \
\\\"]\\\"}]\\) is Protected.\"",2,86,8,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612330975023465`*^9},
 CellLabel->
  "During evaluation of \
In[86]:=",ExpressionUUID->"48708d2c-faed-4472-9858-55863edc7e85"],

Cell[BoxData[
 RowBox[{"\[ExponentialE]", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", "t"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.7612330975043406`*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"91bf40dc-3646-4b6b-b18c-4bf7153c287e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"e", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", " ", "t"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612331144151587`*^9, 3.7612331176455054`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"e1a27035-7b45-43ff-8dd7-d2c838fa44c7"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{"exp", "[", 
      RowBox[{"-", "t"}], "]"}], "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.7612331267042913`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"e92fac7b-fe7d-4146-bd95-8b05a873f74e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", "g_", "]"}], ":=", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", " ", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", 
          RowBox[{"-", "T"}], " ", ",", "T"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", "[", 
   RowBox[{"Exp", "[", 
    RowBox[{"-", " ", "t"}], "]"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.761233205138688*^9, 3.7612332503338766`*^9}, {
  3.7612332980852137`*^9, 3.7612334098784037`*^9}, {3.761233446955299*^9, 
  3.7612334890338283`*^9}, {3.7612335534628425`*^9, 3.7612335654467773`*^9}, {
  3.7612336088946905`*^9, 3.7612336218111544`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"ef01e6b0-0b45-47b8-9e78-354aa65fa459"],

Cell[BoxData["\[Infinity]"], "Output",
 CellChangeTimes->{3.761233623649227*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"346f792d-e3ce-4951-afff-f5f61a63697f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", "g_", "]"}], ":=", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", " ", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", 
          RowBox[{"-", "T"}], " ", ",", "T"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"p", "[", 
  RowBox[{"exp", "[", 
   RowBox[{"-", " ", "t"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612336402728195`*^9, 3.7612336405590367`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"965ac06a-b155-4c4b-8b67-d377be146df0"],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[Limit]", 
   RowBox[{"T", "\[Rule]", "\[Infinity]"}]], 
  FractionBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "T"}], "T"], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"Abs", "[", 
       RowBox[{"exp", "[", 
        RowBox[{"-", "t"}], "]"}], "]"}], "2"], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], 
   RowBox[{"2", " ", "T"}]]}]], "Output",
 CellChangeTimes->{3.7612341539246016`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"e5bdb576-ea22-47f9-932c-6f54f52d0aa1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    TagBox[
     FrameBox["expr"],
     "Placeholder"], ",", 
    TagBox[
     FrameBox["n"],
     "Placeholder"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.761233869879535*^9, 3.761233881500523*^9}, {
  3.761233911997958*^9, 
  3.761233957734709*^9}},ExpressionUUID->"705cb7c1-17a2-404d-af3c-\
7d388271c5b1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m", " ", "=", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"e", "[", 
      RowBox[{"X1t", "[", "t", "]"}], "]"}], ",", 
     RowBox[{"e", "[", 
      RowBox[{"X2t", "[", "t", "]"}], "]"}], " ", ",", " ", 
     RowBox[{"e", "[", 
      RowBox[{"X3t", "[", "t", "]"}], "]"}], " ", ",", " ", 
     RowBox[{"e", "[", 
      RowBox[{"X4t", "[", "t", "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"m", ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612357882429647`*^9, 3.7612359190114107`*^9}, {
  3.761235961034133*^9, 
  3.761236132832925*^9}},ExpressionUUID->"bdda80e3-c002-4f91-aba4-\
9917002c8921"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X1t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,100,10,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612361028290854`*^9},
 CellLabel->
  "During evaluation of \
In[95]:=",ExpressionUUID->"b2d109fe-1ce9-45d2-8c81-0baca91d94cd"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X2t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,100,11,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236102831107*^9},
 CellLabel->
  "During evaluation of \
In[95]:=",ExpressionUUID->"71b51737-e5f7-427e-80d4-073945e7fd83"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X3t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,100,12,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612361028829665`*^9},
 CellLabel->
  "During evaluation of \
In[95]:=",ExpressionUUID->"249d145a-2ddf-4714-a0d1-9902214790e2"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Integrate\\\", \\\"::\\\
\", \\\"idiv\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,100,13,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612361029348354`*^9},
 CellLabel->
  "During evaluation of \
In[95]:=",ExpressionUUID->"8681afa8-2a91-41fa-a3ad-7cef66153774"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Abs", "[", "X1t", "]"}], "2"], 
       RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Abs", "[", "X2t", "]"}], "2"], 
       RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Abs", "[", "X3t", "]"}], "2"], 
       RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Abs", "[", "X4t", "]"}], "2"], 
       RowBox[{"\[DifferentialD]", "t"}]}]}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Output",
 CellChangeTimes->{3.761236102986699*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"49cf6cf5-24f2-419e-b768-3212c58e547a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m", " ", "=", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"e", "[", 
      RowBox[{"X1t", "[", "t", "]"}], "]"}], ",", 
     RowBox[{"e", "[", 
      RowBox[{"X2t", "[", "t", "]"}], "]"}], " ", ",", " ", 
     RowBox[{"e", "[", 
      RowBox[{"X3t", "[", "t", "]"}], "]"}], " ", ",", " ", 
     RowBox[{"e", "[", 
      RowBox[{"X4t", "[", "t", "]"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"m", ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"d19bcae6-b8f4-441a-ab75-d703e9bca669"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "50"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"Cos", "[", "20", "]"}], "+", 
        RowBox[{"20", " ", 
         RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], ",", 
     FractionBox["256", "15"], ",", "2", ",", "209439.51023931956`"}], "}"}], 
   ",", 
   RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}]], "Output",
 CellChangeTimes->{3.761236144496719*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"07f9d9dc-5386-4d20-8154-301428a5418a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       FractionBox["1", "50"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"Cos", "[", "20", "]"}], "+", 
         RowBox[{"20", " ", 
          RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], ",", 
      FractionBox["256", "15"], ",", "2", ",", "209439.51023931956`"}], "}"}],
     ",", 
    RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[109]:=",ExpressionUUID->"64aacb8e-eb73-43ac-a404-58ecec6cae7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "50"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"Cos", "[", "20", "]"}], "+", 
      RowBox[{"20", " ", 
       RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], ",", 
   FractionBox["256", "15"], ",", "2", ",", "209439.51023931956`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.761236173941012*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"1ab39ccc-3659-4b8e-9a87-4f237212882c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     FractionBox["1", "50"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"Cos", "[", "20", "]"}], "+", 
       RowBox[{"20", " ", 
        RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], ",", 
    FractionBox["256", "15"], ",", "2", ",", "209439.51023931956`"}], "}"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[110]:=",ExpressionUUID->"a349970e-58a5-46ae-9b43-d032af65dbde"],

Cell[BoxData["209459.18436430788`"], "Output",
 CellChangeTimes->{3.7612361796747*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"2824f615-38db-4b15-a206-96fbf7677007"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"e", "[", 
    RowBox[{"X1t", "[", "t", "]"}], "]"}], ",", 
   RowBox[{"e", "[", 
    RowBox[{"X2t", "[", "t", "]"}], "]"}], " ", ",", " ", 
   RowBox[{"e", "[", 
    RowBox[{"X3t", "[", "t", "]"}], "]"}], " ", ",", " ", 
   RowBox[{"e", "[", 
    RowBox[{"X4t", "[", "t", "]"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612362553225365`*^9, 3.76123628798623*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"cf5e74bf-03f6-4231-a10f-30ee7b397829"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{FractionBox[\\\"256\\\", \
\\\"15\\\"], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"209439.51023931956`\\\", \\\
\",\\\", RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing.\"",2,116,14,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612362914260006`*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"bb60f4f5-0d77-43c6-909a-26bd37cac989"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfal",
   "\"Value of option TableAlignments -> \\!\\(\\*RowBox[{\\\"TableAlignments\
\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", \
RowBox[{FractionBox[\\\"256\\\", \\\"15\\\"], \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"209439.51023931956`\\\", \\\",\\\", \
RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \
\\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be a list of \
alignment specifications (Top, Bottom, and Center for row dimensions, or \
Left, Right, and Center for column dimensions).\"",2,116,15,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236291428009*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"72c9aab3-8824-4251-9290-069a747a2dc5"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{FractionBox[\\\"256\\\", \
\\\"15\\\"], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"209439.51023931956`\\\", \\\
\",\\\", RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing.\"",2,116,16,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612362914788494`*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"847a36da-4c98-414a-a60f-c8b0c9d06ef4"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","iopnf",
   "\"Value of option \\!\\(\\*RowBox[{\\\"TableDepth\\\"}]\\) -> \
\\!\\(\\*RowBox[{\\\"TableDepth\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", \
RowBox[{\\\"{\\\", RowBox[{FractionBox[\\\"256\\\", \\\"15\\\"], \\\",\\\", \
\\\"2\\\", \\\",\\\", \\\"209439.51023931956`\\\", \\\",\\\", \
RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \
\\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be a \
non-negative integer or Infinity.\"",2,116,17,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612362915297422`*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"78bf6b9a-2d95-495b-85ba-3f2edf9b7a71"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{FractionBox[\\\"256\\\", \
\\\"15\\\"], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"209439.51023931956`\\\", \\\
\",\\\", RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of \
replacement rules nor a valid dispatch table, and so cannot be used for \
replacing.\"",2,116,18,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612362915796127`*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"337a8c4a-aa5d-422f-b325-6f1378e8d0e8"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"ReplaceAll\\\", \
\\\"::\\\", \\\"reps\\\"}], \\\"MessageName\\\"]\\) will be suppressed during \
this calculation.\"",2,116,19,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612362916294436`*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"2511f614-c878-4773-9b31-fb964fa63e95"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfh",
   "\"TableHeadings option contained \\!\\(\\*RowBox[{\\\"TableHeadings\\\", \
\\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", RowBox[{FractionBox[\
\\\"256\\\", \\\"15\\\"], \\\",\\\", \\\"2\\\", \\\",\\\", \
\\\"209439.51023931956`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\\\", \\\"\
\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\
\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\), which is not Automatic, None, or a \
list of labels.\"",2,116,20,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236291678345*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"28f4041a-b55d-49aa-93f6-a0e0e66e7c9c"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfdir",
   "\"Value of option TableDirections -> \\!\\(\\*RowBox[{\\\"TableDirections\
\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", \
RowBox[{FractionBox[\\\"256\\\", \\\"15\\\"], \\\",\\\", \\\"2\\\", \
\\\",\\\", \\\"209439.51023931956`\\\", \\\",\\\", \
RowBox[{\\\"TableAlignments\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \
\\\",\\\", RowBox[{\\\"TableDepth\\\", \\\"\[Rule]\\\", \
\\\"\[Infinity]\\\"}], \\\",\\\", RowBox[{\\\"TableDirections\\\", \
\\\"\[Rule]\\\", \\\"Column\\\"}], \\\",\\\", RowBox[{\\\"TableHeadings\\\", \
\\\"\[Rule]\\\", \\\"None\\\"}], \\\",\\\", RowBox[{\\\"TableSpacing\\\", \
\\\"\[Rule]\\\", \\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be Row, \
Column, or a non-empty list of these values.\"",2,116,21,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236291730175*^9},
 CellLabel->
  "During evaluation of \
In[111]:=",ExpressionUUID->"59b546ef-c8ad-4e22-8043-f6b1471e8f1d"],

Cell[BoxData[
 TagBox[
  RowBox[{
   FractionBox["1", "50"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"Cos", "[", "20", "]"}], "+", 
     RowBox[{"20", " ", 
      RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$, 
    Rational[256, 15], 2, 209439.51023931956`]]]], "Output",
 CellChangeTimes->{3.7612362917810717`*^9},
 CellLabel->
  "Out[116]//TableForm=",ExpressionUUID->"417181b5-2e4d-4fcf-9e81-\
629972d46981"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Abs", "[", "g", "]"}], ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m1", " ", "=", " ", 
   RowBox[{"e", "[", "X1t", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m2", " ", "=", " ", 
   RowBox[{"e", "[", "X2t", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m3", " ", "=", " ", 
   RowBox[{"e", "[", "X3t", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"m4", " ", "=", " ", 
   RowBox[{"e", "[", "X4t", "]"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7612363373223133`*^9, 3.761236400952237*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"1d0aecde-0d29-4372-a25a-8e674a8342bb"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X1t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,122,22,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236403916314*^9},
 CellLabel->
  "During evaluation of \
In[117]:=",ExpressionUUID->"cd18938b-cf5b-4422-ad7f-9a747f827c35"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X2t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,123,23,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612364039183455`*^9},
 CellLabel->
  "During evaluation of \
In[117]:=",ExpressionUUID->"960b1bb5-5030-4a45-9a2c-f6e96f0c5d0b"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X3t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,124,24,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236403967216*^9},
 CellLabel->
  "During evaluation of \
In[117]:=",ExpressionUUID->"e4cea5de-404b-4eb0-a661-e8e7b7b7a53a"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Abs\\\", \\\"[\\\", \
\\\"X4t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,125,25,
   20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761236404015051*^9},
 CellLabel->
  "During evaluation of \
In[117]:=",ExpressionUUID->"269cd20d-c375-495b-9128-391bd24c13c0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Table", "["}]], "Input",
 CellChangeTimes->{{3.76123646046916*^9, 
  3.7612364758031693`*^9}},ExpressionUUID->"da89587a-f829-4a6d-b7a2-\
c085bffd69fa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Dc", "[", "g_", "]"}], ":=", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{"g", ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          RowBox[{"-", "T"}], ",", "T"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dc", "[", 
  RowBox[{
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "t"}], "]"}], "^", "2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612370026487207`*^9, 3.7612371554760313`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"6099ccf6-204b-4b49-bfb0-840acbc66c31"],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.7612371582117023`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"e570cca6-0642-4a7e-862a-579349ca42b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7612374228752565`*^9, 3.7612374235225477`*^9}, {
  3.761237471091565*^9, 3.7612374739948006`*^9}, {3.761237526267891*^9, 
  3.7612375726258516`*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"22249efd-36b5-446b-8af6-32332c3c3072"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwUWnk8VO8XxoydwViyJLJlyZqlIu+NoiKpfFUShYSkEhKhVFIhSymipJKQ
LUlS71tkS2VLdncsY+eO7Ovv/v6az/O58557znOe8855Pp/Z6HL+0GkONja2
Qiob2/8/Qwb3T62tiaIohS3O45b9gBksMdOxLIrcPvKxXdPrBzbCPXMfFkSR
SV4L73bZfiC/7cLK+X+i6Pzl2I8q//rAt7vxPDhTFCUqF45NpfUBHq2/G9BP
UfS+zyf8D7UPXPz2bGNKrShSQ5p+ilO9oN3eQymwShRVfMU/P+/pBdlhC2o6
X0UROLb/tO6nXmDTIGOQViSK/vpV8mT79YIHfietrj0RRd0qMZO+LAZY4VGz
cXwsiqauOVew9TKAeyrLdutD8v387AGVjQxgVBluT8SIotlRFZmlIgZoX/fq
1MlwUdR/+WS52FUGMM8552YSJooYQbK4tw8D5GCGZySviiLa3zQutlMMEOJZ
5V3vL4rc052HWi0YQP7T8GXMUxQt+U31O4kzwJ0DhUHr3UXRL85nO5N4GWCq
Lyhk3kUUhX7ROSuyioNyAYEb+Y6iCB+2cC8bxIG7k1aMvK0o8rLb7sb5BQe/
pmZjl61FUZEQNcWwCAdGt2FC615RpLpfaPZ1Fg548m2TYs1FkZLcLmnrxzjI
Zr/0ks1IFPHYr7I9D8DB1sNZXElbRFFa+4VvBj44qHzJ8NDVEUXDLuUKku44
wC1tNV3UyHozMqsq7XHgk3T7/qKyKJoL/H4n4QAOlka+sOIVRJGpYdNA7h4c
SMRoFpfLiKKGHEmrRmMcvOxxk3SUFEVDiRmf2w1woKubEjQtRupB6HeKng4O
voQ3dUaJiKKwdwyJdnUcWDfzAWWaKIobSDvSoIyDdmWz55/5RNH2N1ik5EYc
nLl8hWLPLYoKY0//zluPg3DpoaoINrKffStav8VwIOwtpy63QkduN/pvHxHB
Qepn+6gPC3SUxmYQqEPDgbpQzMSBWTqiTJdIOfDjoOTkd9uhKTqKDn51o5kH
B7sLlwuvTdIRZ1py7TMuHDRS9MWlxugo7Ec6WxkVByf/O3u5YIiOaAf1DNQo
OBjPSG/bO0BHnzg3+Q+y4yBovs24l0FHxSNVtbNsJP/7RJ4GddNR+1DFjiMk
fvhkD5toBx25pBo28ZBYYTzMJfsvHS0aPY3mJ3G+6YcK82Y6WvUc8HYm8Y7Y
CZXOejqSPePkQyXj1zKU7/j9pCP1ufKoRRIf3XJiVKCWjnYlbUM7yXyYNx/s
f1VJRxYlVqttZL6XWn7k7Sino7PE5LZysh42VQq9BdLRHvdbritkvTFXtvv5
lNERm/Yfj0iSD5kfF1u4PtJRfg3dwI3kK3P9m63P3tORYlZnfizJp6EPnmxU
SD5vNvkmKE7qE65b+Z1LR0733lh3SOLAVuSAs0c2Ha0X4NJdIPvT7RLxlS2T
jrCTL/afIfs3zzlzS/c5Hb2boaVs0cBBxJHNQzWpdBQZkhMSR+pB9I3rPpdk
Orp3VWPO1BAHWtaNtIQEOrKfPjxz2wwHZam8FzVi6ci931VccS8O9k5iTeVR
dMTRpkQVtMWBW3zeo+lbdHRBKMOjzgkn54m5EBVOR/SB6NPPST2HGWxwVA6j
o0qBK6CC1Htya5S8fSDZry38IVNhOFBVrwif8KOj1+Dn4ZVIHLwPXuqPuEhH
mS5143bxOKjf4PXmgxcdSb71NBx+hQPO05Z6UifoKMosZX1qPakXJ90jo8fo
6KW9kN3ODhw8PSpz9bM9qT/1UA0VJsmf9eT3U7Z0lFsqfi1/mZznLY+OZZnT
kZVex7cvmxlAT/N66FWM7L97Ka/zNgZYVTn7wmYHHd1slt2/g7w/HkmD8SlD
kq/lsv8KTzJANfvgNWN1OhLg0Oq99JgBHizVvxLcRD7/EBC9kMEAJ2dKa3sU
6SgZhsmXvmeAhaEYsZuydJRdBA+NNDGAer1hZp0wHV3+hnUu0ntB1NOI3yfm
RFAL7f6ngCe94OjjC9Pa0yLorIuqh//bXqAU7yDFwRJBse5P417DXvD5lpZr
xogI+rWuf8/L/l4w4d0yO9ElgrZlFPgROn3A1lhlw7UKEfSg9MP+o419QLT1
u3d6nAgK3LXFf6f+AEAazyNvxoigjae239pgNQC8w66+dL8ngp6/FEiRdhkA
lSpbOtVviaD6VCXrc7EDIMg/zepdIHl+a9R1r4kB0EsPVq9wFkHT12citfOY
oHC/ztCApghK9hLqFgFDwPk5P7VaXQQBviyra0eHgMAMUy5rkwgaD38bP3dx
CLinpB7x2SiCCviOfVx5OQSkR/mqZsVE0L+QmJeH+YdBeOTAK+5lYdSYjhxC
W4fBofJkV7VaYXRFzK/22vlRoNTc311VKYxapl7GF90dBbP9Wg7u5cLotZmM
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
XBA7dFvmragwAU9sTTu3fEoQq1S8fihKmoBRJ7jbMA9BLE9ep6FJiYCjr//k
1fgJYuPSB61/byVgponviY5oQayq7p9AoBMBW0+1Vcs9EMTM7hjuPXOGgNy3
MX23ZEGs+83z48oXCOjeQOMfzxDE+I9ki9KuE1DRPbtkFQpi36JPBcenEfDQ
PbqSeaUgFuC9JrDwmoDh+Vfu364TxIKvKOdp5REQX7R0F24TxB4+P2nH/ZmA
wvJ5DXY9gpi+3fWLWeUEBLsldiQNCGJuD7Gm9bUEfHq/X1RhShAry5F9cb6F
gD+LrMLc5wUxxaVWPdtOAi63FY5krQpisfXe+9h6CXhc6frXLfw0rHshz+n3
GAElP8qe361Ew07FzfhosLHgqutrGRENGrZVJKCQSWXBfppudacuDbtpJfrb
k5cF8912bfQDNIxrM122WoQFE4V+/QQWNCz3t13iC3EWvFp6JIh/Pw1rXLwU
aCnFgpbCZ5vSHWhYtU+X2LAcC27+NB3mc4qG7aGKbBxUYEG6e+jm7R5kfGvW
tlxlFpwX5mnjPE/DTFn37pmqsmD3p7hbDf40jH5LzfyxOgtWuMvopV6lYUjH
+v7//8+bJfKq2+MGDbt9NPdZphYLxpZp3dO/S8Nqt+185azDggFnSozY4mhY
8zWNRlyXBR3pZv0/HtGwpZaqY5u3sKDZ5x+xj57SME7PFxfM9FlQ1eO/Ha6v
aFj/6avWigYsSBPtGdbKIc/7Y0q/STz92SNxsZCGDajx61gYsmC7x5RZ5Uca
xuGm9CaSxEj06mQcomEXPqzWJJI44wtnyokq8vxXg18XSBzleX+P2i8a1nU1
aorcz6CvmNTMdDMNi4gc9btDxj8K05+jDhrG6+P8oJrMx9Rrs01ULw0L7pCI
aybzVRIvXjwyTPLTejLnrR4L8iHwWpGgYdhUlqodWR/hVXN4cpY87xa2t1qb
Bf+IH2b7tELDCrfcOMxH8lOKOnMiqEJYzz6/KOn//x/6rPuxQ/xCWObtTcYL
aiwYIUFwbqALYfGVEa8zNrGg99crhcOSQtjrgRhpRbI/h7wpzu/lhLBitL/b
h+zf1nXR/NdVhDCkgu+4S/aXei7NTVJfCOPdqMuhS/Z/ZJ26SP92IWzlv1Mc
n0l91H979zlvpxDmK7rrjxSdBVMkqyQsDwhhGR7mBpZ8LBhebltOtxfCNltP
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
D6hyW/U=
       "]]},
     Annotation[#, "Charting`Private`Tag$1120743#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-1.0758287058124423`, 1.075825943315621}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612375736122007`*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"f66716ce-21ce-4896-8061-a7456f430d3a"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7612377138531017`*^9, 
  3.7612377213626795`*^9}},ExpressionUUID->"d3f294de-282c-43ff-bfee-\
4ec43d3cd64c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X4t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "0.00001"}], ")"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"t", "/", "0.00001"}], "]"}], "^", "2"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Xst", "[", "t_", "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"n", " ", "*", " ", "0.1"}], "]"}], " ", "*", " ", 
      RowBox[{"X4t", "[", 
       RowBox[{"t", "-", " ", 
        RowBox[{"(", 
         RowBox[{"n", " ", "*", " ", "0.1"}], ")"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Xst", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761237898388352*^9, 3.7612379034398613`*^9}, {
  3.7612379823598795`*^9, 3.7612381308972836`*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"bac352fa-0e85-4f78-a18c-c5a098197a75"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,139,
   26,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381320202365`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"73a64df2-566f-4838-9fb0-f4d43395be15"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}]\\) is Protected.\"",2,139,27,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381320222635`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"a3907bb6-6610-47e0-9c34-999f05f70677"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \
\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", \\\"1.`\\\"}], \\\" \\\", \\\"\[Infinity]\
\\\"}]\\) is Protected.\"",2,139,28,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381320701036`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"4ba80a12-a04a-408c-a8aa-f551cf6b0e14"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,139,
   29,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381321169786`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"818a7d14-28f9-4542-91ff-16cbc6577b2b"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}]\\) is Protected.\"",2,139,30,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381321639013`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"b5a15527-1ac9-4418-bb27-c5050ef1a354"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"NSum\\\", \\\"::\\\", \
\\\"write\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,139,31,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.76123813220973*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"82fe3be6-377e-43ac-92b5-703477a128b9"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,139,
   32,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381322566195`*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"b445f21d-73a5-43df-9a1f-39260cb87acc"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Sum\\\", \\\"::\\\", \\\
\"vloc\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,139,33,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238132303528*^9},
 CellLabel->
  "During evaluation of \
In[136]:=",ExpressionUUID->"6dcdbe62-2d7b-4ef4-a54b-4e211812ac72"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761238132350403*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"86e91c82-e96a-418d-8174-4dc48bae2a5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Xst", "[", "t_", "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"n", " ", "*", " ", "0.1"}], "]"}], " ", "*", " ", 
      RowBox[{"DiracDelta", "[", 
       RowBox[{"t", "-", " ", 
        RowBox[{"(", 
         RowBox[{"n", " ", "*", " ", "0.1"}], ")"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Xst", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761238168201532*^9, 3.761238195029854*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"35b96719-772f-403b-b1f3-69cfd3ea8018"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,142,
   34,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381964061575`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"0c1ccdde-22f4-4024-b8d2-79b01a1f55fe"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}]\\) is Protected.\"",2,142,35,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238196408154*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"90cecaf6-c03f-41ac-ab49-a53162e184c7"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \
\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", \\\"1.`\\\"}], \\\" \\\", \\\"\[Infinity]\
\\\"}]\\) is Protected.\"",2,142,36,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238196454037*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"f32d429e-3f0b-4535-97d5-1dfe290a26a6"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,142,
   37,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381965009203`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"285d53ad-d111-471f-b735-306f4e9eaa95"],

Cell[BoxData[
 TemplateBox[{
  "NSum","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}]\\) is Protected.\"",2,142,38,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238196546765*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"ca4c1192-72e7-4ddf-8c80-4accf3994efe"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"NSum\\\", \\\"::\\\", \
\\\"write\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,142,39,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612381965936394`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"487cd288-af5e-4e2f-b430-24cbd2231da5"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"",2,142,
   40,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238196640563*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"f8fc7577-b3b3-47cc-9837-4c7eea356a2e"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Sum\\\", \\\"::\\\", \\\
\"vloc\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,142,41,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238196686391*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"d42cafe8-b6a4-416a-aff7-b5d9cd65c7df"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612381967343097`*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"d243795c-8985-42ad-b36a-5c0b4c736afa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Xst", "[", "t_", "]"}], ":=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"n", " ", "*", " ", "0.1"}], "]"}], " ", "*", " ", 
      RowBox[{"DiracDelta", "[", 
       RowBox[{"t", "-", " ", 
        RowBox[{"(", 
         RowBox[{"n", " ", "*", " ", "0.1"}], ")"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Xst", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761238248622579*^9, 3.7612382509583745`*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"c68dfb99-3037-4abd-a539-a6c6441a567d"],

Cell[BoxData[
 TemplateBox[{
  "Sum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be used as an \
iterator.\"",2,145,42,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255215948*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"3bf74fc7-060b-415d-b888-03b230d660e3"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be localized so \
that it can be assigned to numerical values.\"",2,145,43,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255217976*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"d4ed22e1-3ec3-40fb-a9b7-79a3bd5d54f8"],

Cell[BoxData[
 TemplateBox[{
  "NSum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be used as an \
iterator.\"",2,145,44,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255270835*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"fa5c4aba-1b4c-4e99-a0c9-e0bb8e95633c"],

Cell[BoxData[
 TemplateBox[{
  "NSum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0.`\\\"}]\\) cannot be used as an \
iterator.\"",2,145,45,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382553177013`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"d2a0aed2-140d-4178-a07d-7ae331848758"],

Cell[BoxData[
 TemplateBox[{
  "Sum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be used as an \
iterator.\"",2,145,46,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382553635798`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"aaa44fdf-3168-46f9-b418-7758be2aa60f"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be localized so \
that it can be assigned to numerical values.\"",2,145,47,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382554084663`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"80c146eb-c554-4044-8502-73e7d2ff26c3"],

Cell[BoxData[
 TemplateBox[{
  "NSum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be used as an \
iterator.\"",2,145,48,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382554543457`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"135242c3-9848-452b-8b98-d9165e2f85e6"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"NSum\\\", \\\"::\\\", \
\\\"itraw\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,145,49,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382555002265`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"3108e643-3b37-46c9-9d06-3e5408be5618"],

Cell[BoxData[
 TemplateBox[{
  "Sum","itraw",
   "\"Raw object \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be used as an \
iterator.\"",2,145,50,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7612382555460653`*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"5d666bc6-4681-4bc0-a6d4-134263217a42"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Sum\\\", \\\"::\\\", \\\
\"itraw\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,145,51,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255592986*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"8e7d5344-ffc6-4fe1-b615-9bc91df4e499"],

Cell[BoxData[
 TemplateBox[{
  "Sum","vloc",
   "\"The variable \\!\\(\\*RowBox[{\\\"0\\\"}]\\) cannot be localized so \
that it can be assigned to numerical values.\"",2,145,52,20608653710653559281,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255639864*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"6f0ce24f-e989-45d5-9da8-99c9576b15fe"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Sum\\\", \\\"::\\\", \\\
\"vloc\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"",2,145,53,20608653710653559281,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761238255684696*^9},
 CellLabel->
  "During evaluation of \
In[143]:=",ExpressionUUID->"83cc21b8-8eab-4184-ad52-2b7c91d00c88"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7612382557326145`*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"1bf86595-664f-41fa-8933-a44a14ffb7f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"u", "[", "t_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"UnitStep", "[", 
     RowBox[{"t", "+", "1"}], "]"}], " ", "-", " ", 
    RowBox[{"UnitStep", "[", 
     RowBox[{"t", "-", "1"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", " ", 
  RowBox[{
   RowBox[{"u", "[", "t", "]"}], " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7614859081106267`*^9, 3.7614859604353943`*^9}, {
  3.7614860044129786`*^9, 
  3.7614861160611143`*^9}},ExpressionUUID->"b35bddcf-2ef2-488c-9ea2-\
734825d23271"],

Cell[BoxData[
 TemplateBox[{
  "Set","write",
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*RowBox[{\\\"t\\\", \
\\\" \\\", \\\"u\\\"}]\\) is Protected.\"",2,1,1,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614860753598986`*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"6dc7005c-58f6-41fb-849f-7b959baa2336"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7614860755395374`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"7c0ce845-b027-4abb-9ecc-92c405e46474"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"u", "[", "t_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"UnitStep", "[", 
     RowBox[{"t", "+", "1"}], "]"}], " ", "-", " ", 
    RowBox[{"UnitStep", "[", 
     RowBox[{"t", "-", "1"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", " ", 
  RowBox[{
   RowBox[{"u", "[", "t", "]"}], " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"f7c734b8-6071-4760-9697-229de78cc101"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcH7JB11N
8RYEf8f3xth/WQi+I5vWsTMWCH6QctX0zCtf4fzSWCmrxdwI/q6LUfViVZ/h
/H831m3+m4DgOz1gevHEHcE//W5VwGZRBP8O92/FgI2f4Pz/rrOPdL74COe7
+L7/UXAewe8IcdaN2IbgCyS/nqrWguArNVinH5ZH8NPa+2evYkPwV/U9Pj/x
7Qc433hut0XCbgS/Ysn9HPdFCP6e1cYL9ToRfJddtzn/hiH461YttTxujeBL
zM7PnKiA4B//dSFCXgrBBwCdg+Gk
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQXcwV53fw9Pv9DGDwwb5up15gSTqCr1odJjD31zs4
v+Tf0r53Cgj+ocavPA7ub+H8+I4pnI8nv4bz//QZs7U9eAnnm80p/H+68hmc
X7By/Q9B4cdwPlvzjwVuRTfh/LA05YWXak7C+cfP3OwyDj5hD+PnLCifKrvm
JpxvpXtwU8D0x3D+mznSX/T2PYPz5/OUmfI+fQnnV7goh9VUvIbzg2oulL3m
fgvn20mosy++iuBrb6mdHjX/HZyvxLQy3ozlPZwvEXBFXSgTwRf+/pK7YTaC
Dw1vOB8AJXWB6Q==
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQffzXhQh5qQ/2DFAQlbDq0g4TBH+Tl/1JngAEP0k+
c9uWNgT/0Ik9E1i+IPjN0imuS859hPNZDm5a97j5M5zPzhPQmPTuG0L9g2vO
RYv/wvkbZrcF1H1idIDx8xelCDwJY4Xz47JmybY3csD5nYFllsZzuOF8FpGp
z+p/8cH510+3fmjhF4TzQ6uTzGYdFoLzc7hfK52LEoHz5Vcfm8b2ShTOr97h
HMw/WxzOL1iWs81MXxLO52EyT9J7KgXnu+aGTNWaLAPnS+yUzXdVkYPzJxV1
TDS4Lg/nB7X5687dpgDna0W3hC6pVYTzrz3jXDQ5VAnOP5f01FFIXhnOf8iy
/MdUJQT/y7KM9ZJqCL7k69cyiroIfkrxp+/61gj+r+b/a33DEXy1pZJSnf0I
vqX77Qs8kxF8n5dz2idMQ/ALdRW+Tp+L4O/ZqnZh2WoEP+iYcduR4wh+asZX
G4/TCH4F1/bPp88h+HP9rBIvX0XwX1xzsHn0GMm9FUyfU58j+LzSR1a+fIXg
G8W7i3/8iOC7MnKeK/mK4EcsPtXy4weCn+XaY13zB8Gvfe776f9/BB8ASryy
Vg==
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$31150#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7614861257401485`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"9a5f87f2-c797-409e-a29a-b5e806fc4736"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"u", "[", "t_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"10000", " ", "*", " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"t", "+", "0.0001"}], "]"}]}], " ", ")"}], "-", " ", 
    RowBox[{"(", " ", 
     RowBox[{"10000", " ", "*", " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"t", "-", "0.0001"}], "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", " ", 
  RowBox[{
   RowBox[{"u", "[", "t", "]"}], " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7614861568961964`*^9, 3.7614862179943995`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"33c80f77-3dcf-41e0-8969-4c3f6b0b6c93"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQAGIQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcL7Lrtuc
f8M+wPkFK9f/EBR+DOeHpSkvvFRzEs6far48xqSjCs4HAAzbgVA=
        "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQXR3q51q7rdKeAQqsdA9uCpj+GM5nKhO9kyL5Ac5n
5wloTHr3Dc5vfnDNuWjxXzh/w+y2gLpPjA4wfv6iFIEnYaxwflzWLNn2Rg44
vzOwzNJ4DjeczyIy9Vn9Lz44//rp1g8t/IJwfmh1ktmsw0Jwfg73a6VzUSJw
vvzqY9PYXonC+dU7nIP5Z4vD+QXLcraZ6UvC+TxM5kl6T6XgfNfckKlak2Xg
fImdsvmuKnJw/qSijokG1+Xh/KA2f9252xTgfK3oltAltYpw/rVnnIsmhyrB
+eeSnjoKySvD+Q9Zlv+YqoTgf1mWsV5SDcGXfP1aRlEXwU8p/vRd3xrB/9X8
f61vOIKvtlRSqrMfwbd0v32BZzKC7/NyTvuEaQh+oa7C1+lzEfw9W9UuLFuN
4AcdM247chzBT834auNxGsGv4Nr++fQ5BH+un1Xi5asI/otrDjaPHiO5t4Lp
c+pzBJ9X+sjKl68QfKN4d/GPHxF8V0bOcyVfEfyIxadafvxA8LNce6xr/iD4
tc99P/3/j+ADAFKInrs=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$31778#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761486219084124*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"2104ed01-bf63-460c-8d88-02ce449cb6d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["integral", "WolframAlphaShort",ExpressionUUID->"c455e139-673d-4128-8ca9-02185fae1ba8"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.761487725041976*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"eb7471b1-7e4f-4f1e-8c51-5938f65105ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"Cos", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "26.389378290154262`"}], ",", "26.389378290154262`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[26]:=",ExpressionUUID->"7a9a4896-0b32-4288-bb20-0d3320cae6c4"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$43187#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-26.389378290154262`, 
   26.389378290154262`}, {-0.9999999988562447, 0.9999926990458547}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761487746473652*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"9d18481d-b321-4945-a369-e368c2765cad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"Abs", " ", "[", 
     RowBox[{
      RowBox[{"UnitStep", "[", 
       RowBox[{"Pi", " ", "*", " ", "t"}], "]"}], " ", "*", " ", 
      RowBox[{
       RowBox[{"Ramp", " ", "[", " ", 
        RowBox[{"4", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"t", "^", "2"}], ")"}]}], "]"}], " ", "^", " ", "2"}]}], 
     "]"}], " ", ",", " ", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.761487773193185*^9, 3.7614877924317274`*^9}, {
  3.7614878482548122`*^9, 3.7614879110169415`*^9}, {3.7614879419900975`*^9, 
  3.7614879895857925`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"9a3d7cd5-e390-4b38-ab92-c9432a99bf69"],

Cell[BoxData[
 FractionBox["256", "15"]], "Output",
 CellChangeTimes->{3.761487945955491*^9, 3.7614879925239334`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"9baefed3-3692-4d51-a93d-5922b7477290"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", " ", "[", 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}], "]"}], " ", "]"}], "^", " ", "2"}], 
    ",", " ", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "Infinity"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.761488074935506*^9, 3.761488137723567*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"6b858654-7406-4e92-adee-d257b8cc17e0"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.7614881498531237`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"70d68235-03e3-4bad-b6c5-03a8c37f652f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Abs", " ", "[", 
     RowBox[{
      RowBox[{"DiracDelta", "[", 
       RowBox[{"t", "-", "3"}], "]"}], " ", "+", " ", 
      RowBox[{"2", " ", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"t", "+", "1"}], "]"}]}]}], " ", "]"}], "^", " ", "2"}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7614881998813133`*^9, 3.761488249438761*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"edeb03e5-bf54-4950-9798-663d285ef004"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"DiracDelta", "[", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "t"}], "]"}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"1", "+", "t"}], "]"}]}]}], "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.761488253638528*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"6ae8a2e1-a2dc-4f49-b346-50d4bd6f0711"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Abs", " ", "[", 
     RowBox[{
      RowBox[{"DiracDelta", "[", 
       RowBox[{"t", "-", "3"}], "]"}], " ", "+", " ", 
      RowBox[{"2", " ", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"t", "+", "1"}], "]"}]}]}], " ", "]"}], "^", " ", "2"}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"cce2b039-2af7-40a1-852c-c433228959e6"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"DiracDelta", "[", 
       RowBox[{
        RowBox[{"-", "3"}], "+", "t"}], "]"}], "+", 
      RowBox[{"2", " ", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"1", "+", "t"}], "]"}]}]}], "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.761488272578868*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"264889a2-98bc-4a31-b012-518eba5f41a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"DiracDelta", "[", "t", "]"}], ")"}], "^", " ", "2"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761488331654524*^9, 3.761488346390129*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"0fd6bc8c-69e5-46ff-9a06-404b29861dc5"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"DiracDelta\\\", \\\"[\\\
\", \\\"t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,32,4,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614883505652504`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"13dca4cd-d1ff-4108-bc41-0bf76eee7fba"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"DiracDelta", "[", "t", "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.761488350568242*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"1f016dfa-1b2b-4e1e-8190-b6988e3099da"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
          RowBox[{"Integrate", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", "g", ")"}], "^", "2"}], ")"}], ",", 
            RowBox[{"{", 
             RowBox[{"t", ",", 
              RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"p", "[", "g_", "]"}], ":=", 
         RowBox[{"Limit", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "/", 
             RowBox[{"(", 
              RowBox[{"2", " ", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
           RowBox[{"Integrate", "[", 
            RowBox[{
             RowBox[{"(", "g", ")"}], "^", "2"}]}]}]}]}]}], ")"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", " ", 
        RowBox[{"-", "T"}], " ", ",", "T"}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.761489210069231*^9, 
  3.76148923822834*^9}},ExpressionUUID->"f3e1e2c4-87ca-4dbd-83c6-\
415f859eece6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X2t", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"(", " ", 
     RowBox[{"UnitStep", "[", 
      RowBox[{"Sin", "[", 
       RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", ")"}], "*", " ", 
    RowBox[{"(", " ", 
     RowBox[{"Ramp", "[", 
      RowBox[{"4", "-", 
       RowBox[{"(", 
        RowBox[{"t", "^", "2"}], ")"}]}], "]"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"X3t", "[", "t_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"t", "<", 
      RowBox[{"-", "1"}]}], ",", " ", "0", " ", ",", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"t", "<", " ", "0"}], ",", " ", "1", " ", ",", " ", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "2"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"u", "[", "t_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"10000", " ", "*", " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"t", "+", "0.0001"}], "]"}]}], " ", ")"}], "-", " ", 
    RowBox[{"(", " ", 
     RowBox[{"10000", " ", "*", " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"t", "-", "0.0001"}], "]"}]}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"PDF", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "s"}], "]"}], ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", 
        RowBox[{"{", 
         RowBox[{"0.75", ",", "1", ",", "2"}], "}"}]}], "}"}]}], "]"}], " ", "//",
     " ", "Evaluate"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "6"}], ",", "6"}], "}"}], " ", ",", " ", 
   RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7614885767398243`*^9, 
  3.761488615995285*^9}},ExpressionUUID->"d690b0a1-63db-4fe5-919b-\
6fd43575b44c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"e", "[", "g", "]"}], ",", 
   RowBox[{"X1t", "[", "t", "]"}], ",", 
   RowBox[{"X2t", "[", "t", "]"}], ",", 
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"u", "[", "t", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761488784986807*^9, 3.7614888544495735`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"e6e86105-1461-481b-8e7a-a1d922ccda07"],

Cell[BoxData[
 TemplateBox[{
  "Table","nliter",
   "\"Non-list iterator \\!\\(\\*RowBox[{\\\"X1t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}]\\) at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) does not evaluate \
to a real numeric value.\"",2,33,5,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761488859593349*^9},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"61c80ee1-5e4d-4d3e-bfa0-43a1617a8a4b"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"e", "[", "g", "]"}], ",", 
   RowBox[{"X1t", "[", "t", "]"}], ",", 
   RowBox[{"X2t", "[", "t", "]"}], ",", 
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"u", "[", "t", "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.7614888595964327`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"fa1d9c77-c366-4d0c-b2c4-70398e72ece3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "[", "X1t", "]"}]], "Input",
 CellChangeTimes->{{3.761488876692954*^9, 3.761488883646673*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"8a93b0df-3b5b-4061-bef1-dfd13d133e5e"],

Cell[BoxData[
 RowBox[{"e", "[", "X1t", "]"}]], "Output",
 CellChangeTimes->{3.7614888847438912`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"6d470e1d-c10f-458a-a822-3a3ab1569cd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"e", "[", "X1t", "]"}], 
   RowBox[{"\[DifferentialD]", "X1t"}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[35]:=",ExpressionUUID->"95ef02b7-e218-4f7c-9f01-04b201d34a3b"],

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"e", "[", "X1t", "]"}], 
   RowBox[{"\[DifferentialD]", "X1t"}]}]}]], "Output",
 CellChangeTimes->{3.7614888892032638`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"ac39ddf0-2703-44ef-866e-b5d821fc37c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "X1t"], 
  RowBox[{"\[Integral]", 
   RowBox[{
    RowBox[{"e", "[", "X1t", "]"}], 
    RowBox[{"\[DifferentialD]", "X1t"}]}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[36]:=",ExpressionUUID->"3c5ee486-b5b4-4d0e-9b0b-c2751fc0a298"],

Cell[BoxData[
 RowBox[{"e", "[", "X1t", "]"}]], "Output",
 CellChangeTimes->{3.761488895801463*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"7c5bb423-79b5-4826-876d-5bf377ccc94d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"e", "[", "X2t", "]"}]], "Input",
 CellChangeTimes->{{3.761488967015032*^9, 3.7614889794817734`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"68e0ed7a-48d1-4c1d-9ecd-7c5df143623b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "[", "X2t", "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7614892420354075`*^9, 
  3.7614892420615997`*^9}},ExpressionUUID->"2695c699-fc66-4e9c-b1e8-\
10e508ccebb9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "[", 
  RowBox[{"sin", 
   RowBox[{"(", "t", ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7614892459354644`*^9, 3.761489252376007*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"5092f52d-ead0-474d-949b-31e87c84382a"],

Cell[BoxData[
 RowBox[{"e", "[", 
  RowBox[{"sin", " ", "t"}], "]"}]], "Output",
 CellChangeTimes->{3.761489253303632*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"1195b15a-f1e5-4484-b742-0563fcb9cc11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"e", "[", 
    RowBox[{"sin", " ", "t"}], "]"}], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[39]:=",ExpressionUUID->"43856070-b1ef-4ea4-942f-a6a3992310ec"],

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"e", "[", 
    RowBox[{"sin", " ", "t"}], "]"}], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.7614892728420906`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"2035df3f-ac1c-4fb6-9129-fa46170d0b7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"e", "[", "g_", "]"}], ":=", " ", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", "g", ")"}], "^", "2"}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"p", "[", "g_", "]"}], ":=", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", " ", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", "g", ")"}], "^", "2"}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", 
          RowBox[{"-", "T"}], " ", ",", "T"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"e", "[", 
  RowBox[{"Sin", "[", "t", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.761489294501296*^9, 3.761489344122291*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"558620e0-9793-4d22-b29d-b01d8b00b047"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","idiv",
   "\"Integral of \\!\\(\\*SuperscriptBox[RowBox[{\\\"Sin\\\", \\\"[\\\", \
\\\"t\\\", \\\"]\\\"}], \\\"2\\\"]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\",\\\", \\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"",2,42,7,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614893469733934`*^9},
 CellLabel->
  "During evaluation of \
In[40]:=",ExpressionUUID->"203ad3c3-79ce-4762-ade6-9f6331eb033d"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Sin", "[", "t", "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.761489346978515*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"9d0d61c2-c594-462f-b7a3-f0fb3c0fcf38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "[", 
  RowBox[{"X1t", "[", "t", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7614893713004103`*^9, 3.76148938015705*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"60e619f0-cf93-4f72-af3c-b5c2ff02d917"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "\[Infinity]"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"X1t", "[", "t", "]"}], "2"], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Output",
 CellChangeTimes->{3.7614893812238455`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"df040dd7-d70e-46ac-a5f9-c1dd416ef100"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"X1t", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"Sinc", "[", 
     RowBox[{"5", "t"}], "]"}], " ", "*", " ", 
    RowBox[{"UnitStep", " ", "[", " ", 
     RowBox[{"4", "-", " ", 
      RowBox[{"(", 
       RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"e", "[", 
  RowBox[{"X1t", "[", "t", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7614894112904224`*^9, 3.761489412456953*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"c347efbf-1877-424c-b613-5b968f2c9daa"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "50"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"Cos", "[", "20", "]"}], "+", 
    RowBox[{"20", " ", 
     RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.7614894145921483`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"91e5d2d7-d4b1-47d9-b6ec-973aeb8fd8d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RootApproximant", "[", 
  RowBox[{
   FractionBox["1", "50"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"Cos", "[", "20", "]"}], "+", 
     RowBox[{"20", " ", 
      RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[46]:=",ExpressionUUID->"cf0f7b94-5683-48c2-b20f-045b7e294f16"],

Cell[BoxData[
 RowBox[{"Root", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["#1", "2"]}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["#1", "3"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["#1", "4"]}], "-", 
     SuperscriptBox["#1", "5"], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["#1", "6"]}], "-", 
     SuperscriptBox["#1", "7"], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["#1", "8"]}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["#1", "10"]}]}], "&"}], ",", "2"}], "]"}]], "Output",
 CellChangeTimes->{3.761489423588426*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"0c2ec4b2-ae66-4ada-94ea-7e6422dd4b13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{"e", ",", 
    RowBox[{"X1t", "[", "t", "]"}], ",", 
    RowBox[{"X2t", "[", "t", "]"}], ",", 
    RowBox[{"X3t", "[", "t", "]"}], ",", 
    RowBox[{"u", "[", "t", "]"}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.761489722789054*^9, 3.7614897744667983`*^9}, {
  3.761489857582408*^9, 3.7614898587164364`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"3055e5dd-92a1-401c-a26e-add75482938e"],

Cell[BoxData[
 TemplateBox[{
  "Table","nliter",
   "\"Non-list iterator \\!\\(\\*RowBox[{\\\"X1t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}]\\) at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) does not evaluate \
to a real numeric value.\"",2,56,8,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614898603651724`*^9},
 CellLabel->
  "During evaluation of \
In[56]:=",ExpressionUUID->"909a92d6-910a-4d5f-9695-67eb328fc3b6"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"e", ",", 
   RowBox[{"X1t", "[", "t", "]"}], ",", 
   RowBox[{"X2t", "[", "t", "]"}], ",", 
   RowBox[{"X3t", "[", "t", "]"}], ",", 
   RowBox[{"u", "[", "t", "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.761489860370229*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"6e2f3be0-31d6-4286-b29a-d1a30fe52f54"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TableForm", "["}]], "Input",
 CellChangeTimes->{{3.761489878011489*^9, 3.7614898868693285`*^9}, {
   3.761489942307263*^9, 3.76148994231422*^9}, 
   3.7614900001394653`*^9},ExpressionUUID->"881ce116-327e-4f44-bb5c-\
32feda55c071"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"e", "[", "g", "]"}], " ", ",", " ", 
   RowBox[{"{", " ", 
    RowBox[{"g", " ", ",", " ", 
     RowBox[{"X1t", "[", "t", "]"}]}], " ", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761490002300632*^9, 3.7614900480982385`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"6c4d66b6-40e9-448a-afab-90d11a53404d"],

Cell[BoxData[
 TemplateBox[{
  "Table","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"g\\\", \\\",\\\", \
RowBox[{RowBox[{\\\"Sinc\\\", \\\"[\\\", RowBox[{\\\"5\\\", \\\" \\\", \
\\\"t\\\"}], \\\"]\\\"}], \\\" \\\", RowBox[{\\\"UnitStep\\\", \\\"[\\\", \
RowBox[{\\\"4\\\", \\\"-\\\", SuperscriptBox[\\\"t\\\", \\\"2\\\"]}], \\\"]\\\
\"}]}]}], \\\"}\\\"}]\\) does not have appropriate bounds.\"",2,57,9,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614900490358872`*^9},
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"98a67290-a104-42fc-abd5-26fc82ffd557"],

Cell[BoxData[
 TemplateBox[{
  "Table","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"g\\\", \\\",\\\", \
RowBox[{RowBox[{\\\"Sinc\\\", \\\"[\\\", RowBox[{\\\"5\\\", \\\" \\\", \
\\\"t\\\"}], \\\"]\\\"}], \\\" \\\", RowBox[{\\\"UnitStep\\\", \\\"[\\\", \
RowBox[{\\\"4\\\", \\\"-\\\", SuperscriptBox[\\\"t\\\", \\\"2\\\"]}], \\\"]\\\
\"}]}]}], \\\"}\\\"}]\\) does not have appropriate bounds.\"",2,57,10,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761490049039648*^9},
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"98c85b02-8658-4337-8800-a55892cfc9f2"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"e", "[", "g", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"g", ",", 
     RowBox[{
      RowBox[{"Sinc", "[", 
       RowBox[{"5", " ", "t"}], "]"}], " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"4", "-", 
        SuperscriptBox["t", "2"]}], "]"}]}]}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.7614900491305137`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"1ef4df8c-c220-4018-9213-a5cd3332c57a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"e", "[", 
    RowBox[{"X1t", "[", "t", "]"}], "]"}], ",", 
   RowBox[{"e", "[", 
    RowBox[{"X2t", "[", "t", "]"}], "]"}], ",", 
   RowBox[{"e", "[", 
    RowBox[{"X3t", "[", "t", "]"}], "]"}], ",", 
   RowBox[{"e", "[", 
    RowBox[{"u", "[", "t", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.761490106935031*^9, 3.7614901569777107`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"1c1ac626-5d56-4958-8bef-b57172e22b26"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{SubsuperscriptBox[\\\"\
\[Integral]\\\", RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\"\[Infinity]\\\"], RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \
\\\"t\\\", \\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\
\"}]}]}], \\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", \
RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of replacement rules \
nor a valid dispatch table, and so cannot be used for replacing.\"",2,58,11,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614901688380966`*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"6b088e42-212f-430d-966d-2176b66cc33d"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfal",
   "\"Value of option TableAlignments -> \\!\\(\\*RowBox[{\\\"TableAlignments\
\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be a list of alignment \
specifications (Top, Bottom, and Center for row dimensions, or Left, Right, \
and Center for column dimensions).\"",2,58,12,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614901688421345`*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"47f357ce-7f7b-452d-a826-dc88f9a2f094"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{SubsuperscriptBox[\\\"\
\[Integral]\\\", RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\"\[Infinity]\\\"], RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \
\\\"t\\\", \\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\
\"}]}]}], \\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", \
RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of replacement rules \
nor a valid dispatch table, and so cannot be used for replacing.\"",2,58,13,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614901689323425`*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"52e0697c-e281-47af-8f1e-c3074b3c0706"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","iopnf",
   "\"Value of option \\!\\(\\*RowBox[{\\\"TableDepth\\\"}]\\) -> \
\\!\\(\\*RowBox[{\\\"TableDepth\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", \
RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be a non-negative integer or \
Infinity.\"",2,58,14,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614901690206146`*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"4420dae2-6fe1-4ef8-9483-ba448916eb5f"],

Cell[BoxData[
 TemplateBox[{
  "ReplaceAll","reps",
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{SubsuperscriptBox[\\\"\
\[Integral]\\\", RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \
\\\"\[Infinity]\\\"], RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \
\\\"t\\\", \\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\
\"}]}]}], \\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", \
RowBox[{\\\"-\\\", \\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]\\) is neither a list of replacement rules \
nor a valid dispatch table, and so cannot be used for replacing.\"",2,58,15,
   20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761490169106864*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"9e0caa17-4b1f-4a50-bb59-cf48a9b830a7"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"ReplaceAll\\\", \
\\\"::\\\", \\\"reps\\\"}], \\\"MessageName\\\"]\\) will be suppressed during \
this calculation.\"",2,58,16,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761490169194646*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"a04604e9-11ce-49d1-8e22-66956ea21b7c"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfh",
   "\"TableHeadings option contained \\!\\(\\*RowBox[{\\\"TableHeadings\\\", \
\\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\), which is not Automatic, None, or a \
list of labels.\"",2,58,17,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.7614901692859464`*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"1163a792-cd25-4ff1-84c8-d4cc58c3219b"],

Cell[BoxData[
 TemplateBox[{
  "TableForm","tfdir",
   "\"Value of option TableDirections -> \\!\\(\\*RowBox[{\\\"TableDirections\
\\\", \\\"/.\\\", \\\"\[VeryThinSpace]\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X2t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", RowBox[{SubsuperscriptBox[\\\"\[Integral]\\\", RowBox[{\\\"-\\\", \
\\\"\[Infinity]\\\"}], \\\"\[Infinity]\\\"], \
RowBox[{SuperscriptBox[RowBox[{\\\"X3t\\\", \\\"[\\\", \\\"t\\\", \
\\\"]\\\"}], \\\"2\\\"], RowBox[{\\\"\[DifferentialD]\\\", \\\"t\\\"}]}]}], \
\\\",\\\", \\\"19999.99999999998`\\\", \\\",\\\", RowBox[{\\\"TableAlignments\
\\\", \\\"\[Rule]\\\", \\\"Automatic\\\"}], \\\",\\\", RowBox[{\\\"TableDepth\
\\\", \\\"\[Rule]\\\", \\\"\[Infinity]\\\"}], \\\",\\\", \
RowBox[{\\\"TableDirections\\\", \\\"\[Rule]\\\", \\\"Column\\\"}], \
\\\",\\\", RowBox[{\\\"TableHeadings\\\", \\\"\[Rule]\\\", \\\"None\\\"}], \\\
\",\\\", RowBox[{\\\"TableSpacing\\\", \\\"\[Rule]\\\", \
\\\"Automatic\\\"}]}], \\\"}\\\"}]}]\\) should be Row, Column, or a non-empty \
list of these values.\"",2,58,18,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761490169375281*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"9ffde1d3-06f1-4253-87b5-5c8d50406312"],

Cell[BoxData[
 TagBox[
  RowBox[{
   FractionBox["1", "50"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"Cos", "[", "20", "]"}], "+", 
     RowBox[{"20", " ", 
      RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$, 
    Integrate[$CellContext`X2t[$CellContext`t]^2, {$CellContext`t, 
      DirectedInfinity[-1], 
      DirectedInfinity[1]}], 
    Integrate[$CellContext`X3t[$CellContext`t]^2, {$CellContext`t, 
      DirectedInfinity[-1], 
      DirectedInfinity[1]}], 19999.99999999998]]]], "Output",
 CellChangeTimes->{3.7614901694637775`*^9},
 CellLabel->
  "Out[58]//TableForm=",ExpressionUUID->"693eeea7-d625-4fb7-a6ad-\
ac6a64bb6b5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   FractionBox["1", "50"], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"Cos", "[", "20", "]"}], "+", 
     RowBox[{"20", " ", 
      RowBox[{"SinIntegral", "[", "20", "]"}]}]}], ")"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[59]:=",ExpressionUUID->"86d1b3e5-ef0a-4211-96a7-26aec5351f79"],

Cell[BoxData["0.6074583216536437`"], "Output",
 CellChangeTimes->{3.7614902120828695`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"6b49d90f-0307-41e7-ab76-065ef1551183"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Dc", "[", "g_", "]"}], ":=", 
   RowBox[{"Limit", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", "*", "T"}], ")"}]}], ")"}], " ", "*", " ", 
      RowBox[{"Integrate", "[", 
       RowBox[{"g", ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          RowBox[{"-", "T"}], ",", "T"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"T", " ", "\[Rule]", " ", "Infinity"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"52b5707b-277f-4a84-b963-bd1a815b9686"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7614907595980377`*^9, 3.761490781577032*^9}, {
  3.7614910323650756`*^9, 
  3.7614910331968937`*^9}},ExpressionUUID->"8e14b344-5cdc-4b31-bf37-\
2461dc006797"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7614909033858*^9, 
  3.7614909208982544`*^9}},ExpressionUUID->"d3b8df10-dd2e-456f-876b-\
4730a57f44c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", "T"}], ")"}], " ", "*", " ", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"UnitStep", "[", 
        RowBox[{"Sin", "[", 
         RowBox[{"Pi", "*", "t"}], "]"}], "]"}], " ", "*", " ", 
       RowBox[{"Ramp", "[", 
        RowBox[{"4", "-", 
         RowBox[{"(", 
          RowBox[{"t", "^", "2"}], ")"}]}], "]"}]}], ",", 
      RowBox[{"-", "T"}], ",", "T"}], "]"}]}], ",", " ", 
   RowBox[{"T", "\[Rule]", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7614910831265116`*^9, 3.761491138413932*^9}, {
  3.7614912028834567`*^9, 3.761491271646329*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"3343112b-f7a8-4535-b114-1f2a0cfb31d4"],

Cell[BoxData[
 TemplateBox[{
  "Integrate","ilim",
   "\"Invalid integration variable or limit(s) in \\!\\(\\*RowBox[{\\\"-\\\", \
\\\"T\\\"}]\\).\"",2,60,19,20610363446034348701,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.761491273136424*^9},
 CellLabel->
  "During evaluation of \
In[60]:=",ExpressionUUID->"5873d597-412a-4ed3-afee-571a15ac86ad"],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[Limit]", 
   RowBox[{"T", "\[Rule]", "\[Infinity]"}]], 
  FractionBox[
   RowBox[{"\[Integral]", 
    RowBox[{"\[Integral]", 
     RowBox[{
      RowBox[{
       RowBox[{"Ramp", "[", 
        RowBox[{"4", "-", 
         SuperscriptBox["t", "2"]}], "]"}], " ", 
       RowBox[{"UnitStep", "[", 
        RowBox[{"Sin", "[", 
         RowBox[{"\[Pi]", " ", "t"}], "]"}], "]"}]}], 
      RowBox[{"\[DifferentialD]", "T"}], 
      RowBox[{"\[DifferentialD]", 
       RowBox[{"(", 
        RowBox[{"-", "T"}], ")"}]}]}]}]}], "T"]}]], "Output",
 CellChangeTimes->{3.7614912743852754`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"9860fe1a-d9bc-422a-9529-9c5ecad388c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"n", "*", 
      RowBox[{"(", "0.1", ")"}]}], "]"}], " ", "*", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"t", "-", 
      RowBox[{"n", "*", 
       RowBox[{"(", "0.1", ")"}]}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"g", "[", "t", "]"}], " ", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7614927441635976`*^9, 3.7614929299157567`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"e6185b7f-8b6e-48d4-bbfe-a4037a22de10"],

Cell[BoxData[
 RowBox[{"0.`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.9781730319062303`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "0.5`"}], "+", "t"}], "]"}]}], "+", 
  RowBox[{"0.8554378852922637`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "0.4`"}], "+", "t"}], "]"}]}], "+", 
  RowBox[{"0.6871836614750814`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "0.30000000000000004`"}], "+", "t"}], "]"}]}], "+", 
  RowBox[{"0.48099056749257896`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "0.2`"}], "+", "t"}], "]"}]}], "+", 
  RowBox[{"0.24759351997749796`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "0.1`"}], "+", "t"}], "]"}]}], "-", 
  RowBox[{"0.24759351997749796`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"0.1`", "\[VeryThinSpace]", "+", "t"}], "]"}]}], "-", 
  RowBox[{"0.48099056749257896`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"0.2`", "\[VeryThinSpace]", "+", "t"}], "]"}]}], "-", 
  RowBox[{"0.6871836614750814`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"0.30000000000000004`", "\[VeryThinSpace]", "+", "t"}], "]"}]}], 
  "-", 
  RowBox[{"0.8554378852922637`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"0.4`", "\[VeryThinSpace]", "+", "t"}], "]"}]}], "-", 
  RowBox[{"0.9781730319062303`", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"0.5`", "\[VeryThinSpace]", "+", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.7614929309809074`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"341c4c02-74d4-4e25-91ce-463c779e930e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"w", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7614929555663643`*^9, 3.761492986964493*^9}, 
   3.7614931631568947`*^9},ExpressionUUID->"45bf9b5f-4349-42b7-9da6-\
c736286b6471"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQXfvc99P//8oHGKDgWbXY19t/EHw/gfvft/9E8BUs
C/7mf0bwD3VN4njwDMHn0Lsud+Asgj+lJMG7YTaCv5qxeAmDOYLPmupuJBmr
BOcL3zias2iiIpwfdHhWsuYpBTi/+r1tzoTH8nD+jvJZWev95RDunRSq8G+m
DJzvPnevn8cbKTh/2fHKa8XRknB+XMsU0fMrxOH8ugTmddzCYnA+g678fudW
ETj/VvfM9tVXheB8Ga6MlV+cBOH8bFMt1tsy/HB+svm9FYcPc8P5WhVW//OW
cMD5C+8GH6l0ZIXznzeK2rhLMMH5u6ZquL4I+7sfxjd4efOL/txvcL7Lrtuc
f8M+wPkFK9f/EBR+DOf3fl240c7kAZwPAA30fho=
        "]], 
       LineBox[{{-0.49362244897959184`, 0.}, {-0.4063775510204082, 0.}}], 
       LineBox[{{-0.39362244897959187`, 0.}, {-0.3063775510204082, 0.}}], 
       LineBox[{{-0.2936224489795919, 0.}, {-0.20637755102040817`, 0.}}], 
       LineBox[{{-0.19362244897959185`, 0.}, {-0.10637755102040816`, 0.}}], 
       LineBox[{{-0.09362244897959185, 0.}, {0.09362244897959185, 0.}}], 
       LineBox[{{0.10637755102040816`, 0.}, {0.19362244897959183`, 0.}}], 
       LineBox[{{0.20637755102040814`, 0.}, {0.29362244897959183`, 0.}}], 
       LineBox[{{0.30637755102040815`, 0.}, {0.39362244897959187`, 0.}}], 
       LineBox[{{0.4063775510204082, 0.}, {0.49362244897959184`, 0.}}], 
       LineBox[CompressedData["
1:eJxTTMoPSmViYGBQA2IQ3ft14UY7kwf2DFDAIjL1Wf0vPgcY//rp1g8t/IJw
fmh1ktmsw0Jwfg73a6VzUSJwvvzqY9PYXonC+dU7nIP5Z4vD+QXLcraZ6UvC
+TxM5kl6T6XgfNfckKlak2XgfImdsvmuKnJw/qSijokG1+Xh/KA2f9252xTg
fK3oltAltYpw/rVnnIsmhyrB+eeSnjoKySvD+Q9Zlv+YqoTgf1mWsV5SDcGX
fP1aRlEXwU8p/vRd3xrB/9X8f61vOIKvtlRSqrMfwbd0v32BZzKC7/NyTvuE
aQh+oa7C1+lzEfw9W9UuLFuN4AcdM247chzBT834auNxGsGv4Nr++fQ5BH+u
n1Xi5asI/otrDjaPHiO5t4Lpc+pzBJ9X+sjKl68QfKN4d/GPHxF8V0bOcyVf
EfyIxadafvxA8LNce6xr/iD4tc99P/3/j+ADAP5phFQ=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$71893#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761492974610997*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"868ec844-0c9b-437a-9062-1ca37565699e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.76149316914787*^9, 3.7614931801075563`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"99f06461-c0fd-4b5e-9d71-6d493676ac3e"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwUWnk8VO8XxoydwViyJLJlyZqlIu+NoiKpfFUShYSkEhKhVFIhSymipJKQ
LUlS71tkS2VLdncsY+eO7Ovv/v6az/O58557znOe8855Pp/Z6HL+0GkONja2
Qiob2/8/Qwb3T62tiaIohS3O45b9gBksMdOxLIrcPvKxXdPrBzbCPXMfFkSR
SV4L73bZfiC/7cLK+X+i6Pzl2I8q//rAt7vxPDhTFCUqF45NpfUBHq2/G9BP
UfS+zyf8D7UPXPz2bGNKrShSQ5p+ilO9oN3eQymwShRVfMU/P+/pBdlhC2o6
X0UROLb/tO6nXmDTIGOQViSK/vpV8mT79YIHfietrj0RRd0qMZO+LAZY4VGz
cXwsiqauOVew9TKAeyrLdutD8v387AGVjQxgVBluT8SIotlRFZmlIgZoX/fq
1MlwUdR/+WS52FUGMM8552YSJooYQbK4tw8D5GCGZySviiLa3zQutlMMEOJZ
5V3vL4rc052HWi0YQP7T8GXMUxQt+U31O4kzwJ0DhUHr3UXRL85nO5N4GWCq
Lyhk3kUUhX7ROSuyioNyAYEb+Y6iCB+2cC8bxIG7k1aMvK0o8rLb7sb5BQe/
pmZjl61FUZEQNcWwCAdGt2FC615RpLpfaPZ1Fg548m2TYs1FkZLcLmnrxzjI
Zr/0ks1IFPHYr7I9D8DB1sNZXElbRFFa+4VvBj44qHzJ8NDVEUXDLuUKku44
wC1tNV3UyHozMqsq7XHgk3T7/qKyKJoL/H4n4QAOlka+sOIVRJGpYdNA7h4c
SMRoFpfLiKKGHEmrRmMcvOxxk3SUFEVDiRmf2w1woKubEjQtRupB6HeKng4O
voQ3dUaJiKKwdwyJdnUcWDfzAWWaKIobSDvSoIyDdmWz55/5RNH2N1ik5EYc
nLl8hWLPLYoKY0//zluPg3DpoaoINrKffStav8VwIOwtpy63QkduN/pvHxHB
Qepn+6gPC3SUxmYQqEPDgbpQzMSBWTqiTJdIOfDjoOTkd9uhKTqKDn51o5kH
B7sLlwuvTdIRZ1py7TMuHDRS9MWlxugo7Ec6WxkVByf/O3u5YIiOaAf1DNQo
OBjPSG/bO0BHnzg3+Q+y4yBovs24l0FHxSNVtbNsJP/7RJ4GddNR+1DFjiMk
fvhkD5toBx25pBo28ZBYYTzMJfsvHS0aPY3mJ3G+6YcK82Y6WvUc8HYm8Y7Y
CZXOejqSPePkQyXj1zKU7/j9pCP1ufKoRRIf3XJiVKCWjnYlbUM7yXyYNx/s
f1VJRxYlVqttZL6XWn7k7Sino7PE5LZysh42VQq9BdLRHvdbritkvTFXtvv5
lNERm/Yfj0iSD5kfF1u4PtJRfg3dwI3kK3P9m63P3tORYlZnfizJp6EPnmxU
SD5vNvkmKE7qE65b+Z1LR0733lh3SOLAVuSAs0c2Ha0X4NJdIPvT7RLxlS2T
jrCTL/afIfs3zzlzS/c5Hb2boaVs0cBBxJHNQzWpdBQZkhMSR+pB9I3rPpdk
Orp3VWPO1BAHWtaNtIQEOrKfPjxz2wwHZam8FzVi6ci931VccS8O9k5iTeVR
dMTRpkQVtMWBW3zeo+lbdHRBKMOjzgkn54m5EBVOR/SB6NPPST2HGWxwVA6j
o0qBK6CC1Htya5S8fSDZry38IVNhOFBVrwif8KOj1+Dn4ZVIHLwPXuqPuEhH
mS5143bxOKjf4PXmgxcdSb71NBx+hQPO05Z6UifoKMosZX1qPakXJ90jo8fo
6KW9kN3ODhw8PSpz9bM9qT/1UA0VJsmf9eT3U7Z0lFsqfi1/mZznLY+OZZnT
kZVex7cvmxlAT/N66FWM7L97Ka/zNgZYVTn7wmYHHd1slt2/g7w/HkmD8SlD
kq/lsv8KTzJANfvgNWN1OhLg0Oq99JgBHizVvxLcRD7/EBC9kMEAJ2dKa3sU
6SgZhsmXvmeAhaEYsZuydJRdBA+NNDGAer1hZp0wHV3+hnUu0ntB1NOI3yfm
RFAL7f6ngCe94OjjC9Pa0yLorIuqh//bXqAU7yDFwRJBse5P417DXvD5lpZr
xogI+rWuf8/L/l4w4d0yO9ElgrZlFPgROn3A1lhlw7UKEfSg9MP+o419QLT1
u3d6nAgK3LXFf6f+AEAazyNvxoigjae239pgNQC8w66+dL8ngp6/FEiRdhkA
lSpbOtVviaD6VCXrc7EDIMg/zepdIHl+a9R1r4kB0EsPVq9wFkHT12citfOY
oHC/ztCApghK9hLqFgFDwPk5P7VaXQQBviyra0eHgMAMUy5rkwgaD38bP3dx
CLinpB7x2SiCCviOfVx5OQSkR/mqZsVE0L+QmJeH+YdBeOTAK+5lYdSYjhxC
W4fBofJkV7VaYXRFzK/22vlRoNTc311VKYxapl7GF90dBbP9Wg7u5cLotZmM
UsurUZDEVW77okwY2doNve/uGAX43tEdsnnCKLtHasOIxRg4V28sKfJAGLX5
Z1bQJMeBKeNWQl6sMNqT5JX2RnccCE/9ptlECyMT76iXClbjoEjUjfNehDB6
J6ayJztkHCzaR01RrwijMNc4rmV8HER2ddbNnxBGGtqbQ78/mwAOEyp7HjkI
I6Ufhsu/iyfA5rUL5QZHhFHdNv1zb35OgN/ynKW+tmR+exQvfV+cABJumq/H
zIQR+x/x/ZGHJsGLkZDr+CYyv5AAc5+5SeC3VLUcqiSMbJ4Sh0M4CWAhQA+U
3SiMzJedfyoKEWBEM8PHQVoYXbM71CmkQACdi7+ONwsIo5/n+IOOWhAgeHKH
d2yfEJJMUjlqE0mAlFNGQ1iXEGqUfsfpfp8AZU06bqwWISTucvGoYyIBVj8o
Oh6qFULt7q5ZfS8IEH6N11qsQAhlsrVY2X0mwIspjuqKLCE0JJ7qdbScABVu
y+b+L4XQZjaVkq01BODaO2nc8kgIyWno5Ec1E+CuyB+Nx6FCaFagevzKMAGy
b/x6vSdQCLHF1x05MkGAupkqxYWLQujkE+MXtH8EoLWXyjicFkKpXOkVvMsE
0LYuesTnLIQEhK8L7WdjAdsvb0U/HRVCetqpyp5UFohPT+Nfby2EMu5hr9QF
WOCdWPLtut1C6Jyg/53fQizQHJFACQFCyMN2l5a1KAtInI1Y6tITQjaPjT78
kGIBo66wyzGbhRCWwbb+13oWOHrgyj9TFSFkdafA7LUcCyRv8R59JiWEJi9c
7+lUYoFPr06fsRUVQl1O5zq3bmKBznXOfWyCQuh6c1emlxoLrNw56lzAJYQ0
Dujy+WqwwIblgx2n2IRQ0IX4ShtNFgA+VkfoizSk6rzwkk2bBU7iu5q+/aMh
X0XNc7d1WOD6IdMDl8ZpiHutYrBXlwXSK4x+KA7SkD9S66ZvYYFyQ13LZpyG
1OiPpNfps0B/pnr5zXYa+l2x3mOSxJwySsCgmYaMxdPinxiwgEq07KeBnzT0
ZrzTXcaQBSzXJIwSq2jopMKZQh8Se1wUfmfxlYbgm2zzhySO7OPVniuloXu/
WcMxJH7zHyX7dRENPXZ19D9O4tqqZZWjuTSU3zdSvEjGH9k2m86TSUPf0oKu
eZOYP2dyw8fnNLSrp+plPpnP5g3DyZ5PaKhyymeuksx/f2yvhPRDGvpiN26d
p8cCPhyd8bUxNHSpOD3Ik6z3vt8fWnAkDS0JNtrPkPzkM3/d1Qgn63+aXnJI
iwUajlZzdQbTkMGSfOD1zSwwVfs1PMqfhsS4MJ/r6iwguuPTqsl5GqoeavM7
pMoC+nlFQeMeNLSZt8B9WpkF/tuYO5vqQkPZ8xfkziiyQEDCa18bRxoKc8oL
zpJngZLLyV55B2joI+vhw3RpFlBwu/iqdQ8Nha4/bUFbxwLRtntwdjMaIgrH
SnaSenJRm/3PTp+G6NvM96zxsUCd+M/YEE0aYrvZIX2HiwUMOV7+yFChoQ1G
X6Xb2Ul+Og7uXJCkIe0bh9c3zBEgoEr1qgKd1EO2fnfAFAHwd2vFVvw0VHP8
1/6+MQIURb3d/HRFEF2JEfwuxCCAkymvpHmvILq1KGdRVEmAanX8kHeHICIk
Zp5GQQLorfsQ/bBZEBVzNw+olxCAm3CjDFUKol4HMFeSSYD852giKlsQedtu
vy11mwDSMY/Uil8KovwUj1dyoQS4FeTj1pMqiNDJbstRPwI4HF7frhsriAwc
w1cbTxGAwhn4vcVPEMUdVf3at5UAPiwbNjYfQXTs390IcS0CtHYpG6udEURF
BT6fBRQJkFPclB98TBDZfrGKtRIggL2Hdoq8qSDS2zwvvq5kEiA7rr97jQRR
WuugStPTSaC+s0vkko4gkqHueyl9axKsSd27/V1BEJmdlDxhbTsJMn8wfb24
BVHn+NscU8YEoJd8fpvAJoiczdv+HauYACEvHwyVLQgg2dS6HvbXE+BQiJmT
0JgA2tw66j/vNQGWtJ7uLaoXQAK6TYyI8XFgE/+f/GqSADLgaqxw7RoDQXpC
ey0TBJCF/uw+4dIxkNFYfTE2SgCZ/s4ZP5g4BlbpJuUKYQKo7hT/5MP9Y+Bt
goK7pZsAKrWd1df4MAoEHk5mx2oJoJjitD0DASOg9tEdI8VyfmRQoOvBzB4E
s0bmJ73L+FFOglG58NVBoNC6HPn+PT+Svr2pr8dqEARJXmi3zORHC3xzSz4j
TKCWZB/iHc2PUvKK61wUmSAyWbH8/RF+9EXyiNe2W/3AMvWzzZ4xPoS7Jhb8
EGQAIrpzmcrkQ23PJG41/yX3rdClrK89fGj6o09t+nMcjDlv4zZu4kOOcYuX
4/VxEK/wHmqW8iGOhpjAl3ndoPt1jo5oJB8qKT/AGlXtAAGFT+jdinzIZovS
iPbfJpBRdaXl0nFedDdKnEdtqgAk6QWYv7HjRcmu1/iGX+eBqFTf/O79vOgC
R/LnJa9s4Hvp7N29GC+KSxnd0DGZDnbInTCVU+ZFZcf4rOXPnAfNAVhG7QQP
alA8+yNoIQ9yqHAHbAznQdvOaf0Kbq6GM7GUPvtgHkRTOTyh0lMDh5bWDkT5
8aBDxhdM3Idr4a+GebU5dx4kbyiiEbtcB5NCRrrqrHgQcVO1KCqmHur8+bk7
UJwHxf8Vlc143gydbj4Q/53JjbrbN+zPuNEJf4FZ7sB0bkRZ0omlz3ZCsHRk
UT6FG3l5hC9LeHRBeV+ZHt/73MjvpJN6775u2OucnikRwI1ao269zObEobtx
vrGTOTfy/pdUa/SJAX2mfpwa7+JCp/xYbz/O9MPut5p2iX+5UOQ7ya/8mwbg
Ac/7FqCBC/mqHc8RPToAdfBDGnEVXKg+szXN7OMAnPrZNq2fzYWuvRe/IBDI
hAFvBm9fDeRC87d1beuZgzD0JCWXX5QLHU08Yel/awTm/7aMaRbgQmhP7HRB
9gjsNY3ySeXiQhYX3JseNYxAC1lxbe1FTtRbNpxzYv0opLWr5B9icKLSBHa8
6u0ofHp4X2FSHidK359xrQ6OwfpvMfEubziRxeHM3Ev4GOTQa/LVeMGJnKJF
pr+wjUN3YcctnxM5EdtwbBmGjUOtn+eK8BBOhF/NPDdSOg6hRVzxJmtO9DtN
NOHV0wk49f5PIrGbE9W4Fy74fpyASsrSlz8CTvQtFakymiZgJOWFkdUWTnT0
1VfrZ9yT0BYVlfhIc6In/zkIPPOahOHaC4+NxDjRqMot3vPhk7Do6Y4rbDRO
REwltnYnTULJkMpt8eycyHc88kFq1STEt7WWvh+iotrHnt/2CRGQ/mb9k9Be
KiqnZnMUSBFwl+SpYMtOKtqsYjLGVCRg5uywcdtvKrrea/T2qxEBL7xbKlsu
pqJH3KYleicImK6ApX7Pp6JjhAxNwp2AzXE3Q2KyqOjcxxO8NT4E3HpB0FT+
KRXJ/KleSw0jIJumHDS/RUUHy0/EUJ8R8KrETqdboVTkKrqfh/qagHNrLiuV
l6lop6pOa20uAScaM4z3eVFR5/mLRbmfCehZVt1+z5WKCgUPMH5UELD/1ciV
n45UNC6z4VX+DwJ2BGqV2B6gIsG8CKyhlYD2LrZH4veQ9d6sMBPsIWCjle9s
004qYrEb64oMELB6Q7H+EX2y3qR/BhcJsn6e1qbHmlQkjA1d+zlDQMha8G1X
Id+/ErhxapGAxRU7Ck5IUVG2zJ32B1QW1Mt1tn1Gp6K19FxdUV4WfPvo+iTO
T0UjGaXHHQRZUPX6ixgFTipqbxML9hJhwZde3zXdVimoINrpnbk4C8rbDda9
mqMgiZcX1ZiSLPhkB6/3IEFBSpedKYfWs2C88P4srz4KkrOTux6hwIK0RZ+9
OZ0UpKAtd/mAMgve6YsdGv9DQS3Uw/69m1iQ+rPwtvZvCuqUq38N1FnwWnGz
ysVqCpJe12l8ZjMLLj2b/V74lYKsro86H9NiwYA7kqenS8n4z9PMJXRYcMp3
O9WwiIL6eWvXPdVlwXOOji8uv6WgVpNTNJYeCw7tDjX7mEFBYuCOg5A+C7pp
pzEWn1GQumq0zgKJeyS/XTNJoqAbb7q/5xqwoANHv1xoPAWdjRE7qGPIgi2j
nBDeo6AF/WHeUBIf/LPJif0WBVWubVV7TOK6L3tXzEIpKIScoP8/35N5NuXm
ZQpylnG8qUfiirho48oLFHK/umH0jowPgvPaub0oSOViHWAncalbw5W9rhR0
ZuJFx3oyH0Obf5L3HCkoJi12H9cWFiw0Ei+p+4+C/m7S/vmZrE9zo9ER2gEK
uvxR55U5WX8m37HZA3soKP3QMfHHJD9K00EP43aS9feHnPpE8pfWlaLftJ2C
woPDf70l+ZWp+tIkpk/y73A0/bwqCybm4772mhSESS4rsquwID2Zg/5YhYKk
ci49cVFkwegbSgVtchQ0fbXu4AN5FuQ5Z2ErI0VBPm5ScYmyLLgG7sY85aeg
KYGRv4LrWDBILUcTp1LQnviUwBuiLDhL/1W3cZUDcT9Iaa4VYsGxARH+VwQH
StpYtvSbmwXb7yXdzv7DgdIMlofKSP02fZfPOfmbA3EV7LooxyJg3drrevEa
DnSLfWr4+BgBv1wqlrpWxoHcnPZVuvaS83y8KdvuBQeKDU3n/FBHwCcPHep5
UznQFatuJlFJwAe/GdNfEjnQB5f4Fa6vBIwwJ3ao3eVAZS5HF6uLCOilIVi/
coEDWa6IpeYkE9D19IPpQi8ONLXVIq4+gYCOz2SkPNw40KDOoGpTFAFtRNVd
Go9woGbZppv+oQTUW7KYzjDlQJP+GT1GJwm4VHtN0laAA3lcf3puWZaA01Se
HZxcHChHy/SGrjh5P5jeP1W6xo4sO5xv7hMgIF6YmqX0jx1ZDBw6dnh6ElYk
l5ostLGjV1bZP63fTMIor+mT6a/ZkW1OUVcj7yRcz+fxZtqMHdHCroODWePQ
6UtdlIIJO7rh//eYWtw4fO6re8HWgB15SbAOdFwehyodi4Y5m9hRRgvxrX7X
ONTOia5wFWBH2xvTbst2jUEzm3c9jX/YUMwpnRlZnjHoGb8qXuDBhi4e8e3/
ajMCcyxcF7pPsSEhm7h93/VG4MRiVafAcTa01Mee+k1iBPq6xr3w2M+GdB+M
c+Z1D8Or+kq68npsSODbcp2XzzDc8Dbh8Ya5Nfjs5lSXVcwQPGugztmxfg0m
/9195noLE/pyfnwdILQG7XJ/7lEuY8KgP5b76BxrcCRSfA1/zoR3/U/f3zu4
Cle2VR55cY4Js96nSZUUrELn+0MhZ7mYcNhgndZDi1WovH3jdPmOAUhwZtTr
bFuFmm2yGXuVB+D8H/1LdRqrkDe6znFaYADyBBwqoYiswgWzS3OfOvuhanG0
mW/HCtxtMeGtFtoPzxhSjxy4sAKXuUpalGr6oA9XwsKIywocubty6b93fTCg
ZWNKxH8rsH7r0EBxah+MCACMz9tXYJc2P1XoUh/MKA46u5lzBR68cIBQke+D
A4asMN7kZYhvOTpz62YvHOO6pvAqahl+k5g9QPfthdMttO9Y2DLclTib3ubc
C6mXN/MFui1D4hw1SMakFyp9OPOAqbUMPZR++AfPMaCrUXdmefkSjH+1cFwh
iAHdM43sLT4swcjcxr+J3gzoJRVHqclaguhVzKfdzgx4Ycnc6VfcEuT690nd
bjcDXoVvRNucl6Dy7l+OO8QYMEyH8vX44SU4ITD4N4aHAcOfO/p0WyzBx7FW
F2RXcBh5Q6imT3MJPjwnrf+PicMHlv6hE0uLkB4vZXnnMw4flfzSuDi5CK+0
RM39eIfDZDXVtn+9i3Dq1jkhmywcpvF3bFmoWYR61NkrIo9x+OKqPiP48yK0
GojYd/g+DjPGo2NW8xdhS4Jd6J8IHL79jQ1THi/CrNu7558E4DAfS06MuLcI
Vb7b5eI+OCwq+GfOG7YIS6wDXrufwWFpQsZTmvsifK3lpG10DIefqWzWcccW
odjmMbnwQzhE/scWRPcvQruHUuuErHFYeUTATkp/ETZ/sayZBDisqT7NnrJp
ET64XfPXfDsO67bB3A0yi7B+fiShXR+HjTK+vEoci3DkuFVmvToO/0T9KM6Y
WYAPLr/eraOCw9YVJTe14QVYwd8p3bQRhz09f79o1S9AYkWhr1cKh722ut4F
5QvwqE+LgK0EDplf70rpf1iA3/a+6GATxeGwXn9lcdYCNHO0cZ8RwuHYix1+
254uQC5K7VdNQRxOij3aWBa3AEeLDdiz+HCSV+KX6a0FqP+8y8CLB4czs3uv
fg1cgEnbt5/34cLh/JkXaru8F2Do9GRpMRWHS63LLZXOC/Di2C8lcwoOV/fa
39x7eAHOv2ksFuXAIfunPN06iwUYy9x4RZUdh9TNvD022xfgtDPN9zobDrlT
XaIaNBdgYZFYxgYS89HKttltXIB8Vp3r2EhMCxMfbBFbgIs7jaqVSSxC+Dw4
xrMAS7wViu+TWOxU9c7OpXloc/R79w4yvmTjxkmnyXn45LjvDh3y/TLmwSmM
3nl4tyDjhzuZ34ai5r1uLfMwPpXvOoPMf6Oy1hyzZh7eTL54OI2sTynx9kvP
z/MwNqHd8AVZ/yZuxsGx/HmYvOmC7AjJj3rg9jWfl/OwdjZyzo/kD3XZqPcl
zsM6zP7ZDWEc2pu7/nfkzjxkPj7A20vyP5Z5+dqP4Hn4xUtXOnYdDsNpUdnA
Zx6atekVRcuQ+fqltbw7OQ8VbnB9aJfDYW5bEbvqYfL8kY61ACUctr3sOiK8
dR5SLD/8SNHCoQ/fVPhN9XkYvj1+WZnUD/UCV+78ejKemuTvlW041DHWpjLY
52FaoV3SYwtSj2nm2v9Nz0HlDaPqx/fj0JHrqEMNcw4GVk/EnbUj56/hWn7B
jzmIp3ye93Ml+TF62KH8ZQ5qZT0NPXeWnIeUN1zJ+XNQmCHDLLyEQ/xMo2P4
wzloyCdtpXgLh0ariryHnefg00xaSHw2qW/XrfpVB+egg+qEzsh7HLrUWDsb
75qDCXieZxTCYcwD//eKanPwqGGVYF4LqVf1qlPTU7Nw1pZ9nSsXeX/EdkR5
DMxCekTgAlWUAemzkx86/87C+ZGDZyfkGND0qyTte9ks/OEtZp+4nQEfHvEq
fRgxC7fa/DPQusSAu24KihpJz0KznHR1CRYDtg9vNM0WmIXvHgfDRfZeeOGA
oafc2gy8q9FlJifaC59IO0Pu/hn4ix/hyoa9cCo//2zr2xmofKrxgVRYL3ze
dbjiys4ZuF5ilF98fR/U69dbbNafgQ42PV222n2wYkRER0d1BvZ7ShCfzPog
c+73EyZtBr5Lan0h69UH1enWlw53TkMng6S0tdI+WGixS0Hz8jRkS/TAytz6
YUWe/jU85x/USPsiW900AAevi5tYSk7BUFOROsnFIcgXkjeZwDcF09/u6AYS
w1ArcO8LfJnco9kuzXjpDcMAnxC+IAYL/p7cbljjNQy5jg+05mSxIMcTvsU7
HcNQSf+9P30HC+7KN2jZXjYCXZh2eV2nCLjzc9LBHZfGYARjwkXdjoAXX4WU
TkaPwazOSInLFgSUiZotupU5Bqcay0KENQjYIKZoe5T8PecI2/s4YmgSXn2s
Vxe8exwC3eGGg4KT8CXntqfttAlY+lB195D9OIx9uLxTIGwS8hwfdGU3GYdt
B0/+wxMmob18Rrj0xnHIdS+N62rmJJzKUkTWo2OwoZ2rib1hEqqhDcYFYWRe
e9Yxkkg/FnCr61it2xgUOCmcKkL6sYp9KYF9e8cgb+lbSU8FAp78I1UsLjYG
HW5YPn+vT8DHI2K6QZmjkLrzqOPHIwRk5jUdSIgehS8tM/wVyf1J3z/eJ8d3
FDbyaVG9PAj4e00op9tkFJqOXxq6G0hALnH+TeakDy6npdQKPyKgXXvNbsfi
EWjfV3Dr8FNyH3wW6eb/ZASubp99dP4VAU3VudJfnx6B65D9Tr13BPQH7LIC
i8Ow947Ygb/kvviNioyVe4Zhg17P6fZGAgrXhjqYVgxDdeaZwXekH8uxW350
IWYYXgrYVzHUR8BFqU/Fdy4NQ86aJB/zYQLu6bnyJ/3oMJT8lrjx0gTp7zzn
6H8UhuFmO5O9tvPkfqhdrDvBPQwdjs+JriwT8Nq0ny33+BBc87yTEMJO7uNh
U9HbPpDY+NKZedKPeewqyDmUMgSfvjWTmiL9WDHvhR9nrw/BxrbO7V9IP3bo
wTjPU6sh+CC+M76O9F9px3I2fdAZgj5+blo00n9NbDhrUS8+BLf2rlE2yrGg
Sb/a6eHFQaggXFxNJf3Y3TdDNzjwQWjcFa33UYkFW31ep8t8H4Sg4f78DtKP
qei7f9XPGoTrxaob49VY0G9BCd9/fxCqOe8J+qDBgl+/9K26+w3Cf4Nqb7I1
SX93M1322rFBmLHrvvR5bRZ03HvKJMl0EBJ7M+6yk34liyZ/vFBxEPr0vil2
If3YfFP3lR88gzCop88xnvQ3Fkmpj/vHmdC5PNcklvQ/D5wcP6w0MuHYzcsS
jqQ/6lWUaZEoYcL91jB7hsQ6w23T2qlMKKcmCx1Jf+VHaKqtu8mEMTUyavdJ
XDJ3/cSqFxNuux6w7SGJl1f/xA0cZEInsUHkQ+KdXOqVdVuZcPfj1VgZEkcI
hi6+k2PC03EqV5+Q8WvFGrWekHslLpD+3wSZD229imv4+AD0eB/DEiXxIcWg
R57NAzCwb0BJgMw/Uf3XD9tPA5CZGfK9hay3Q1eBbWv6ACz4y5t1ifRn8tsC
9OXuDMAtVNmsXtKfuWG1HlwXyPPhak8VSf4yLTekjtsPwB6ncGdDkt8xG9+G
ZnKPnT7oWC1N8u9/Qnr7C/4BGGzbvHJE6f9+0cfn7lQ/HA60vpG/kQVXz35L
v9jWD5s/LG1s30DWE+TFj73uh6Y2cSpppD5qr38Bm2L6YWNHuLUJ6d+F7tD9
aP79MONuOf8bUk+PH5V2dpr1w/qQffg/Un+dT2kiFWr9kLLILGvgJPPPcNmd
LdwPF0KufQ0j9fqmiC/3SncfXIq/0mFF6ru0wSFMIqgPzuxXK3pOzsdqa+67
lZN90FCWobHaRUAznGOo37IPlr3yFFcn5+nHRJbtO/E+GH0xY3ryBwE7+Zc2
2hb0ws+netbpFRBQXvSAvdHjXsh89ciKJ4uAp6Vf3N1A3vML88aX36aT/knV
6t+YdS98nXDxnhvpz9Z2P6m4M0TuvWJuBTd9Cbhr/+T8hd8MmM2b9rrBk4CR
duaaR4sZ8OUj+rFx8n4Rdh19qHKTAf9GxjBibQiocM34TDn5u7WolOMVuYk8
X9rBu2KPQ1eOm3qX0yZhbtarbVXGOFxn1hM2HDEJJZ+c94yTx+GIxY24Ie9J
2DLHFW/V3APrxdzCo40moXKwvXDqYjd0tzn2PqBqAn67PiOAWXbBscXKf5MN
4zDR5Y53s3AXbAnwkTcvGIee5rJ1Hu2d0LD33x6V2HEozLn7Xty5ToiSmR9S
rcehc+QD3r6EDrivNbTqGBqDyzFbuCLwNqi3T2HBLmEU1p+vOi2d1QZNvukZ
1J8dhS9sj3/PvdQG8XcROxnmo3Af/cbNv1xtUNW4+3Hl1AhMetjIoabZCrEp
DZ9sqxFomHJx7ceVFlj39rnYgZEheOFN3ryIaBP8Nu+TytkzAHVoPjfM8Ebo
1yNv/zF3ALJ8N9MuvW2EdryFs/KhA9DX5I1is2Uj3Leo9B9t/QD0/51uk3i1
Afq517zyteuH/0Y09hrU/YbnzGWDJz/0Qq4b82kWvjVwXMOoajClG9q7Kz5v
vPoR6oTN7dOP+Q2r6trubjlcAoiDvTWHlH4Bj8D2quMaH8FzL8cCU43fgEep
g3qTUgr29b3f+EeyHuwL7gxtfvcJnPDY3Xp5QwOoU+vx9ReDICOjrMBZpQl4
mPu+7Rj5BgYtQ/PHVf4C77TLD2VzakDmdvl00a5uYDI7905Xsha0nH6tlGLX
AwSsAxt336wFHAmvb7360QPezgUK+Tj+APkCwy1SjjiYsAm680XgJ+h7Ws+8
tZsBSkK/fMkzrAfzYgVfRPn7wHbNr4W2j5pAmEn34YPHmcCguSXxS00TCNIc
3LH5LhPoBI8FbV5uAl/OW8d/LGEClZp15jynmkHU7217hsUGgehpnyao/gc0
Pgzqj64ZBGMpMtNaX1rA+Ni5dVcUh8GguW5rCtECbKfnVU32D4PeEYsyPsW/
YNl+NvlNwDBo2+p7k3mbxHPDrderh0Flc7XY04OtYLPA5mwZjxHwTCDAQHCg
DeDJRqykxFGQ/O6eVPC6dpAVKH2koXQUJDo8Xxna2w6svWJ+5XSPgqjMuu8V
ue1A853qUxvlMRC4S9H+amAHWHR91qmfOwYOXa0PGOXvAr+IjqF9ueNgvyLT
4ZhpF1Bprb/0rG4c7KldMq260AUEhLWeJIyMA1PJTdwv/nSBk7Cm/5jyBNAo
Cnnk8KwblObU/z2aOAE4AsQ73aRwIFk5tnvx9CRwOJnVWKKPA5P4EDPDa5Og
cB+oEbDFQWmnB/9q0iRwkfMsLorAQb+jU7RO3ST4Vl0WS53GQRTWdfy+OAGk
3x28fVSIAab+Ugw65Angm8oMyVFngNyixvQxDQIo+AqftTvFAK+57mme3EmA
GzJuu1/+YoBp9od9dzwJ0Mm5YDw/zAAjuWkmHJcIoE9E61lz9oLj/ova2FUC
9Fd8kJs27gXFcds5BGMIYJJnLbHnSC9wT2qeepJIgAdJDIEU317QYKn4nHhK
gF0+/Ivmb3pBxYWNnqO5BEg5mkY8qugFe3bYPosrJsC0mcHgaE8v2LxVt27l
MwFernNuTpDoA8pH6g6q1hGA+rUwt+9GH5j1vLW/eoAAjtmWr4ye9YFipaUL
aaMEKHrY+eReaR/4ZmS9A7AI4ObFdWcLqw94n/hs1rBEgDK7J2G3BfpB5lvz
kgo2FhADOgEdm/qBDfP8gTBOFvgu6uB6w6kffDuNe+6jscCG1Yljf6/0A/d7
M1uO01kgYOiGrcbDfhCnavt2iwQL/GqUtAzL7wdvPeOWm6RYQOXz2x1NP/qB
l3X6XhNZFgh9baa/abAf2J4t/OwtzwItcX/VgzkGgMhXwxunFVlA66r3xt+y
AyDNdei7igoLRLizSypuGwCiRuWF+aos0G2bSLtsNwA8H1MDKRosYGiswfnj
/ACQZ1PfLafJAjHKaGnDvQEAUyb3UbVZgCn035RvxgCwHbD5VKjDAqaLw0OV
XwfAH8WQGnU9FkjsD+2R7hoAVXPDb7y3sMDEL9EWn3ny/fU74gP1WcDiY2bd
N1EmuH7y6EcbAxZ4+mJHuYQ2EyxyHTgySeLZ6MaPXvuYgF//7CsHQxawCTyT
/+U0E9iUq3bHkjjDZTmDfp0JLh7Q3xFP4lXruFT3FCZgC/VccyKxvZHKg9IP
THDDvMFljoyXu/HTXVoTE3DKp2UcJzG3gO11lwkmELXT548i8zm6yQEZ8g6C
v2/iKTFkvllmbmt8SoNg3tEx2ImsZ/mEj2mP6SA49ruocIWs1+ZKYMi7Y4Pg
oezPkbMkH2kPwstu+w2Cdofe029IvqbyopaO3x8ENpXGZ4pJPnf9SNyukzUI
phdUtySokfww065Qvw8CdVE2IWwTCwyxZ5e09gyCumaZnZ+VWGC77Pu5nMVB
sPKtTZhfgezP4Rr//3SGwFRAUbbUehbQOd9UpGY1BNbeRvJ1SLJA+N2ufyun
h4A1m5eWjzipj6+sixlPhkCpwo05PlJfgZ1L+UHFQyCzZNtWcT4WqJ3jJGwa
hoBVw6zfFKlHHy1pnzmuYVA6Nqi4aYUAaK/S2x8bh4Ftjdy2sHkC0E9rjT0z
GQbn75yKzf5HgOInZl57fIfB5gqR/8KHCcDzwfrN+uhhEMRR4a3ZTwCHRvsh
4vUwoG2myOR2E2CV56x7UtcwUKuxS9JtIsDugASXkT0jQL16J76vlACJcanP
v7iOgIkpTc+cdwQYynmNx4eOgG6C6cDMIUBU3ycn46IRcPKVO6ufnO9m236H
KLlRYO/+yWXddXL+NAwOa82OAoEr1ndfm5L5WYB4DpEx4J03feizAZmfy96G
Fo0x4FddV1awmQA5j08cCDs1BqLvbJDeKk3eB5wRVvV1Y0BFcLtt9OAkuIG3
mPu+GAedr7jKHphNgu6PVucCy8bB1tyExPNak2B7AkoM/TMO2gqeY+ulJwGx
O2v4LvcESAluGRwnJoBTdsj9F2cnwLZzXwYjUibA9gCljuYtk+BU+YU/+mPj
YIFz20cZFwKcb/mtWeE7BvKfRNiGTrHArQPxyZWWw+CHaMSgENsUWHRsu9it
MQyY926FPhecAtUmN4IWhIbB+qs3cypUp8AqfWbFpHUIRDqG8/A7TwHJtfuf
xTyHwEnZUPToxxSI2xDk0Rk1CISf+esUvPwHnvxiKFv1DQCNdf5VZoX/AA/R
4ZJcMwAs7vs5NcN/IObYM22+/AFwNexS1Fz7PxD1SbPTJmQADDlfHNohMg2+
jZhM3pAaAEj+XFptyDRo2T4HDx/rB+fT3YT77WdAm+GnzImlXhBzJSklxnUG
NApF2m4e7gW5tr9Ut12YAZ+lbjg9aekFE6tGO2PuzIBA4F0uVNgLvI/z+24t
mwEuC6aLzmd7QZQettpbTZ4vGlIxcugFObz+d6P/zIAyfldovrcXjH7oTu+d
mAENBael1jb1Ai+xwqaojbNAOWffSf4hBrg7ynQ20poFT5jL/cmtDJD1TWaM
sX0WyFnvuuxawwDDF25RjexmAZ72KuB5NgN4/DxqwIiYBXp1Si6dvgzgHrGW
aDA2C8IfGJx9KcAAESf0FfH5WYBJsGlMszFAhr5n3l3OOXBclbUUPoODgd7G
qp4Nc+R9CsSde3DgBjLm7xycAyWZkylSxTi4KdFxU99pDpTf/uTplYODl+NC
Ij1ec2B4/6+05XQc9D25oqZ/cw60qP46wozFgcu8tUN38Rx4eXRT9Z/zOAj/
fZ0ZWT4H6vn7G7d64CA9o9h3S/0cCDjdpdFzEgcMO/l7kcNzYOyG1KPZQzhg
2/zfui2zc4AImuL3sMaBPOXuiy6OeaC5S++BrAUOThb8+6S3fh7opFrd/287
Dq5Fqu7pUp0HntVJ/7WSe0Ca84nm2wbzwEPGsOWZNg6QYfxJPbN5cD9P0jBH
HQc9glVjnTbzwO6H7eMVZRys9i8F3j4+D9bWUTc82IiDDWU6nHoe8yCq9xzz
vCwOnLySZW9fnweNaqWFc+I4WGrj/cWKngf0vWWcRXQcPN57JdQxeR5YGCjs
fyeEA/2PQ1pVGfPAcMI+dUYABw2qR3t0382D5AMrPMF8OPB5XHU/Bc6DpjeT
aeY8OODjMcK46+bBTTfgd4ALB68vZxAXW+eBcLZ+7FMqDnYNij/v7J8HCwo2
bLoUHOD2tw5assj6c7BfXBw4CKmcZi9cmQd7NObY5dlxIG3oVriebwHEn4h/
fpUNB8WvmlxuSywA1Q8eBetJfFjcXHRKYQEM7+PSZyMxcbOw3FF7Aewv26y+
icRR0xv9qowXgJlxU3wcidXc4pT09iwA/I7KWUDGr2xi+5NitwDEBO7k6pDv
dzG/cIv71ALQY8TbnybzWyvsMfA9twCCuOnHu8j8UxQOMDuvLIDQO3yFj8n6
tsZ/SbSMIPH74gOPyPr/sGtZFsYvgDSn2yptJD++F1Pn1j9bAOtVlTY5CeKA
xhDIvJ29AHa1n8VUhHGQbXv16NSHBRD41c9ZVxQHe9Aoz4mKBTAtEX0+TILc
87SPf6yqXwCRl4wdhKVxcP1Zrade1wLYYA24+8l+bhDaLp06vAD0A+McF8l+
l4a+qeWeXQBC39xMD6vgYPpEpEYXbRHEm4Rp15H6if0512EpswiKjx9eHSX1
pbnjTFThpkXwq728dT+pP/f1FuO3sUXwwEt3/d/dOKBEvU+dsl4EtU4ZhqtW
pB6XlGxOHFsEhzTfQHdS323tlDw930VwU4Dv3JIzDgL2XXJODV0EFWpM/U1n
cEAv7RXiubcI7I1tChN8cGCd9PVC14tFsGiWza4VioMvR8L0Iv8sAt1fYSun
0nBwvGqid4qxCFQDayOj3+Bg3tAp4cQEme+Gn9T5QhzoSuyY1uNeAsxi7brI
SnJ+mxffd21dAg5n3qrEEzi4czBg25aUJVB39hM3xZYB4uvUvXPeLIFWD1EF
KScGSLHsear8YQnQIprfXPJmgPwde6iSjUsgPCxXe/oOA7SqSf9e5l4Gre3X
u8SrGUCV44tb5aVlwFN9leOsbS/QC/F9BK4vg8UdY4NRLr3AZF6ltiRmGQi7
CS6P+PUC24n72tlvlsHF/54fPZbcCy63n1q837MMmu630SYGe0FlIWfsMasV
cPfaz9te0X2gXrP0W+PRFXAL9YlyvugD7Zk+M1buKyAlVjShoaQPTDz962B6
fQXkL7qmrPT3AYl7b5QVP6yAftcTf6NBPzjtuv/TmMIqEAq+6z+83A+oYg+Z
YYurQMEicV4kgQnoE6E0OvcaML4VA3KymWBjtYfhS9E14Bd4d+14BROYXjWJ
qN68BvZiCSILM0xwpb9PWcR5DbSrt7qIOwyCiSK90+nlawD3zvLfojwExtSH
LrpYsGFYUn9DzddhML2u61a2NRsW8aZc91XHMFiiNiZNH2LDaosm+EJnhgFf
z6evEc5s2LNYNz5ltRGwKeG+SHYgG9a0y+uoXuwIcFkyLPiXxYa1tJ50SXYc
BX9/3CJuCrFjfC4MTHZ4DDwwTd39nwQ7duwH14gyZRwcKihKVpZlxzjgl1VB
2XHwK7FvV6U6O9ZeLXAp0HYcVJ7amcRtwY49UyxvTX4/DornlnfevcqOrW4J
6dwWOAH8vMQeOdxgx1KtY3eU358Ael0aY+p32bGTxB7P9a8nQO43h8Qfj9ix
5I1yttv/TICM6JIRgXfsWOvg1r+82pMgUdEv4f4wO3ba9niJSusksEu8N+RM
sGPXD/41NBmbBHTeFzt05tixK3M//+NlI0DMRMNgPZUDC2k+5BcmSoCIj9om
dHkObGjsEmf3VtIfbbaM61XhwGTX1VvgpB/jeObELNTkwLyfB92E+wgQejM6
9rAxB3Y1eGGnqCMBAg6M9j+w58DWqg/xUUNIf/aNY/vpExzYbXlRn96bBJjS
l75v4MaBXYuPCE6OIoCP9N5tLRc5sD2s5PmHTwjgPpARvS6aA9OOnD6b94EA
Ske/9A4mcGBnNrjx2H4hQG/tH6OSZA7sRkmnZlUFAZzyqb1HMzmwVeVHCUYN
BPgv2MUwuZwD+3fw7hWJIXJfTBXjmqvhwGSY1fk84wRogZV/DtdzYM2L1cbN
pB+zp2r4C3ZxYP20WI3ZRfL7Kl27vPo4MGc/T3brNQL83XNfrGqYA+uK3iwY
RCH3/+h/767NcmAxEiX5J/hZ4HHeqxtdyxxYxNMISBdigdaGI4e3UyiY0CGb
qaekPzsmUTb1T4iCmR7eWWpM+rHkrT7fbCUoWG9tcp0VuZ+3O8jHv11PwcoG
rFd05VjA4dlN3TNqFIyoqi4LI/f75K+G7BXaFOwFReY3k/RjHX1D9fKGFOzi
jzYuRdIfrOd6khZiQsEWXzZs0if9g6Pq/gvtZhQs4u/zWSnSX6TsWwNGeymY
Vufnrc1aLNDpXSD04AAFc6zxKXIh/cn6+649xH8ULPVjs853XRY4USCet9+R
gv3SHPJfIv3M06aq0CwXChbsFWzNSfqf7pkrNtyeFCy+3ji0l8QbJDdvcDtP
wbbpvvsTT/olp+3d48ifgnWv37tBgvRXTx1jP8tepWCemruUvEncE2oWHRRO
waKsfhQ9ILH882nHv5EUzHCSmXqfxCfLMzbr36dgHMfDcx1JnDZwdDn2IQWr
a/QuXiLjM7j568afUDD1nw4R//8/tIL65yf70inYstzgZC6Zj4v1+bOvM0l+
Nz34/o30Z+k+G42peRTs5Uhd+2uynt7YJr5T7ylYmD6T4kTWq/DuVvvnTxTs
VL6cxADpz1z/GGVJf6NgY4svB01Ivl7ODV+5XE3BTubHHDi9mQX6pVL2Nv+i
YBb+fcpO6iygZGIjpfuHgk0vPDbfRPpjNye24egOCgbnH4QjZfL8tcKSEQYF
o2rnflYj/fVAuluk5RAFq7d9W+9C+m/3wepN7DMU7M8dMGUuTfpV3uC5E0sU
LGOjyudR0s8PamhWlbJTsV0eT1pdRFnA40Kcux+NinXd8bz5hdRfZry5YYMY
FeMVqmlN5yb9YdEMp5YMFbPUquS0J/XquXDs1eAmKpb10uGqKqnvLBkB/11a
VKza5Huc5QwBRnZ82fVcn4qtHPdfZ0AQwCtcod9hJxXrTpCXCB4ggDf/qMIv
ByrGIRR8J/8nAUavlFL5T5HPk0Lvnaoivz90h2l5hordfpt3oBcR4Mx31ayv
l6iYjbxX/yHSn7mEueu+j6JiF9qFOiceEoAxbiA6FU/FDAyabq2PIcBJR84Z
rSQq1i714qFUBDnP216WZL6iYiq2Cj+u+xPg2D/yN/ELFes/e2aZ9xABWk8V
bGyroGL1BypNC/eQ81t/jSLxg4o9MlWqUgMEsHsrV3X/LxWbHKnMjtAggO2Z
EzY3CCrW0crHPc9OAIuOVkcvBU7Mml/f46rVJPi+N9P0tSontodfnr9UbxLs
Krks36/FiXF9n1d6JDUJdj6U6D9hzInhK07bdZgTwOSA3dmDdpzYLiYHYgSR
93P57ytbIzgxi59ea+7x46BA99lx/yhOTHLTi8e5l8aBTprPjsJ4TgysLPs/
thsHmiGC7JufcWKPmy+zDouPA1Ujq0i5Ek7sgRIb+8X4MSCXXZnINcKJtcZL
bgoPHgV2z0o+1hKcmFYFN/Hv8Ci4m5DVGTPHidVXCk4ua4yC6eAYhXWcXBgx
WHS8pX0E1Frb526S58LWcSgJFm0ZAQETA9/32HNhtH8t9+81DoGfupwzd79x
YZon/P7Lqh4AHCpz6w7UcGGqL/PkaA8HwFbp4e2i9WS8pmvDMqcGQDrHz2tP
urgw2fXG7lvn+0Fg0wOBnHkubK/jiY47Cv1AyV9J6acWN6YB7ZGxRy8ILjE/
LPSEG9vnVzq6O7gL6DnWE87PuTGvazdFqni7wMiaY0z+a24sdt/JSfxRJ3Cw
DKg5WMSN8Wl4TPUXdoDtLZngwU9uTE7/rsux/jYw/09wsxQbD/az36PUzrAF
BGi3UhVP82CdZsruk+Y/wYUM72JDbV6M8/vBGdrdWNj9W+YhzZAX+xefahO4
LgnuX6i9xDThxfJfqSQaN6ZBdWs13cR9vJhT0Q2NQ05vYD9rIHvmNC9WQNS7
XNz6Hh7Z4fy8KIUXK5TuDiJkyqFp88EoPT4+7Dk6D4ZGGmDOCttZPhE+bPBv
/ESsTyOU2ZS/t3cdH6bf+6JrlNUI56/QuOOV+TAhtV1TeXNNsFDux3UWxodt
9dZ6YbD2Byqf3XU5/zIftjH6S6LrchsU4DBy0RrgwzRpwoOJ9Tj8eJlymDnK
hymWOktf52NA9/Hf5k+n+LD6tGMam3YxIGr1UKax8WOubK5hL4oZ8FJe8tC4
ND/mPcMVtPtxL2x3XPV5a8uPuURfig7c3w9vN9Y6nz7Cj93hYK18Du+H+nse
2co68WMOF/39Cj/0w5gtOnrRZ/mxL28Nrr6SH4A7+VxmvCP4sbNJZanPJgZg
5ofvwZvL+LH6dr9flkGD8D/NeO/+b/wY1x/tN6pZg5DjhdOJlBp+7N+9p7Fv
2wahY8ycqcBffiyGf4b23GgICp1W4xhj8WPxcD9lw+QQDKBHR2ZvEsCyl9ZV
EVYjUDHy2BVXLQFMtfI8z0//EVi/ouwlYyCA5ao/Ddr1bASqD3+xumcmgImo
POOlsEZgNyRoZ08IYBaPWlYK7o/C3efsHqonCGDV7SbOgR/HoF/8J7bzSQJY
huzF5oD2Mfjyg4L3u2cCWDLW1btuaQxycLDMTHIEMMMDzaWY8ThEidHE/u8k
9qVYq3wYh9tRpdXFOQGM1htaQUudgJ4Dmh/erwhgNpkPoHTJBHzM91BhkSKI
+bxaG/3eOAHn7FwXwoUFMaWo4zsXuCZh0fBaxgM1QUzrhZlyvdck1BLdxlFy
XBA7dFvmragwAU9sTTu3fEoQq1S8fihKmoBRJ7jbMA9BLE9ep6FJiYCjr//k
1fgJYuPSB61/byVgponviY5oQayq7p9AoBMBW0+1Vcs9EMTM7hjuPXOGgNy3
MX23ZEGs+83z48oXCOjeQOMfzxDE+I9ki9KuE1DRPbtkFQpi36JPBcenEfDQ
PbqSeaUgFuC9JrDwmoDh+Vfu364TxIKvKOdp5REQX7R0F24TxB4+P2nH/ZmA
wvJ5DXY9gpi+3fWLWeUEBLsldiQNCGJuD7Gm9bUEfHq/X1RhShAry5F9cb6F
gD+LrMLc5wUxxaVWPdtOAi63FY5krQpisfXe+9h6CXhc6frXLfw0rHshz+n3
GAElP8qe361Ew07FzfhosLHgqutrGRENGrZVJKCQSWXBfppudacuDbtpJfrb
k5cF8912bfQDNIxrM122WoQFE4V+/QQWNCz3t13iC3EWvFp6JIh/Pw1rXLwU
aCnFgpbCZ5vSHWhYtU+X2LAcC27+NB3mc4qG7aGKbBxUYEG6e+jm7R5kfGvW
tlxlFpwX5mnjPE/DTFn37pmqsmD3p7hbDf40jH5LzfyxOgtWuMvopV6lYUjH
+v7//8+bJfKq2+MGDbt9NPdZphYLxpZp3dO/S8Nqt+185azDggFnSozY4mhY
8zWNRlyXBR3pZv0/HtGwpZaqY5u3sKDZ5x+xj57SME7PFxfM9FlQ1eO/Ha6v
aFj/6avWigYsSBPtGdbKIc/7Y0q/STz92SNxsZCGDajx61gYsmC7x5RZ5Uca
xuGm9CaSxEj06mQcomEXPqzWJJI44wtnyokq8vxXg18XSBzleX+P2i8a1nU1
aorcz6CvmNTMdDMNi4gc9btDxj8K05+jDhrG6+P8oJrMx9Rrs01ULw0L7pCI
aybzVRIvXjwyTPLTejLnrR4L8iHwWpGgYdhUlqodWR/hVXN4cpY87xa2t1qb
Bf+IH2b7tELDCrfcOMxH8lOKOnMiqEJYzz6/KOn//x/6rPuxQ/xCWObtTcYL
aiwYIUFwbqALYfGVEa8zNrGg99crhcOSQtjrgRhpRbI/h7wpzu/lhLBitL/b
h+zf1nXR/NdVhDCkgu+4S/aXei7NTVJfCOPdqMuhS/Z/ZJ26SP92IWzlv1Mc
n0l91H979zlvpxDmK7rrjxSdBVMkqyQsDwhhGR7mBpZ8LBhebltOtxfCNltP
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
D6hyW/U=
       "]]},
     Annotation[#, "Charting`Private`Tag$73190#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-1.0758287058124423`, 1.075825943315621}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7614931808535604`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"6192a118-c8c4-420d-b19f-7223b0ca6c17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"n", "*", 
      RowBox[{"(", "0.1", ")"}]}], "]"}], " ", "*", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"t", "-", 
      RowBox[{"n", "*", 
       RowBox[{"(", "0.1", ")"}]}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"g", "[", "t", "]"}], " ", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761493198984067*^9, 3.761493211641214*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"d1ebd5d3-3243-4a63-a19d-cfb0360d8559"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", 
    RowBox[{"-", "\[Infinity]"}]}], "\[Infinity]"], 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "0.1`"}], " ", "n"}], "+", "t"}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"0.1`", " ", "n"}], "]"}], "+", 
     RowBox[{"0.5`", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"0.30000000000000004`", " ", "n"}], "]"}]}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{3.7614932189446783`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"44ebff92-3b3b-413b-a6e4-6b52efd60e35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", "t", "]"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"n", "*", 
      RowBox[{"(", "0.1", ")"}]}], "]"}], " ", "*", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"t", "-", 
      RowBox[{"n", "*", 
       RowBox[{"(", "0.1", ")"}]}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"w", "[", "t", "]"}], "=", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"g", "[", "t", "]"}], " ", ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"w", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.761493230887734*^9, 3.76149325107285*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"94470ce2-783d-4fb1-a4ed-90bb75c18935"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxN1GlMEnAYBnAgPEASlCwpzaPmig11unQeLc0YbiYaBrVcZijNGYWpMx1q
OVHT2lIRnSgfRCMdK1tbXqtpYbppkcuJGR2UiVdWokzyotr0/fduz579vj2f
Xi++iCPAYTCY2L/51wXTsSarldqH2TqjeLdZv47Mpnxe6fyN7BmSsSFaQn5R
UW1vMCLb+47v73uNXJOdHHOzAVmNzWrBBCPbCFgBtPPOYOq7l0JllROYo5Gn
HB6igMU/jworJ8ngruvy9PY4R7S3muu5WU8CsxTP2NHfiWDVYJ4uK5EATpLU
uLxptQMXJu946EC1BWMYHr1RJXjw+9v1ZeoxHNiNmNa2fBwLvnyEbqN3s/Zu
OyX4U6tGswam54Zar7ZYwE0fE/rzIs3g6SKXcJarCdwjO8Sc4S2A/Wcnlv0U
RvCJHj1hg2cAZ7S1W5yoo2DepQNNb/O7wYOvJioCE7qObTuU8fxxfN0oGJfj
8iGVZgDbkeKL+D+M4GKDLiqzeQH8qKE0vtC0CBYpUynfeGZwUrrcvazIAi4/
lRMS2LgGxu+SGW+sboLHh0t+ScjYiG1zxfwguQYHFjrMe2vP4cEe6oFa2zkb
sLgrKoHcYAfOUAk7gvwIYBIumO87RQQzr5yW0aUksGu3u4h50BFcnXmryn+c
DOaUxjEUHRQwPVHCbSlwAuuMBKWU6wzW8qcinT2o4C/4+xaZN/KyKq2d5oNM
m59382Igp2aZVvzCkFeLrQ9izyD73KPtLb+LHMLSj5CkyCdnG8sqa5GvMTzN
dQrkp098RlRqZM5AYGn/ILIgzRwePYycS+xcGtYiK9ihF0fHkGd0EeFfJ//b
m4tbEkwj79zX3zY7hxxwgbVncRGZiSVos83IZ5uHJBYLcjrzTlj+OvLW/wL/
AVhnIQI=
       "]]},
     Annotation[#, "Charting`Private`Tag$78186#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-1., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.761493287940241*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"645e1922-b393-4979-aaf6-475008805af3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plot1", "=", 
  RowBox[{"DiscretePlot", "[", 
   RowBox[{
    RowBox[{"f", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"\[Minus]", "5"}], ",", "5", ",", "0.1"}], "}"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{
  3.7614933231420865`*^9, {3.761493353464982*^9, 3.761493366704995*^9}, {
   3.7614933981089983`*^9, 
   3.7614934060338025`*^9}},ExpressionUUID->"1729f74b-12fe-416b-a1d7-\
4d4cf92022fa"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`], 
    AbsoluteThickness[1.6], {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], Opacity[0.2], 
      LineBox[{{{-9., -0.890306449444008}, {-9., 
          0}}, {{-8., -0.5365690656200699}, {-8., 
          0}}, {{-7., -1.075314417986817}, {-7., 
          0}}, {{-3., -0.3471792506807455}, {-3., 
          0}}, {{-2., -0.7695896777262188}, {-2., 
          0}}, {{-1., -0.9120309888378301}, {-1., 0}}, {{0., 0.}, {0., 0}}, {{
         4., -1.0250889543081456`}, {4., 0}}, {{5., -0.63378035458458}, {
         5., 0}}, {{6., -0.654909121584764}, {6., 0}}, {{
         10., -1.0380369229358006`}, {10., 0}}},
       VertexColors->None]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], Opacity[0.2], 
      LineBox[{{{-10., 1.0380369229358006`}, {-10., 0}}, {{-6., 
         0.654909121584764}, {-6., 0}}, {{-5., 
         0.63378035458458}, {-5., 0}}, {{-4., 
         1.0250889543081456`}, {-4., 0}}, {{1., 0.9120309888378301}, {
         1., 0}}, {{2., 0.7695896777262188}, {2., 0}}, {{3., 
         0.3471792506807455}, {3., 0}}, {{7., 1.075314417986817}, {7., 0}}, {{
         8., 0.5365690656200699}, {8., 0}}, {{9., 0.890306449444008}, {
         9., 0}}},
       VertexColors->None]}}}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`], 
    AbsoluteThickness[1.6], {}, PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqB3acPjDrzOwP9hC+0oEHXyo+J9e+2Q/hKxwo
cZ3zeJL2Qyhf5sD/XUpPakw+QvkSB0oeJP5k/voEql/kwH7zn3veusP4AgcO
vHi85nAazHyOA2VNDwP1La5B9TMcmNat2lG14AWU/2H/zOf750Trv4XJo4EP
9lB5qHkMDlD9MPMdoObD7HeA2g81T8QB6j6Y+x2g7of5zwHqP6h+BQeo/2Hh
4wANHyhfxQEafvsB5wRyTw==
     "]], {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{-10, 10}, {-1.075314417986817, 1.075314417986817}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7614933771211348`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"62881f9c-1155-40b2-b7b1-b4376cb6d7a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "t_", "]"}], ":=", " ", 
   RowBox[{
    RowBox[{"Sin", "[", "t", "]"}], " ", "+", " ", 
    RowBox[{"0.5", " ", "*", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "*", "t"}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plot1", "=", 
  RowBox[{"DiscretePlot", "[", 
   RowBox[{
    RowBox[{"f", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"\[Minus]", "5"}], ",", "5", ",", "0.1"}], "}"}]}], 
   "]"}]}]}], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"a2244edd-4ef0-4414-bc20-0587e4cff35f"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004766666666666667], 
    AbsoluteThickness[1.6], {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004766666666666667],
       AbsoluteThickness[1.6], Opacity[0.2], 
      LineBox[{{{-3.0999999999999996`, -0.10380787418682266`}, \
{-3.0999999999999996`, 0}}, {{-3., -0.3471792506807455}, {-3., 
          0}}, {{-2.9, -0.5707339442550741}, {-2.9, 
          0}}, {{-2.8, -0.7622876042000458}, {-2.8, 
          0}}, {{-2.6999999999999997`, -0.9123247856563733}, \
{-2.6999999999999997`, 
          0}}, {{-2.5999999999999996`, -1.0147730445087668`}, \
{-2.5999999999999996`, 0}}, {{-2.5, -1.0674721324913259`}, {-2.5, 
          0}}, {{-2.4, -1.0722971124757272`}, {-2.4, 
          0}}, {{-2.3, -1.03492509437082}, {-2.3, 
          0}}, {{-2.1999999999999997`, -0.9642670855762793}, \
{-2.1999999999999997`, 
          0}}, {{-2.0999999999999996`, -0.8716163168910483}, \
{-2.0999999999999996`, 0}}, {{-2., -0.7695896777262188}, {-2., 
          0}}, {{-1.9, -0.6709573163885953}, {-1.9, 
          0}}, {{-1.7999999999999998`, -0.5874653871002014}, \
{-1.7999999999999998`, 
          0}}, {{-1.6999999999999997`, -0.5287574692886025}, \
{-1.6999999999999997`, 
          0}}, {{-1.5999999999999996`, -0.5014912986235849}, \
{-1.5999999999999996`, 0}}, {{-1.5, -0.5087299277715059}, {-1.5, 
          0}}, {{-1.4, -0.5496618437816663}, {-1.4, 
          0}}, {{-1.2999999999999998`, -0.6196751058252062}, \
{-1.2999999999999998`, 
          0}}, {{-1.1999999999999997`, -0.7107788643198004}, \
{-1.1999999999999997`, 
          0}}, {{-1.0999999999999996`, -0.8123345129898115}, \
{-1.0999999999999996`, 0}}, {{-1., -0.9120309888378301}, {-1., 
          0}}, {{-0.8999999999999995, -0.9970168497443987}, \
{-0.8999999999999995, 
          0}}, {{-0.7999999999999998, -1.0550876811750982`}, \
{-0.7999999999999998, 
          0}}, {{-0.7000000000000002, -1.075822370562128}, \
{-0.7000000000000002, 
          0}}, {{-0.5999999999999996, -1.0515662888341328`}, \
{-0.5999999999999996, 0}}, {{-0.5, -0.9781730319062303}, {-0.5, 
          
          0}}, {{-0.39999999999999947`, -0.8554378852922628}, \
{-0.39999999999999947`, 
          0}}, {{-0.2999999999999998, -0.6871836614750809}, \
{-0.2999999999999998, 
          0}}, {{-0.1999999999999993, -0.4809905674925773}, \
{-0.1999999999999993, 
          0}}, {{-0.09999999999999964, -0.24759351997749707`}, \
{-0.09999999999999964, 0}}, {{0., 0.}, {0., 0}}, {{
         3.200000000000001, -0.14553753403907255`}, {
         3.200000000000001, 0}}, {{
         3.3000000000000007`, -0.38651364103091057`}, {
         3.3000000000000007`, 0}}, {{
         3.4000000000000004`, -0.6054784458236036}, {
         3.4000000000000004`, 0}}, {{3.5, -0.7906311076754549}, {3.5, 0}}, {{
         3.5999999999999996`, -0.9329885583280977}, {
         3.5999999999999996`, 0}}, {{
         3.700000000000001, -1.0271124350104885`}, {3.700000000000001, 0}}, {{
         3.8000000000000007`, -1.0715221537750572`}, {
         3.8000000000000007`, 0}}, {{
         3.9000000000000004`, -1.0687579511434901`}, {
         3.9000000000000004`, 0}}, {{4., -1.0250889543081456`}, {4., 0}}, {{
         4.1, -0.9498930067473116}, {4.1, 0}}, {{
         4.200000000000001, -0.8547642488030185}, {4.200000000000001, 0}}, {{
         4.300000000000001, -0.7524287171806079}, {4.300000000000001, 0}}, {{
         4.4, -0.6555653165359039}, {4.4, 0}}, {{4.5, -0.5756379043892865}, {
         4.5, 0}}, {{4.600000000000001, -0.5218431689114116}, {
         4.600000000000001, 0}}, {{4.700000000000001, -0.500268563190142}, {
         4.700000000000001, 0}}, {{4.800000000000001, -0.5133357205612021}, {
         4.800000000000001, 0}}, {{4.9, -0.5595791970528659}, {4.9, 0}}, {{
         5., -0.63378035458458}, {5., 0}}},
       VertexColors->None]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004766666666666667],
       AbsoluteThickness[1.6], Opacity[0.2], 
      LineBox[{{{-5., 0.63378035458458}, {-5., 0}}, {{-4.9, 
         0.5595791970528659}, {-4.9, 0}}, {{-4.8, 
         0.5133357205612017}, {-4.8, 0}}, {{-4.7, 
         0.500268563190142}, {-4.7, 0}}, {{-4.6, 
         0.5218431689114122}, {-4.6, 0}}, {{-4.5, 
         0.5756379043892865}, {-4.5, 0}}, {{-4.4, 
         0.6555653165359039}, {-4.4, 0}}, {{-4.3, 
         0.7524287171806092}, {-4.3, 0}}, {{-4.2, 
         0.8547642488030189}, {-4.2, 0}}, {{-4.1, 
         0.9498930067473116}, {-4.1, 0}}, {{-4., 
         1.0250889543081456`}, {-4., 0}}, {{-3.9, 
         1.0687579511434904`}, {-3.9, 0}}, {{-3.8, 
         1.071522153775057}, {-3.8, 0}}, {{-3.7, 
         1.0271124350104879`}, {-3.7, 0}}, {{-3.5999999999999996`, 
         0.9329885583280977}, {-3.5999999999999996`, 0}}, {{-3.5, 
         0.7906311076754549}, {-3.5, 0}}, {{-3.4, 
         0.6054784458236024}, {-3.4, 0}}, {{-3.3, 
         0.38651364103090813`}, {-3.3, 0}}, {{-3.2, 
         0.14553753403907077`}, {-3.2, 0}}, {{0.10000000000000053`, 
         0.24759351997749923`}, {0.10000000000000053`, 0}}, {{
         0.20000000000000018`, 0.4809905674925793}, {
         0.20000000000000018`, 0}}, {{0.3000000000000007, 
         0.6871836614750826}, {0.3000000000000007, 0}}, {{
         0.40000000000000036`, 0.8554378852922642}, {
         0.40000000000000036`, 0}}, {{0.5, 0.9781730319062303}, {0.5, 0}}, {{
         0.6000000000000005, 1.0515662888341333`}, {
         0.6000000000000005, 0}}, {{0.7000000000000002, 1.075822370562128}, {
         0.7000000000000002, 0}}, {{0.8000000000000007, 1.055087681175098}, {
         0.8000000000000007, 0}}, {{0.9000000000000004, 0.9970168497443981}, {
         0.9000000000000004, 0}}, {{1., 0.9120309888378301}, {1., 0}}, {{
         1.1000000000000005`, 0.8123345129898105}, {
         1.1000000000000005`, 0}}, {{1.2000000000000002`, 0.7107788643198}, {
         1.2000000000000002`, 0}}, {{1.3000000000000007`, 
         0.6196751058252055}, {1.3000000000000007`, 0}}, {{
         1.4000000000000004`, 0.5496618437816659}, {
         1.4000000000000004`, 0}}, {{1.5, 0.5087299277715059}, {1.5, 0}}, {{
         1.6000000000000005`, 0.5014912986235849}, {
         1.6000000000000005`, 0}}, {{1.7000000000000002`, 
         0.5287574692886026}, {1.7000000000000002`, 0}}, {{
         1.8000000000000007`, 0.587465387100202}, {
         1.8000000000000007`, 0}}, {{1.9000000000000004`, 
         0.6709573163885959}, {1.9000000000000004`, 0}}, {{2., 
         0.7695896777262188}, {2., 0}}, {{2.1000000000000005`, 
         0.8716163168910492}, {2.1000000000000005`, 0}}, {{2.2, 
         0.9642670855762794}, {2.2, 0}}, {{2.3000000000000007`, 
         1.0349250943708204`}, {2.3000000000000007`, 0}}, {{
         2.4000000000000004`, 1.0722971124757275`}, {
         2.4000000000000004`, 0}}, {{2.5, 1.0674721324913259`}, {2.5, 0}}, {{
         2.6000000000000005`, 1.0147730445087664`}, {
         2.6000000000000005`, 0}}, {{2.7, 0.9123247856563728}, {2.7, 0}}, {{
         2.8000000000000007`, 0.762287604200044}, {
         2.8000000000000007`, 0}}, {{2.9000000000000004`, 
         0.570733944255073}, {2.9000000000000004`, 0}}, {{3., 
         0.3471792506807455}, {3., 0}}, {{3.0999999999999996`, 
         0.10380787418682266`}, {3.0999999999999996`, 0}}},
       VertexColors->None]}}}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004766666666666667], 
    AbsoluteThickness[1.6], {}, PointBox[CompressedData["
1:eJw9lW9Mk1cUxmspWLFIaftBP0hk4saMm6IbNYbkXP+yxC2ZJDORSdZsgC5u
suhmDH5xStRlGjWbTgG1/iGC2Rc1bsoc52YsC8vK5hTckMS8pVDadEA7WEMH
EuU9D96kad7ce37nPeee53nz3q8urbRaLJbKZ7+pf1kezd7U3cGSPqo7O7Xc
2mjsueiKBGmFudza2vKZnT42qCMwtVy69Lc27wqrQVXmcunNN9J2xW8YJDyX
LvB896p/Ry94OXpJcfn8iv/7wMvRc0/Vf9DvjoDn1BU/B46tKouB59R/3u6y
HaocAs+pdST0bVtVHPHZ+sX0seGL8xI4P0e/8Gnyw9H8BPJl6Sv/PdqVVR0n
Ex9w6JZk4f3MnkHwHLqutKu++80oeLP15u5t73h8IfAy9c5g7Nblu3+DN0sb
4drSlP8n8Oz6fO7NBS991cLCs+s9B4Kblq58yMKbqVeVv9y1e20vCy9D3xpa
n2qqiLCJO5uuf3zle24rHGTh2fS1T+JNB4rj4Nl0n/NqU7knAV6advaU2fIK
EuBZtcq9dC7reBy8GXrHvMbGDT1D4Fn0yIVkuKQvBp5Fn/5y0ZEafwTxk1zb
ubVm395+nJ/gInd+UW2gl5eb+cZ5y+G29q9jBp8x+Sn+ZeGjGq/DAG+MN3a8
MXGwxAAvyWf+2lrdeToI3ihvW/d6yNcZAm+EN+blbrrZGgYvwc2fP/z3ymQU
vGd1DHDDu0sHud2M/4ft96uCxweGcT7KHSP3zl8Oxnm7mS/M9dFztSeLErzM
5Ie4ILx6iffBdP8Mbr3zw+HCt4b5hBnfzSceX1rP78Vw/gF7Cx3fbH/Sz/vN
/V+5bvG65qPtj/F8h69d2D+ef/2P6f49X1r2aUz2yS/x1CrxpIRPG4SP/W5q
kPyYP4PwfrRS3p8Wy/sT6iPUh/goBaR+uif9Iav0B7w4oX/UIP0lv/SXXpP+
U4n0H/Gj5JP7Qb4knZL7A2+McL/gpQj3D944lcl8gDdBxTI/4E3SFzJf4FkU
5o9+l/lU4zKf0NcM9ZHML+Ktao3MN/KlqRyZf/BsCvoAz6aaRD/gpavboi/w
MlSj6A+8mWqZ6BM8u4J+p/WtoG/UP0stGDD1j/nLVHXiDyy82con/oF5cSj4
C/TgUPAfFl6Wuir+BN4ctVD8C7xstUj8DTyngv9Bb04Ff2Sp36l84p+Iz1EO
8VeG/yr4L3guBX9Gfpd6W/wbPJeCv4PnVhni/+C5Fb4P4HkUvh/8FNKqDLI=

     "]], {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{-5., 5.}, {-1.075822370562128, 1.075822370562128}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7614934132704453`*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"6c846659-966c-4b78-bb4f-d81cf0d94bad"]
}, Open  ]]
},
WindowSize->{759, 697},
WindowMargins->{{Automatic, 161}, {Automatic, 32}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 686, 19, 50, "Input",ExpressionUUID->"332774ce-3ad3-43c0-ac56-d42b10d0d710"],
Cell[1269, 43, 10563, 193, 241, "Output",ExpressionUUID->"54ac1feb-9315-4ee8-a446-5bc33df900ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11869, 241, 780, 21, 70, "Input",ExpressionUUID->"0f24073c-219e-476e-a41a-1cc99399bdbb"],
Cell[12652, 264, 1292, 37, 241, "Output",ExpressionUUID->"2d0e6ac7-c428-4651-b2b5-62609d8a2de0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13981, 306, 789, 23, 70, "Input",ExpressionUUID->"964931e8-ef01-4aab-9745-2d770991a293"],
Cell[14773, 331, 1295, 37, 241, "Output",ExpressionUUID->"b525565e-8d10-4ff4-9013-5157dd7f8ecd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16105, 373, 454, 12, 50, "Input",ExpressionUUID->"8bb68083-bd7e-48cc-816b-304a64226c0d"],
Cell[16562, 387, 1293, 37, 241, "Output",ExpressionUUID->"f4286c73-095d-412c-a45b-c1d3edcebed7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17892, 429, 475, 12, 23, "Input",ExpressionUUID->"9f25b49d-9851-4fcf-8e19-e5b8d7b51e4f"],
Cell[18370, 443, 4299, 91, 198, "Output",ExpressionUUID->"1b7aadd4-042f-4712-b37d-1e2d4f133edf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22706, 539, 366, 9, 28, "Input",ExpressionUUID->"08ac5004-1437-4bd2-b22d-73cbf61d9e45"],
Cell[23075, 550, 1293, 37, 241, "Output",ExpressionUUID->"d9ed1950-c78f-44ad-a8ed-b322d830c3f0"]
}, Open  ]],
Cell[24383, 590, 207, 4, 28, "Input",ExpressionUUID->"1137cfd4-5206-442e-98ff-0beb6a3e476b"],
Cell[24593, 596, 181, 3, 28, "Input",ExpressionUUID->"bb6c8c29-239c-4b23-97ee-c5ecbba9bd9a"],
Cell[CellGroupData[{
Cell[24799, 603, 64461, 1223, 212, "WolframAlphaShortInput",ExpressionUUID->"ea33d2db-dade-4eb4-8a76-3ebbc6370843"],
Cell[89263, 1828, 628, 13, 44, "Message",ExpressionUUID->"7e1a4b4d-8bd7-47db-b341-6234010cbb3f"],
Cell[89894, 1843, 36335, 613, 241, "Output",ExpressionUUID->"9990070e-90a8-4ef7-849e-cf2138008b63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126266, 2461, 366, 9, 28, "Input",ExpressionUUID->"05d83445-5d86-4d8e-a297-424de1492d95"],
Cell[126635, 2472, 1293, 37, 241, "Output",ExpressionUUID->"d8f73e76-cd39-4b42-b3c8-dd3aaa8c5732"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127965, 2514, 611, 16, 40, "Input",ExpressionUUID->"4fbda4d1-5304-4ef7-bd42-b291d3704e37"],
Cell[128579, 2532, 1293, 37, 195, "Output",ExpressionUUID->"44c01094-8b75-4294-80e3-1d13e5192101"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129909, 2574, 469, 12, 40, "Input",ExpressionUUID->"dba135ee-1b3b-445f-8481-642d13a51666"],
Cell[130381, 2588, 19843, 343, 195, "Output",ExpressionUUID->"2524ad45-0ad4-4e33-a528-feaddc408390"]
}, Open  ]],
Cell[150239, 2934, 255, 4, 23, "Input",ExpressionUUID->"4322a384-1e2e-4ae4-8dc8-5896f2598051"],
Cell[CellGroupData[{
Cell[150519, 2942, 1141, 30, 72, "Input",ExpressionUUID->"cd4f6636-a610-42a8-83cc-0e0c2c385e27"],
Cell[151663, 2974, 151, 2, 27, "Output",ExpressionUUID->"12a9845d-5ba9-4cf1-b4a5-d85e0d4210ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151851, 2981, 349, 8, 23, "Input",ExpressionUUID->"b52368a6-61c0-41f8-82b1-26ebb22fd23b"],
Cell[152203, 2991, 2562, 61, 195, "Output",ExpressionUUID->"ba9dfd80-fa28-4594-b973-62e97668dbd5"]
}, Open  ]],
Cell[154780, 3055, 156, 3, 23, "Input",ExpressionUUID->"297808f4-e77e-4b96-9ed4-1f7179065e91"],
Cell[CellGroupData[{
Cell[154961, 3062, 370, 9, 23, "Input",ExpressionUUID->"edce7e22-5bc5-4ab0-8db9-98a77397ce6e"],
Cell[155334, 3073, 36333, 613, 195, "Output",ExpressionUUID->"9ecad06a-fe60-4aeb-b895-6f7286b5d9f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191704, 3691, 237, 3, 56, "Input",ExpressionUUID->"11472fa1-8dc4-4331-8ba5-eb291cff1ee9"],
Cell[191944, 3696, 154, 2, 27, "Output",ExpressionUUID->"1bfc8a78-1e62-4eed-828c-976abb79200a"],
Cell[192101, 3700, 155, 2, 27, "Output",ExpressionUUID->"3799d56f-1435-4d7c-b4ef-4cd5e01b0f92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192293, 3707, 408, 10, 23, "Input",ExpressionUUID->"26b6305d-e084-4bce-8057-e94e49d875b1"],
Cell[192704, 3719, 11171, 211, 198, "Output",ExpressionUUID->"54965546-c2a8-46fb-bdba-d6e40b102e0e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203912, 3935, 763, 22, 40, "Input",ExpressionUUID->"0e5aeb9d-1b10-401a-97fe-44addfa4d977"],
Cell[204678, 3959, 7842, 151, 198, "Output",ExpressionUUID->"927b8f32-78ca-4ec3-b02d-02ed9faf2cf7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212557, 4115, 763, 22, 40, "Input",ExpressionUUID->"f4c488f7-1128-4f7a-9127-f2318e867c02"],
Cell[213323, 4139, 7844, 151, 198, "Output",ExpressionUUID->"6de6a4cf-430b-437c-841f-30ad4702c52c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221204, 4295, 854, 24, 40, "Input",ExpressionUUID->"fbe71148-ca0f-4124-845e-b44e68d6216d"],
Cell[222061, 4321, 2632, 61, 198, "Output",ExpressionUUID->"418485ae-04e0-4893-a48d-095ecc733456"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224730, 4387, 782, 22, 40, "Input",ExpressionUUID->"486bb602-e364-446e-93d3-27fb64eec4bf"],
Cell[225515, 4411, 5905, 116, 198, "Output",ExpressionUUID->"4144b9a5-fdff-4c35-83ae-881ca3ff6f38"]
}, Open  ]],
Cell[231435, 4530, 156, 3, 23, "Input",ExpressionUUID->"891a17bf-2ef5-4e23-a0cd-645739707b9b"],
Cell[CellGroupData[{
Cell[231616, 4537, 777, 22, 40, "Input",ExpressionUUID->"25f1cd41-cf42-4833-8853-b6a4a06e048e"],
Cell[232396, 4561, 5907, 116, 198, "Output",ExpressionUUID->"695731c8-7728-455f-a32d-590cc470bc4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238340, 4682, 881, 25, 56, "Input",ExpressionUUID->"af46916d-3bc3-40e5-94a4-3a99baa7d27b"],
Cell[239224, 4709, 5907, 116, 198, "Output",ExpressionUUID->"0caea68f-109b-41ee-8702-d655652eb583"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245168, 4830, 663, 18, 40, "Input",ExpressionUUID->"cbea2801-3929-4522-8a97-f94037b49529"],
Cell[245834, 4850, 151, 2, 27, "Output",ExpressionUUID->"a027660c-3488-47b8-90d0-5e60ede657a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246022, 4857, 882, 24, 72, "Input",ExpressionUUID->"0b4a9562-a517-4469-bd10-24f88d8ed099"],
Cell[246907, 4883, 5931, 116, 198, "Output",ExpressionUUID->"39b9207b-2221-4be1-8527-f997d01ca940"],
Cell[252841, 5001, 175, 2, 27, "Output",ExpressionUUID->"c90db7d9-426a-4424-880d-d66295b3ade7"]
}, Open  ]],
Cell[253031, 5006, 152, 3, 23, "Input",ExpressionUUID->"ce44e183-64db-46b0-b3c8-6176f37e0ba7"],
Cell[CellGroupData[{
Cell[253208, 5013, 896, 25, 56, "Input",ExpressionUUID->"9fee4858-870a-487a-a71e-171170e39371"],
Cell[254107, 5040, 1321, 37, 195, "Output",ExpressionUUID->"5743b85c-8182-45f8-9ee9-5fa6cf0a42ff"]
}, Open  ]],
Cell[255443, 5080, 154, 3, 23, "Input",ExpressionUUID->"d3aeb686-f882-4954-9176-543d2b150d80"],
Cell[CellGroupData[{
Cell[255622, 5087, 788, 23, 56, "Input",ExpressionUUID->"c2039ba1-605d-4740-bbf1-cf3e9dd87a63"],
Cell[256413, 5112, 1319, 37, 195, "Output",ExpressionUUID->"ac88a998-a8f1-4962-a907-c680990f5605"]
}, Open  ]],
Cell[CellGroupData[{
Cell[257769, 5154, 393, 10, 40, "Input",ExpressionUUID->"a67c3aff-f8ee-455d-9dca-fe211ce18c6f"],
Cell[258165, 5166, 2563, 61, 195, "Output",ExpressionUUID->"005dc539-9544-4a71-a083-20da74c99712"]
}, Open  ]],
Cell[260743, 5230, 595, 18, 40, "Input",ExpressionUUID->"26e64b01-6786-430c-a426-557079f2a77a"],
Cell[CellGroupData[{
Cell[261363, 5252, 363, 9, 23, "Input",ExpressionUUID->"2b921d0c-67d2-471f-a809-416f028e0eca"],
Cell[261729, 5263, 1293, 37, 195, "Output",ExpressionUUID->"38d14246-e4a4-4195-b7f3-e7d6da8133e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263059, 5305, 488209, 9088, 68, "WolframAlphaShortInput",ExpressionUUID->"05d53f82-b72f-46c3-b433-98d9420c9ee9"],
Cell[751271, 14395, 610, 13, 32, "Message",ExpressionUUID->"1c176d3f-3d34-4048-b465-fcd7cd4b30b5"],
Cell[751884, 14410, 555, 16, 27, "Output",ExpressionUUID->"e6f8074b-af64-436c-b748-4fd07eac3abe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[752476, 14431, 365, 9, 23, "Input",ExpressionUUID->"2f77a739-e794-482f-9cf7-b3b957bb0fa9"],
Cell[752844, 14442, 30337, 515, 198, "Output",ExpressionUUID->"7922f8da-e75f-413a-8636-f5a402c41fee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[783218, 14962, 768, 22, 40, "Input",ExpressionUUID->"0c2525c9-1282-4197-a959-71266ac8e691"],
Cell[783989, 14986, 2425, 58, 195, "Output",ExpressionUUID->"a5498161-08ac-4b06-9254-d3cb071065ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[786451, 15049, 788, 23, 56, "Input",ExpressionUUID->"e61c0316-bd00-45bf-8ed2-c9fc930998e8"],
Cell[787242, 15074, 2974, 66, 198, "Output",ExpressionUUID->"fcbce25b-8e26-4795-ba9f-bceac17633b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790253, 15145, 763, 22, 40, "Input",ExpressionUUID->"3ec10c2c-15a1-4732-b845-10193a0587e7"],
Cell[791019, 15169, 2826, 63, 198, "Output",ExpressionUUID->"92758c8b-2376-47d4-a136-ed1fd9717aa1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793882, 15237, 508, 14, 23, "Input",ExpressionUUID->"e0afc0fb-7e32-4141-9d96-c6c67b7b4de5"],
Cell[794393, 15253, 1295, 37, 195, "Output",ExpressionUUID->"bac4258c-2dba-4dea-a98a-b8100e99242f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[795725, 15295, 514, 14, 23, "Input",ExpressionUUID->"f1785326-48ff-4b58-b0d3-18be012a759d"],
Cell[796242, 15311, 2974, 66, 198, "Output",ExpressionUUID->"aa79b327-e24a-40f2-b4c6-3a2d4a64d503"]
}, Open  ]],
Cell[CellGroupData[{
Cell[799253, 15382, 366, 9, 23, "Input",ExpressionUUID->"bfdf5014-e7fc-4f82-a1ee-c45eac6a5f47"],
Cell[799622, 15393, 28021, 477, 198, "Output",ExpressionUUID->"da740495-5596-467a-85b9-f3a5f0175143"]
}, Open  ]],
Cell[CellGroupData[{
Cell[827680, 15875, 459, 13, 23, "Input",ExpressionUUID->"5af8997e-7ccb-4643-b66c-940fb0c72c42"],
Cell[828142, 15890, 2972, 66, 198, "Output",ExpressionUUID->"26401e04-d430-4526-82f6-9ec0b5ae0ffe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[831151, 15961, 759, 22, 40, "Input",ExpressionUUID->"126048a9-4c7e-4ec0-87d4-3487aa0d00b8"],
Cell[831913, 15985, 2423, 58, 195, "Output",ExpressionUUID->"9903dcdd-4b2c-4455-9530-aecef24f6ee1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[834373, 16048, 658, 19, 50, "Input",ExpressionUUID->"f09c6828-f183-4058-b566-7dcea90f85e0"],
Cell[835034, 16069, 67529, 1147, 245, "Output",ExpressionUUID->"d497b022-3014-4e40-bdac-cdd16e93085a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[902600, 17221, 662, 19, 50, "Input",ExpressionUUID->"f17b70c5-48d2-4d44-b0bd-397bcf0a4a25"],
Cell[903265, 17242, 72371, 1231, 245, "Output",ExpressionUUID->"a4105cc3-d62a-4dda-b565-14cbd3c431c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[975673, 18478, 644, 17, 50, "Input",ExpressionUUID->"be703e7f-cb2c-44e0-96e3-f8d6463af2c8"],
Cell[976320, 18497, 2773, 65, 241, "Output",ExpressionUUID->"ad57fd81-9940-4996-bf03-a3841897fba0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[979130, 18567, 796, 24, 50, "Input",ExpressionUUID->"367f4d9e-aa18-42ef-a2e2-8ffc77348209"],
Cell[979929, 18593, 69569, 1203, 245, "Output",ExpressionUUID->"2c913952-dab3-4ef6-a1e5-f4edd603e2be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1049535, 19801, 375, 9, 28, "Input",ExpressionUUID->"47665348-75aa-4af4-9143-ae118f36f44d"],
Cell[1049913, 19812, 1295, 37, 241, "Output",ExpressionUUID->"2a865169-566e-4f65-893b-ef7851451c03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051245, 19854, 193, 2, 23, "Input",ExpressionUUID->"ea0a851d-40c9-4a1a-b017-e6d1ab65e6aa"],
Cell[1051441, 19858, 166, 2, 27, "Output",ExpressionUUID->"31954d80-a92b-4299-b1a0-d1d8efbe088b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051644, 19865, 2533, 70, 53, "WolframAlphaShortInput",ExpressionUUID->"129b11ec-945f-497f-a801-2b24d636283c"],
Cell[1054180, 19937, 381, 9, 18, "Message",ExpressionUUID->"613adfa7-de0b-4ffd-9a70-829ff7da680f"],
Cell[1054564, 19948, 383, 9, 18, "Message",ExpressionUUID->"c22db30a-785b-4c51-acee-c663199d9f8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1054984, 19962, 2521, 70, 53, "WolframAlphaShortInput",ExpressionUUID->"c13df4c4-6e7b-4f31-a113-cd25f3b97027"],
Cell[1057508, 20034, 381, 9, 18, "Message",ExpressionUUID->"435d592f-2d25-496e-8aa9-fbdd9de33a59"],
Cell[1057892, 20045, 381, 9, 18, "Message",ExpressionUUID->"a38d9665-23fd-42bc-97fe-2af1e76a7365"]
}, Open  ]],
Cell[1058288, 20057, 154, 3, 23, "Input",ExpressionUUID->"dfae5aa2-ef5d-4ed9-9f48-b54341bf23bb"],
Cell[1058445, 20062, 405, 10, 40, "Input",ExpressionUUID->"3cf797a4-f909-435f-b7ba-11d9fe08c506"],
Cell[CellGroupData[{
Cell[1058875, 20076, 721, 21, 50, "Input",ExpressionUUID->"c91da107-bc2f-4a77-ab29-4c984634f8d4"],
Cell[1059599, 20099, 26847, 459, 245, "Output",ExpressionUUID->"5be4c897-a80e-4d0b-8f8e-2b80bc8f6856"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1086483, 20563, 225, 5, 28, "Input",ExpressionUUID->"c485cf93-d89b-4832-b4a3-aab86be7f834"],
Cell[1086711, 20570, 26868, 460, 245, "Output",ExpressionUUID->"42271bfb-d864-48a3-bf4a-412dfc1f2fc9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1113616, 21035, 752, 22, 50, "Input",ExpressionUUID->"cb29b1cc-19c3-4edd-8048-b62800929cfb"],
Cell[1114371, 21059, 26849, 459, 245, "Output",ExpressionUUID->"4f63f484-0f38-4da7-801e-9091d5478237"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1141257, 21523, 512, 13, 50, "Input",ExpressionUUID->"c28050c5-fb24-4f2d-a78c-8354de4d1b72"],
Cell[1141772, 21538, 1292, 37, 241, "Output",ExpressionUUID->"4ce16376-95db-4eb0-98d2-884fe377d1fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1143101, 21580, 748, 20, 50, "Input",ExpressionUUID->"3709cff3-0056-42a9-933d-36b2b0d4f16d"],
Cell[1143852, 21602, 62622, 1051, 245, "Output",ExpressionUUID->"c48f1011-0200-42f2-8157-3e71e0f73fc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1206511, 22658, 644, 17, 40, "Input",ExpressionUUID->"25b3dc2c-2135-4567-affd-473955147167"],
Cell[1207158, 22677, 340, 9, 43, "Output",ExpressionUUID->"dfc3a0ab-d644-4081-b3d8-9e3494d1d16d"]
}, Open  ]],
Cell[1207513, 22689, 163, 3, 23, "Input",ExpressionUUID->"1e87618f-c45c-41c7-bdad-614c75161c4a"],
Cell[CellGroupData[{
Cell[1207701, 22696, 668, 18, 56, "Input",ExpressionUUID->"95d2f81a-8930-4867-ad00-bbd7a51209ed"],
Cell[1208372, 22716, 413, 11, 44, "Output",ExpressionUUID->"7d2336b1-f525-48d8-8cb3-c92b523da73f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1208822, 22732, 643, 18, 40, "Input",ExpressionUUID->"d0c7cd75-df06-4177-b598-3c96c8bc30cc"],
Cell[1209468, 22752, 440, 10, 18, "Message",ExpressionUUID->"48708d2c-faed-4472-9858-55863edc7e85"],
Cell[1209911, 22764, 241, 5, 27, "Output",ExpressionUUID->"91bf40dc-3646-4b6b-b18c-4bf7153c287e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1210189, 22774, 645, 18, 40, "Input",ExpressionUUID->"e1a27035-7b45-43ff-8dd7-d2c838fa44c7"],
Cell[1210837, 22794, 413, 11, 44, "Output",ExpressionUUID->"e92fac7b-fe7d-4146-bd95-8b05a873f74e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1211287, 22810, 1199, 31, 72, "Input",ExpressionUUID->"ef01e6b0-0b45-47b8-9e78-354aa65fa459"],
Cell[1212489, 22843, 159, 2, 27, "Output",ExpressionUUID->"346f792d-e3ce-4951-afff-f5f61a63697f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1212685, 22850, 930, 26, 40, "Input",ExpressionUUID->"965ac06a-b155-4c4b-8b67-d377be146df0"],
Cell[1213618, 22878, 544, 16, 57, "Output",ExpressionUUID->"e5bdb576-ea22-47f9-932c-6f54f52d0aa1"]
}, Open  ]],
Cell[1214177, 22897, 384, 13, 26, "Input",ExpressionUUID->"705cb7c1-17a2-404d-af3c-7d388271c5b1"],
Cell[CellGroupData[{
Cell[1214586, 22914, 2631, 83, 121, "Input",ExpressionUUID->"bdda80e3-c002-4f91-aba4-9917002c8921"],
Cell[1217220, 22999, 556, 12, 19, "Message",ExpressionUUID->"b2d109fe-1ce9-45d2-8c81-0baca91d94cd"],
Cell[1217779, 23013, 554, 12, 19, "Message",ExpressionUUID->"71b51737-e5f7-427e-80d4-073945e7fd83"],
Cell[1218336, 23027, 556, 12, 19, "Message",ExpressionUUID->"249d145a-2ddf-4714-a0d1-9902214790e2"],
Cell[1218895, 23041, 450, 10, 18, "Message",ExpressionUUID->"8681afa8-2a91-41fa-a3ad-7cef66153774"],
Cell[1219348, 23053, 1259, 36, 44, "Output",ExpressionUUID->"49cf6cf5-24f2-419e-b768-3212c58e547a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1220644, 23094, 2535, 81, 121, "Input",ExpressionUUID->"d19bcae6-b8f4-441a-ab75-d703e9bca669"],
Cell[1223182, 23177, 614, 18, 47, "Output",ExpressionUUID->"07f9d9dc-5386-4d20-8154-301428a5418a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1223833, 23200, 638, 19, 44, "Input",ExpressionUUID->"64aacb8e-eb73-43ac-a404-58ecec6cae7c"],
Cell[1224474, 23221, 502, 15, 47, "Output",ExpressionUUID->"1ab39ccc-3659-4b8e-9a87-4f237212882c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1225013, 23241, 522, 16, 44, "Input",ExpressionUUID->"a349970e-58a5-46ae-9b43-d032af65dbde"],
Cell[1225538, 23259, 169, 3, 27, "Output",ExpressionUUID->"2824f615-38db-4b15-a206-96fbf7677007"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1225744, 23267, 2420, 76, 105, "Input",ExpressionUUID->"cf5e74bf-03f6-4231-a10f-30ee7b397829"],
Cell[1228167, 23345, 960, 17, 82, "Message",ExpressionUUID->"bb60f4f5-0d77-43c6-909a-26bd37cac989"],
Cell[1229130, 23364, 1110, 20, 105, "Message",ExpressionUUID->"72c9aab3-8824-4251-9290-069a747a2dc5"],
Cell[1230243, 23386, 960, 17, 82, "Message",ExpressionUUID->"847a36da-4c98-414a-a60f-c8b0c9d06ef4"],
Cell[1231206, 23405, 1032, 18, 87, "Message",ExpressionUUID->"78bf6b9a-2d95-495b-85ba-3f2edf9b7a71"],
Cell[1232241, 23425, 960, 17, 82, "Message",ExpressionUUID->"337a8c4a-aa5d-422f-b325-6f1378e8d0e8"],
Cell[1233204, 23444, 452, 10, 26, "Message",ExpressionUUID->"2511f614-c878-4773-9b31-fb964fa63e95"],
Cell[1233659, 23456, 1008, 18, 87, "Message",ExpressionUUID->"28f4041a-b55d-49aa-93f6-a0e0e66e7c9c"],
Cell[1234670, 23476, 1028, 19, 87, "Message",ExpressionUUID->"59b546ef-c8ad-4e22-8043-f6b1471e8f1d"],
Cell[1235701, 23497, 507, 16, 72, "Output",ExpressionUUID->"417181b5-2e4d-4fcf-9e81-629972d46981"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1236245, 23518, 2514, 78, 210, "Input",ExpressionUUID->"1d0aecde-0d29-4372-a25a-8e674a8342bb"],
Cell[1238762, 23598, 555, 12, 19, "Message",ExpressionUUID->"cd18938b-cf5b-4422-ad7f-9a747f827c35"],
Cell[1239320, 23612, 557, 12, 19, "Message",ExpressionUUID->"960b1bb5-5030-4a45-9a2c-f6e96f0c5d0b"],
Cell[1239880, 23626, 555, 12, 19, "Message",ExpressionUUID->"e4cea5de-404b-4eb0-a661-e8e7b7b7a53a"],
Cell[1240438, 23640, 555, 12, 19, "Message",ExpressionUUID->"269cd20d-c375-495b-9128-391bd24c13c0"]
}, Open  ]],
Cell[1241008, 23655, 175, 4, 23, "Input",ExpressionUUID->"da89587a-f829-4a6d-b7a2-c085bffd69fa"],
Cell[CellGroupData[{
Cell[1241208, 23663, 817, 24, 40, "Input",ExpressionUUID->"6099ccf6-204b-4b49-bfb0-840acbc66c31"],
Cell[1242028, 23689, 175, 4, 47, "Output",ExpressionUUID->"e570cca6-0642-4a7e-862a-579349ca42b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1242240, 23698, 718, 19, 50, "Input",ExpressionUUID->"22249efd-36b5-446b-8af6-32332c3c3072"],
Cell[1242961, 23719, 26555, 454, 241, "Output",ExpressionUUID->"f66716ce-21ce-4896-8061-a7456f430d3a"]
}, Open  ]],
Cell[1269531, 24176, 156, 3, 28, "Input",ExpressionUUID->"d3f294de-282c-43ff-bfee-4ec43d3cd64c"],
Cell[CellGroupData[{
Cell[1269712, 24183, 1485, 45, 90, "Input",ExpressionUUID->"bac352fa-0e85-4f78-a18c-c5a098197a75"],
Cell[1271200, 24230, 424, 10, 26, "Message",ExpressionUUID->"73a64df2-566f-4838-9fb0-f4d43395be15"],
Cell[1271627, 24242, 402, 10, 26, "Message",ExpressionUUID->"a3907bb6-6610-47e0-9c34-999f05f70677"],
Cell[1272032, 24254, 434, 10, 26, "Message",ExpressionUUID->"4ba80a12-a04a-408c-a8aa-f551cf6b0e14"],
Cell[1272469, 24266, 424, 10, 26, "Message",ExpressionUUID->"818a7d14-28f9-4542-91ff-16cbc6577b2b"],
Cell[1272896, 24278, 402, 10, 26, "Message",ExpressionUUID->"b5a15527-1ac9-4418-bb27-c5050ef1a354"],
Cell[1273301, 24290, 444, 10, 26, "Message",ExpressionUUID->"82fe3be6-377e-43ac-92b5-703477a128b9"],
Cell[1273748, 24302, 424, 10, 26, "Message",ExpressionUUID->"b445f21d-73a5-43df-9a1f-39260cb87acc"],
Cell[1274175, 24314, 443, 10, 26, "Message",ExpressionUUID->"6dcdbe62-2d7b-4ef4-a54b-4e211812ac72"],
Cell[1274621, 24326, 1295, 38, 241, "Output",ExpressionUUID->"86e91c82-e96a-418d-8174-4dc48bae2a5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1275953, 24369, 1117, 33, 70, "Input",ExpressionUUID->"35b96719-772f-403b-b1f3-69cfd3ea8018"],
Cell[1277073, 24404, 424, 10, 26, "Message",ExpressionUUID->"0c1ccdde-22f4-4024-b8d2-79b01a1f55fe"],
Cell[1277500, 24416, 400, 10, 26, "Message",ExpressionUUID->"90cecaf6-c03f-41ac-ab49-a53162e184c7"],
Cell[1277903, 24428, 432, 10, 26, "Message",ExpressionUUID->"f32d429e-3f0b-4535-97d5-1dfe290a26a6"],
Cell[1278338, 24440, 424, 10, 26, "Message",ExpressionUUID->"285d53ad-d111-471f-b735-306f4e9eaa95"],
Cell[1278765, 24452, 400, 10, 26, "Message",ExpressionUUID->"ca4c1192-72e7-4ddf-8c80-4accf3994efe"],
Cell[1279168, 24464, 447, 10, 26, "Message",ExpressionUUID->"487cd288-af5e-4e2f-b430-24cbd2231da5"],
Cell[1279618, 24476, 422, 10, 26, "Message",ExpressionUUID->"f8fc7577-b3b3-47cc-9837-4c7eea356a2e"],
Cell[1280043, 24488, 443, 10, 22, "Message",ExpressionUUID->"d42cafe8-b6a4-416a-aff7-b5d9cd65c7df"],
Cell[1280489, 24500, 1297, 38, 241, "Output",ExpressionUUID->"d243795c-8985-42ad-b36a-5c0b4c736afa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1281823, 24543, 1089, 32, 70, "Input",ExpressionUUID->"c68dfb99-3037-4abd-a539-a6c6441a567d"],
Cell[1282915, 24577, 359, 9, 22, "Message",ExpressionUUID->"3bf74fc7-060b-415d-b888-03b230d660e3"],
Cell[1283277, 24588, 401, 10, 22, "Message",ExpressionUUID->"d4ed22e1-3ec3-40fb-a9b7-79a3bd5d54f8"],
Cell[1283681, 24600, 360, 9, 22, "Message",ExpressionUUID->"fa5c4aba-1b4c-4e99-a0c9-e0bb8e95633c"],
Cell[1284044, 24611, 364, 9, 22, "Message",ExpressionUUID->"d2a0aed2-140d-4178-a07d-7ae331848758"],
Cell[1284411, 24622, 361, 9, 22, "Message",ExpressionUUID->"aaa44fdf-3168-46f9-b418-7758be2aa60f"],
Cell[1284775, 24633, 403, 10, 22, "Message",ExpressionUUID->"80c146eb-c554-4044-8502-73e7d2ff26c3"],
Cell[1285181, 24645, 362, 9, 22, "Message",ExpressionUUID->"135242c3-9848-452b-8b98-d9165e2f85e6"],
Cell[1285546, 24656, 447, 10, 22, "Message",ExpressionUUID->"3108e643-3b37-46c9-9d06-3e5408be5618"],
Cell[1285996, 24668, 361, 9, 22, "Message",ExpressionUUID->"5d666bc6-4681-4bc0-a6d4-134263217a42"],
Cell[1286360, 24679, 444, 10, 22, "Message",ExpressionUUID->"8e7d5344-ffc6-4fe1-b615-9bc91df4e499"],
Cell[1286807, 24691, 401, 10, 22, "Message",ExpressionUUID->"6f0ce24f-e989-45d5-9da8-99c9576b15fe"],
Cell[1287211, 24703, 443, 10, 22, "Message",ExpressionUUID->"83cc21b8-8eab-4184-ad52-2b7c91d00c88"],
Cell[1287657, 24715, 1297, 38, 241, "Output",ExpressionUUID->"1bf86595-664f-41fa-8933-a44a14ffb7f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1288991, 24758, 660, 18, 50, "Input",ExpressionUUID->"b35bddcf-2ef2-488c-9ea2-734825d23271"],
Cell[1289654, 24778, 393, 9, 22, "Message",ExpressionUUID->"6dc7005c-58f6-41fb-849f-7b959baa2336"],
Cell[1290050, 24789, 1294, 37, 241, "Output",ExpressionUUID->"7c0ce845-b027-4abb-9ecc-92c405e46474"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1291381, 24831, 555, 15, 50, "Input",ExpressionUUID->"f7c734b8-6071-4760-9697-229de78cc101"],
Cell[1291939, 24848, 3187, 73, 245, "Output",ExpressionUUID->"9a5f87f2-c797-409e-a29a-b5e806fc4736"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1295163, 24926, 807, 22, 70, "Input",ExpressionUUID->"33c80f77-3dcf-41e0-8969-4c3f6b0b6c93"],
Cell[1295973, 24950, 2559, 61, 241, "Output",ExpressionUUID->"2104ed01-bf63-460c-8d88-02ce449cb6d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1298569, 25016, 92, 0, 32, "WolframAlphaShort",ExpressionUUID->"c455e139-673d-4128-8ca9-02185fae1ba8"],
Cell[1298664, 25018, 196, 4, 33, "Output",ExpressionUUID->"eb7471b1-7e4f-4f1e-8c51-5938f65105ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1298897, 25027, 352, 10, 28, "Input",ExpressionUUID->"7a9a4896-0b32-4288-bb20-0d3320cae6c4"],
Cell[1299252, 25039, 33886, 573, 241, "Output",ExpressionUUID->"9d18481d-b321-4945-a369-e368c2765cad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1333175, 25617, 834, 21, 70, "Input",ExpressionUUID->"9a3d7cd5-e390-4b38-ab92-c9432a99bf69"],
Cell[1334012, 25640, 196, 3, 58, "Output",ExpressionUUID->"9baefed3-3692-4d51-a93d-5922b7477290"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1334245, 25648, 507, 14, 50, "Input",ExpressionUUID->"6b858654-7406-4e92-adee-d257b8cc17e0"],
Cell[1334755, 25664, 151, 2, 33, "Output",ExpressionUUID->"70d68235-03e3-4bad-b6c5-03a8c37f652f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1334943, 25671, 609, 16, 28, "Input",ExpressionUUID->"edeb03e5-bf54-4950-9798-663d285ef004"],
Cell[1335555, 25689, 573, 16, 54, "Output",ExpressionUUID->"6ae8a2e1-a2dc-4f49-b346-50d4bd6f0711"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1336165, 25710, 541, 15, 28, "Input",ExpressionUUID->"cce2b039-2af7-40a1-852c-c433228959e6"],
Cell[1336709, 25727, 573, 16, 54, "Output",ExpressionUUID->"264889a2-98bc-4a31-b012-518eba5f41a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1337319, 25748, 423, 10, 28, "Input",ExpressionUUID->"0fd6bc8c-69e5-46ff-9a06-404b29861dc5"],
Cell[1337745, 25760, 559, 12, 24, "Message",ExpressionUUID->"13dca4cd-d1ff-4108-bc41-0bf76eee7fba"],
Cell[1338307, 25774, 363, 9, 54, "Output",ExpressionUUID->"1f016dfa-1b2b-4e1e-8190-b6988e3099da"]
}, Open  ]],
Cell[1338685, 25786, 1270, 37, 50, "Input",ExpressionUUID->"f3e1e2c4-87ca-4dbd-83c6-415f859eece6"],
Cell[1339958, 25825, 2349, 73, 130, "Input",ExpressionUUID->"d690b0a1-63db-4fe5-919b-6fd43575b44c"],
Cell[CellGroupData[{
Cell[1342332, 25902, 409, 9, 28, "Input",ExpressionUUID->"e6e86105-1461-481b-8e7a-a1d922ccda07"],
Cell[1342744, 25913, 459, 10, 22, "Message",ExpressionUUID->"61c80ee1-5e4d-4d3e-bfa0-43a1617a8a4b"],
Cell[1343206, 25925, 386, 9, 33, "Output",ExpressionUUID->"fa1d9c77-c366-4d0c-b2c4-70398e72ece3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1343629, 25939, 201, 3, 28, "Input",ExpressionUUID->"8a93b0df-3b5b-4061-bef1-dfd13d133e5e"],
Cell[1343833, 25944, 180, 3, 33, "Output",ExpressionUUID->"6d470e1d-c10f-458a-a822-3a3ab1569cd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1344050, 25952, 239, 6, 48, "Input",ExpressionUUID->"95ef02b7-e218-4f7c-9f01-04b201d34a3b"],
Cell[1344292, 25960, 263, 6, 53, "Output",ExpressionUUID->"ac39ddf0-2703-44ef-866e-b5d821fc37c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1344592, 25971, 294, 8, 48, "Input",ExpressionUUID->"3c5ee486-b5b4-4d0e-9b0b-c2751fc0a298"],
Cell[1344889, 25981, 178, 3, 33, "Output",ExpressionUUID->"7c5bb423-79b5-4826-876d-5bf377ccc94d"]
}, Open  ]],
Cell[1345082, 25987, 203, 3, 28, "Input",ExpressionUUID->"68e0ed7a-48d1-4c1d-9ecd-7c5df143623b"],
Cell[1345288, 25992, 222, 5, 48, InheritFromParent,ExpressionUUID->"2695c699-fc66-4e9c-b1e8-10e508ccebb9"],
Cell[CellGroupData[{
Cell[1345535, 26001, 245, 5, 28, "Input",ExpressionUUID->"5092f52d-ead0-474d-949b-31e87c84382a"],
Cell[1345783, 26008, 201, 4, 32, "Output",ExpressionUUID->"1195b15a-f1e5-4484-b742-0563fcb9cc11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1346021, 26017, 262, 7, 45, "Input",ExpressionUUID->"43856070-b1ef-4ea4-942f-a6a3992310ec"],
Cell[1346286, 26026, 286, 7, 49, "Output",ExpressionUUID->"2035df3f-ac1c-4fb6-9129-fa46170d0b7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1346609, 26038, 1213, 36, 67, "Input",ExpressionUUID->"558620e0-9793-4d22-b29d-b01d8b00b047"],
Cell[1347825, 26076, 552, 12, 26, "Message",ExpressionUUID->"203ad3c3-79ce-4762-ade6-9f6331eb033d"],
Cell[1348380, 26090, 356, 9, 50, "Output",ExpressionUUID->"9d0d61c2-c594-462f-b7a3-f0fb3c0fcf38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1348773, 26104, 230, 4, 28, "Input",ExpressionUUID->"60e619f0-cf93-4f72-af3c-b5c2ff02d917"],
Cell[1349006, 26110, 358, 9, 50, "Output",ExpressionUUID->"df040dd7-d70e-46ac-a5f9-c1dd416ef100"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1349401, 26124, 566, 15, 48, "Input",ExpressionUUID->"c347efbf-1877-424c-b613-5b968f2c9daa"],
Cell[1349970, 26141, 373, 10, 55, "Output",ExpressionUUID->"91e5d2d7-d4b1-47d9-b6ec-973aeb8fd8d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1350380, 26156, 398, 11, 51, "Input",ExpressionUUID->"cf0f7b94-5683-48c2-b20f-045b7e294f16"],
Cell[1350781, 26169, 724, 21, 35, "Output",ExpressionUUID->"0c2ec4b2-ae66-4ada-94ea-7e6422dd4b13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1351542, 26195, 472, 10, 48, "Input",ExpressionUUID->"3055e5dd-92a1-401c-a26e-add75482938e"],
Cell[1352017, 26207, 461, 10, 23, "Message",ExpressionUUID->"909a92d6-910a-4d5f-9695-67eb328fc3b6"],
Cell[1352481, 26219, 355, 8, 32, "Output",ExpressionUUID->"6e2f3be0-31d6-4286-b29a-d1a30fe52f54"]
}, Open  ]],
Cell[1352851, 26230, 254, 5, 28, "Input",ExpressionUUID->"881ce116-327e-4f44-bb5c-32feda55c071"],
Cell[CellGroupData[{
Cell[1353130, 26239, 369, 8, 28, "Input",ExpressionUUID->"6c4d66b6-40e9-448a-afab-90d11a53404d"],
Cell[1353502, 26249, 644, 13, 30, "Message",ExpressionUUID->"98a67290-a104-42fc-abd5-26fc82ffd557"],
Cell[1354149, 26264, 643, 13, 30, "Message",ExpressionUUID->"98c85b02-8658-4337-8800-a55892cfc9f2"],
Cell[1354795, 26279, 469, 13, 36, "Output",ExpressionUUID->"1ef4df8c-c220-4018-9213-a5cd3332c57a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1355301, 26297, 494, 12, 28, "Input",ExpressionUUID->"1c1ac626-5d56-4958-8bef-b57172e22b26"],
Cell[1355798, 26311, 1430, 24, 105, "Message",ExpressionUUID->"6b088e42-212f-430d-966d-2176b66cc33d"],
Cell[1357231, 26337, 1576, 26, 106, "Message",ExpressionUUID->"47f357ce-7f7b-452d-a826-dc88f9a2f094"],
Cell[1358810, 26365, 1430, 24, 105, "Message",ExpressionUUID->"52e0697c-e281-47af-8f1e-c3074b3c0706"],
Cell[1360243, 26391, 1500, 25, 87, "Message",ExpressionUUID->"4420dae2-6fe1-4ef8-9483-ba448916eb5f"],
Cell[1361746, 26418, 1428, 24, 105, "Message",ExpressionUUID->"9e0caa17-4b1f-4a50-bb59-cf48a9b830a7"],
Cell[1363177, 26444, 448, 10, 21, "Message",ExpressionUUID->"a04604e9-11ce-49d1-8e22-66956ea21b7c"],
Cell[1363628, 26456, 1478, 25, 87, "Message",ExpressionUUID->"1163a792-cd25-4ff1-84c8-d4cc58c3219b"],
Cell[1365109, 26483, 1492, 25, 105, "Message",ExpressionUUID->"9ffde1d3-06f1-4253-87b5-5c8d50406312"],
Cell[1366604, 26510, 731, 21, 69, "Output",ExpressionUUID->"693eeea7-d625-4fb7-a6ad-ac6a64bb6b5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1367372, 26536, 384, 11, 51, "Input",ExpressionUUID->"86d1b3e5-ef0a-4211-96a7-26aec5351f79"],
Cell[1367759, 26549, 169, 2, 32, "Output",ExpressionUUID->"6b49d90f-0307-41e7-ab76-065ef1551183"]
}, Open  ]],
Cell[1367943, 26554, 582, 17, 28, "Input",ExpressionUUID->"52b5707b-277f-4a84-b963-bd1a815b9686"],
Cell[1368528, 26573, 207, 4, 28, "Input",ExpressionUUID->"8e14b344-5cdc-4b31-bf37-2461dc006797"],
Cell[1368738, 26579, 152, 3, 28, "Input",ExpressionUUID->"d3b8df10-dd2e-456f-876b-4730a57f44c0"],
Cell[CellGroupData[{
Cell[1368915, 26586, 777, 20, 48, "Input",ExpressionUUID->"3343112b-f7a8-4535-b114-1f2a0cfb31d4"],
Cell[1369695, 26608, 376, 9, 23, "Message",ExpressionUUID->"5873d597-412a-4ed3-afee-571a15ac86ad"],
Cell[1370074, 26619, 704, 20, 62, "Output",ExpressionUUID->"9860fe1a-d9bc-422a-9529-9c5ecad388c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1370815, 26644, 964, 27, 67, "Input",ExpressionUUID->"e6185b7f-8b6e-48d4-bbfe-a4037a22de10"],
Cell[1371782, 26673, 1599, 39, 90, "Output",ExpressionUUID->"341c4c02-74d4-4e25-91ce-463c779e930e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1373418, 26717, 890, 25, 67, "Input",ExpressionUUID->"45bf9b5f-4349-42b7-9da6-c736286b6471"],
Cell[1374311, 26744, 3132, 69, 239, "Output",ExpressionUUID->"868ec844-0c9b-437a-9062-1ca37565699e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1377480, 26818, 609, 16, 48, "Input",ExpressionUUID->"99f06461-c0fd-4b5e-9d71-6d493676ac3e"],
Cell[1378092, 26836, 26549, 453, 241, "Output",ExpressionUUID->"6192a118-c8c4-420d-b19f-7223b0ca6c17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1404678, 27294, 974, 27, 67, "Input",ExpressionUUID->"d1ebd5d3-3243-4a63-a19d-cfb0360d8559"],
Cell[1405655, 27323, 634, 19, 59, "Output",ExpressionUUID->"44ebff92-3b3b-413b-a6e4-6b52efd60e35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1406326, 27347, 1247, 37, 86, "Input",ExpressionUUID->"94470ce2-783d-4fb1-a4ed-90bb75c18935"],
Cell[1407576, 27386, 2420, 58, 240, "Output",ExpressionUUID->"645e1922-b393-4979-aaf6-475008805af3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1410033, 27449, 734, 21, 48, "Input",ExpressionUUID->"1729f74b-12fe-416b-a1d7-4d4cf92022fa"],
Cell[1410770, 27472, 4234, 99, 239, "Output",ExpressionUUID->"62881f9c-1155-40b2-b7b1-b4376cb6d7a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1415041, 27576, 605, 17, 48, "Input",ExpressionUUID->"a2244edd-4ef0-4414-bc20-0587e4cff35f"],
Cell[1415649, 27595, 11156, 221, 273, "Output",ExpressionUUID->"6c846659-966c-4b78-bb4f-d81cf0d94bad"]
}, Open  ]]
}
]
*)

